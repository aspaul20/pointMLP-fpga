// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FCMac.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FCMac::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FCMac::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> FCMac::ap_ST_fsm_state1 = "1";
const sc_lv<8> FCMac::ap_ST_fsm_state2 = "10";
const sc_lv<8> FCMac::ap_ST_fsm_state3 = "100";
const sc_lv<8> FCMac::ap_ST_fsm_state4 = "1000";
const sc_lv<8> FCMac::ap_ST_fsm_state5 = "10000";
const sc_lv<8> FCMac::ap_ST_fsm_state6 = "100000";
const sc_lv<8> FCMac::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> FCMac::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> FCMac::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> FCMac::ap_const_lv32_2 = "10";
const sc_lv<1> FCMac::ap_const_lv1_0 = "0";
const sc_lv<32> FCMac::ap_const_lv32_7 = "111";
const sc_lv<32> FCMac::ap_const_lv32_1 = "1";
const sc_lv<32> FCMac::ap_const_lv32_3 = "11";
const sc_lv<32> FCMac::ap_const_lv32_4 = "100";
const sc_lv<32> FCMac::ap_const_lv32_6 = "110";
const sc_lv<6> FCMac::ap_const_lv6_0 = "000000";
const sc_lv<1> FCMac::ap_const_lv1_1 = "1";
const sc_lv<9> FCMac::ap_const_lv9_0 = "000000000";
const sc_lv<32> FCMac::ap_const_lv32_5 = "101";
const sc_lv<6> FCMac::ap_const_lv6_28 = "101000";
const sc_lv<6> FCMac::ap_const_lv6_1 = "1";
const sc_lv<8> FCMac::ap_const_lv8_5E = "1011110";
const sc_lv<8> FCMac::ap_const_lv8_E5 = "11100101";
const sc_lv<8> FCMac::ap_const_lv8_35 = "110101";
const sc_lv<8> FCMac::ap_const_lv8_E1 = "11100001";
const sc_lv<8> FCMac::ap_const_lv8_4C = "1001100";
const sc_lv<8> FCMac::ap_const_lv8_22 = "100010";
const sc_lv<8> FCMac::ap_const_lv8_DE = "11011110";
const sc_lv<8> FCMac::ap_const_lv8_F2 = "11110010";
const sc_lv<8> FCMac::ap_const_lv8_87 = "10000111";
const sc_lv<8> FCMac::ap_const_lv8_F9 = "11111001";
const sc_lv<8> FCMac::ap_const_lv8_E3 = "11100011";
const sc_lv<8> FCMac::ap_const_lv8_F3 = "11110011";
const sc_lv<8> FCMac::ap_const_lv8_F7 = "11110111";
const sc_lv<8> FCMac::ap_const_lv8_2 = "10";
const sc_lv<8> FCMac::ap_const_lv8_E2 = "11100010";
const sc_lv<8> FCMac::ap_const_lv8_FD = "11111101";
const sc_lv<8> FCMac::ap_const_lv8_ED = "11101101";
const sc_lv<8> FCMac::ap_const_lv8_EE = "11101110";
const sc_lv<8> FCMac::ap_const_lv8_D9 = "11011001";
const sc_lv<8> FCMac::ap_const_lv8_EC = "11101100";
const sc_lv<8> FCMac::ap_const_lv8_FF = "11111111";
const sc_lv<8> FCMac::ap_const_lv8_37 = "110111";
const sc_lv<8> FCMac::ap_const_lv8_F5 = "11110101";
const sc_lv<8> FCMac::ap_const_lv8_DF = "11011111";
const sc_lv<8> FCMac::ap_const_lv8_F8 = "11111000";
const sc_lv<8> FCMac::ap_const_lv8_DA = "11011010";
const sc_lv<8> FCMac::ap_const_lv8_D4 = "11010100";
const sc_lv<8> FCMac::ap_const_lv8_65 = "1100101";
const sc_lv<8> FCMac::ap_const_lv8_D5 = "11010101";
const sc_lv<8> FCMac::ap_const_lv8_DB = "11011011";
const sc_lv<8> FCMac::ap_const_lv8_28 = "101000";
const sc_lv<8> FCMac::ap_const_lv8_17 = "10111";
const sc_lv<8> FCMac::ap_const_lv8_FC = "11111100";
const sc_lv<8> FCMac::ap_const_lv8_38 = "111000";
const sc_lv<9> FCMac::ap_const_lv9_100 = "100000000";
const sc_lv<9> FCMac::ap_const_lv9_1 = "1";
const sc_lv<8> FCMac::ap_const_lv8_0 = "00000000";
const sc_lv<32> FCMac::ap_const_lv32_D = "1101";
const bool FCMac::ap_const_boolean_1 = true;

FCMac::FCMac(sc_module_name name) : sc_module(name), mVcdFile(0) {
    weights27_m_weights_s_U = new FCMac_weights27_mbkb("weights27_m_weights_s_U");
    weights27_m_weights_s_U->clk(ap_clk);
    weights27_m_weights_s_U->reset(ap_rst);
    weights27_m_weights_s_U->address0(weights27_m_weights_s_address0);
    weights27_m_weights_s_U->ce0(weights27_m_weights_s_ce0);
    weights27_m_weights_s_U->q0(weights27_m_weights_s_q0);
    macRegisters_0_V_U = new FCMac_macRegistercud("macRegisters_0_V_U");
    macRegisters_0_V_U->clk(ap_clk);
    macRegisters_0_V_U->reset(ap_rst);
    macRegisters_0_V_U->address0(macRegisters_0_V_address0);
    macRegisters_0_V_U->ce0(macRegisters_0_V_ce0);
    macRegisters_0_V_U->we0(macRegisters_0_V_we0);
    macRegisters_0_V_U->d0(macRegisters_0_V_d0);
    macRegisters_0_V_U->q0(macRegisters_0_V_q0);
    FCL1_mux_646_8_1_1_U3 = new FCL1_mux_646_8_1_1<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>("FCL1_mux_646_8_1_1_U3");
    FCL1_mux_646_8_1_1_U3->din0(ap_var_for_const0);
    FCL1_mux_646_8_1_1_U3->din1(ap_var_for_const1);
    FCL1_mux_646_8_1_1_U3->din2(ap_var_for_const2);
    FCL1_mux_646_8_1_1_U3->din3(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din4(ap_var_for_const4);
    FCL1_mux_646_8_1_1_U3->din5(ap_var_for_const5);
    FCL1_mux_646_8_1_1_U3->din6(ap_var_for_const6);
    FCL1_mux_646_8_1_1_U3->din7(ap_var_for_const7);
    FCL1_mux_646_8_1_1_U3->din8(ap_var_for_const8);
    FCL1_mux_646_8_1_1_U3->din9(ap_var_for_const9);
    FCL1_mux_646_8_1_1_U3->din10(ap_var_for_const10);
    FCL1_mux_646_8_1_1_U3->din11(ap_var_for_const11);
    FCL1_mux_646_8_1_1_U3->din12(ap_var_for_const12);
    FCL1_mux_646_8_1_1_U3->din13(ap_var_for_const1);
    FCL1_mux_646_8_1_1_U3->din14(ap_var_for_const13);
    FCL1_mux_646_8_1_1_U3->din15(ap_var_for_const14);
    FCL1_mux_646_8_1_1_U3->din16(ap_var_for_const15);
    FCL1_mux_646_8_1_1_U3->din17(ap_var_for_const16);
    FCL1_mux_646_8_1_1_U3->din18(ap_var_for_const17);
    FCL1_mux_646_8_1_1_U3->din19(ap_var_for_const18);
    FCL1_mux_646_8_1_1_U3->din20(ap_var_for_const19);
    FCL1_mux_646_8_1_1_U3->din21(ap_var_for_const20);
    FCL1_mux_646_8_1_1_U3->din22(ap_var_for_const21);
    FCL1_mux_646_8_1_1_U3->din23(ap_var_for_const22);
    FCL1_mux_646_8_1_1_U3->din24(ap_var_for_const23);
    FCL1_mux_646_8_1_1_U3->din25(ap_var_for_const16);
    FCL1_mux_646_8_1_1_U3->din26(ap_var_for_const24);
    FCL1_mux_646_8_1_1_U3->din27(ap_var_for_const25);
    FCL1_mux_646_8_1_1_U3->din28(ap_var_for_const6);
    FCL1_mux_646_8_1_1_U3->din29(ap_var_for_const26);
    FCL1_mux_646_8_1_1_U3->din30(ap_var_for_const27);
    FCL1_mux_646_8_1_1_U3->din31(ap_var_for_const28);
    FCL1_mux_646_8_1_1_U3->din32(ap_var_for_const29);
    FCL1_mux_646_8_1_1_U3->din33(ap_var_for_const30);
    FCL1_mux_646_8_1_1_U3->din34(ap_var_for_const10);
    FCL1_mux_646_8_1_1_U3->din35(ap_var_for_const31);
    FCL1_mux_646_8_1_1_U3->din36(ap_var_for_const32);
    FCL1_mux_646_8_1_1_U3->din37(ap_var_for_const33);
    FCL1_mux_646_8_1_1_U3->din38(ap_var_for_const16);
    FCL1_mux_646_8_1_1_U3->din39(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din40(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din41(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din42(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din43(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din44(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din45(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din46(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din47(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din48(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din49(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din50(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din51(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din52(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din53(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din54(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din55(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din56(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din57(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din58(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din59(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din60(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din61(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din62(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din63(ap_var_for_const3);
    FCL1_mux_646_8_1_1_U3->din64(ne_reg_235);
    FCL1_mux_646_8_1_1_U3->dout(temp_bias_V_fu_297_p66);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_OP1_V_cast_cast_fu_448_p1);
    sensitive << ( in_V_V_dout );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( tmp_s_fu_436_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_fu_581_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_436_p2 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_436_p2 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_fu_581_p2 );

    SC_METHOD(thread_macRegisters_0_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( macRegisters_0_V_ad_1_reg_637 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_292_p1 );
    sensitive << ( tmp_4_fu_482_p1 );
    sensitive << ( tmp_3_fu_593_p1 );

    SC_METHOD(thread_macRegisters_0_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_macRegisters_0_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( temp_bias_V_fu_297_p66 );
    sensitive << ( p_Val2_6_fu_574_p2 );

    SC_METHOD(thread_macRegisters_0_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_280_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ne_1_fu_286_p2);
    sensitive << ( ne_reg_235 );

    SC_METHOD(thread_ne_2_fu_587_p2);
    sensitive << ( ne6_reg_269 );

    SC_METHOD(thread_ne_3_fu_458_p2);
    sensitive << ( ne4_reg_257 );

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( macRegisters_0_V_q0 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_p_Val2_2_fu_562_p1);
    sensitive << ( tmp_15_reg_642 );

    SC_METHOD(thread_p_Val2_6_fu_574_p2);
    sensitive << ( macRegisters_0_V_q0 );
    sensitive << ( tmp1_fu_568_p2 );

    SC_METHOD(thread_p_Val2_s_fu_491_p0);
    sensitive << ( OP1_V_cast_cast_reg_619 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_Val2_s_fu_491_p1);
    sensitive << ( weights27_m_weights_s_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_Val2_s_fu_491_p2);
    sensitive << ( p_Val2_s_fu_491_p0 );
    sensitive << ( p_Val2_s_fu_491_p1 );

    SC_METHOD(thread_qb_assign_1_fu_556_p2);
    sensitive << ( tmp_11_fu_550_p2 );
    sensitive << ( qbit_fu_514_p3 );

    SC_METHOD(thread_qbit_fu_514_p3);
    sensitive << ( p_Val2_s_fu_491_p2 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_sy_1_fu_442_p2);
    sensitive << ( sy_reg_246 );

    SC_METHOD(thread_sy_cast_fu_432_p1);
    sensitive << ( sy_reg_246 );

    SC_METHOD(thread_tmp1_fu_568_p2);
    sensitive << ( p_Val2_2_fu_562_p1 );
    sensitive << ( tmp_14_fu_565_p1 );

    SC_METHOD(thread_tmp_11_fu_550_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_fu_542_p3 );

    SC_METHOD(thread_tmp_14_fu_565_p1);
    sensitive << ( qb_assign_1_reg_647 );

    SC_METHOD(thread_tmp_16_fu_496_p3);
    sensitive << ( p_Val2_s_fu_491_p2 );

    SC_METHOD(thread_tmp_17_fu_526_p2);
    sensitive << ( tmp_21_fu_522_p1 );
    sensitive << ( tmp_16_fu_496_p3 );

    SC_METHOD(thread_tmp_18_fu_532_p4);
    sensitive << ( p_Val2_s_fu_491_p2 );

    SC_METHOD(thread_tmp_19_fu_542_p3);
    sensitive << ( tmp_18_fu_532_p4 );
    sensitive << ( tmp_17_fu_526_p2 );

    SC_METHOD(thread_tmp_1_fu_581_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ne6_reg_269 );

    SC_METHOD(thread_tmp_21_fu_522_p1);
    sensitive << ( p_Val2_s_fu_491_p2 );

    SC_METHOD(thread_tmp_2_fu_452_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ne4_reg_257 );

    SC_METHOD(thread_tmp_3_fu_593_p1);
    sensitive << ( ne6_reg_269 );

    SC_METHOD(thread_tmp_4_fu_482_p1);
    sensitive << ( ne4_reg_257 );

    SC_METHOD(thread_tmp_5_fu_464_p3);
    sensitive << ( ne4_reg_257 );

    SC_METHOD(thread_tmp_6_fu_472_p2);
    sensitive << ( sy_cast_reg_606 );
    sensitive << ( tmp_5_fu_464_p3 );

    SC_METHOD(thread_tmp_7_fu_477_p1);
    sensitive << ( tmp_6_fu_472_p2 );

    SC_METHOD(thread_tmp_9_fu_292_p1);
    sensitive << ( ne_reg_235 );

    SC_METHOD(thread_tmp_fu_280_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ne_reg_235 );

    SC_METHOD(thread_tmp_s_fu_436_p2);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_436_p2 );
    sensitive << ( sy_reg_246 );

    SC_METHOD(thread_weights27_m_weights_s_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_477_p1 );

    SC_METHOD(thread_weights27_m_weights_s_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_V_empty_n );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_436_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_fu_452_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_1_fu_581_p2 );
    sensitive << ( tmp_fu_280_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const10);

    SC_THREAD(thread_ap_var_for_const11);

    SC_THREAD(thread_ap_var_for_const12);

    SC_THREAD(thread_ap_var_for_const13);

    SC_THREAD(thread_ap_var_for_const14);

    SC_THREAD(thread_ap_var_for_const15);

    SC_THREAD(thread_ap_var_for_const16);

    SC_THREAD(thread_ap_var_for_const17);

    SC_THREAD(thread_ap_var_for_const18);

    SC_THREAD(thread_ap_var_for_const19);

    SC_THREAD(thread_ap_var_for_const20);

    SC_THREAD(thread_ap_var_for_const21);

    SC_THREAD(thread_ap_var_for_const22);

    SC_THREAD(thread_ap_var_for_const23);

    SC_THREAD(thread_ap_var_for_const24);

    SC_THREAD(thread_ap_var_for_const25);

    SC_THREAD(thread_ap_var_for_const26);

    SC_THREAD(thread_ap_var_for_const27);

    SC_THREAD(thread_ap_var_for_const28);

    SC_THREAD(thread_ap_var_for_const29);

    SC_THREAD(thread_ap_var_for_const30);

    SC_THREAD(thread_ap_var_for_const31);

    SC_THREAD(thread_ap_var_for_const32);

    SC_THREAD(thread_ap_var_for_const33);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FCMac_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, weights27_m_weights_s_address0, "weights27_m_weights_s_address0");
    sc_trace(mVcdFile, weights27_m_weights_s_ce0, "weights27_m_weights_s_ce0");
    sc_trace(mVcdFile, weights27_m_weights_s_q0, "weights27_m_weights_s_q0");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_s_fu_436_p2, "tmp_s_fu_436_p2");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ne_1_fu_286_p2, "ne_1_fu_286_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sy_cast_fu_432_p1, "sy_cast_fu_432_p1");
    sc_trace(mVcdFile, sy_cast_reg_606, "sy_cast_reg_606");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, sy_1_fu_442_p2, "sy_1_fu_442_p2");
    sc_trace(mVcdFile, sy_1_reg_614, "sy_1_reg_614");
    sc_trace(mVcdFile, OP1_V_cast_cast_fu_448_p1, "OP1_V_cast_cast_fu_448_p1");
    sc_trace(mVcdFile, OP1_V_cast_cast_reg_619, "OP1_V_cast_cast_reg_619");
    sc_trace(mVcdFile, ne_3_fu_458_p2, "ne_3_fu_458_p2");
    sc_trace(mVcdFile, ne_3_reg_627, "ne_3_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_2_fu_452_p2, "tmp_2_fu_452_p2");
    sc_trace(mVcdFile, macRegisters_0_V_ad_1_reg_637, "macRegisters_0_V_ad_1_reg_637");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_15_reg_642, "tmp_15_reg_642");
    sc_trace(mVcdFile, qb_assign_1_fu_556_p2, "qb_assign_1_fu_556_p2");
    sc_trace(mVcdFile, qb_assign_1_reg_647, "qb_assign_1_reg_647");
    sc_trace(mVcdFile, ne_2_fu_587_p2, "ne_2_fu_587_p2");
    sc_trace(mVcdFile, ne_2_reg_655, "ne_2_reg_655");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_1_fu_581_p2, "tmp_1_fu_581_p2");
    sc_trace(mVcdFile, macRegisters_0_V_address0, "macRegisters_0_V_address0");
    sc_trace(mVcdFile, macRegisters_0_V_ce0, "macRegisters_0_V_ce0");
    sc_trace(mVcdFile, macRegisters_0_V_we0, "macRegisters_0_V_we0");
    sc_trace(mVcdFile, macRegisters_0_V_d0, "macRegisters_0_V_d0");
    sc_trace(mVcdFile, macRegisters_0_V_q0, "macRegisters_0_V_q0");
    sc_trace(mVcdFile, ne_reg_235, "ne_reg_235");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_fu_280_p2, "tmp_fu_280_p2");
    sc_trace(mVcdFile, sy_reg_246, "sy_reg_246");
    sc_trace(mVcdFile, ne4_reg_257, "ne4_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ne6_reg_269, "ne6_reg_269");
    sc_trace(mVcdFile, tmp_9_fu_292_p1, "tmp_9_fu_292_p1");
    sc_trace(mVcdFile, tmp_7_fu_477_p1, "tmp_7_fu_477_p1");
    sc_trace(mVcdFile, tmp_4_fu_482_p1, "tmp_4_fu_482_p1");
    sc_trace(mVcdFile, tmp_3_fu_593_p1, "tmp_3_fu_593_p1");
    sc_trace(mVcdFile, temp_bias_V_fu_297_p66, "temp_bias_V_fu_297_p66");
    sc_trace(mVcdFile, p_Val2_6_fu_574_p2, "p_Val2_6_fu_574_p2");
    sc_trace(mVcdFile, tmp_5_fu_464_p3, "tmp_5_fu_464_p3");
    sc_trace(mVcdFile, tmp_6_fu_472_p2, "tmp_6_fu_472_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_491_p0, "p_Val2_s_fu_491_p0");
    sc_trace(mVcdFile, p_Val2_s_fu_491_p1, "p_Val2_s_fu_491_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_491_p2, "p_Val2_s_fu_491_p2");
    sc_trace(mVcdFile, tmp_21_fu_522_p1, "tmp_21_fu_522_p1");
    sc_trace(mVcdFile, tmp_16_fu_496_p3, "tmp_16_fu_496_p3");
    sc_trace(mVcdFile, tmp_18_fu_532_p4, "tmp_18_fu_532_p4");
    sc_trace(mVcdFile, tmp_17_fu_526_p2, "tmp_17_fu_526_p2");
    sc_trace(mVcdFile, tmp_19_fu_542_p3, "tmp_19_fu_542_p3");
    sc_trace(mVcdFile, tmp_11_fu_550_p2, "tmp_11_fu_550_p2");
    sc_trace(mVcdFile, qbit_fu_514_p3, "qbit_fu_514_p3");
    sc_trace(mVcdFile, p_Val2_2_fu_562_p1, "p_Val2_2_fu_562_p1");
    sc_trace(mVcdFile, tmp_14_fu_565_p1, "tmp_14_fu_565_p1");
    sc_trace(mVcdFile, tmp1_fu_568_p2, "tmp1_fu_568_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

FCMac::~FCMac() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete weights27_m_weights_s_U;
    delete macRegisters_0_V_U;
    delete FCL1_mux_646_8_1_1_U3;
}

void FCMac::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv8_5E;
}

void FCMac::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv8_E5;
}

void FCMac::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv8_35;
}

void FCMac::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv8_E1;
}

void FCMac::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv8_4C;
}

void FCMac::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv8_22;
}

void FCMac::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv8_DE;
}

void FCMac::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv8_F2;
}

void FCMac::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_87;
}

void FCMac::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv8_F9;
}

void FCMac::thread_ap_var_for_const10() {
    ap_var_for_const10 = ap_const_lv8_E3;
}

void FCMac::thread_ap_var_for_const11() {
    ap_var_for_const11 = ap_const_lv8_F3;
}

void FCMac::thread_ap_var_for_const12() {
    ap_var_for_const12 = ap_const_lv8_F7;
}

void FCMac::thread_ap_var_for_const13() {
    ap_var_for_const13 = ap_const_lv8_2;
}

void FCMac::thread_ap_var_for_const14() {
    ap_var_for_const14 = ap_const_lv8_E2;
}

void FCMac::thread_ap_var_for_const15() {
    ap_var_for_const15 = ap_const_lv8_FD;
}

void FCMac::thread_ap_var_for_const16() {
    ap_var_for_const16 = ap_const_lv8_ED;
}

void FCMac::thread_ap_var_for_const17() {
    ap_var_for_const17 = ap_const_lv8_EE;
}

void FCMac::thread_ap_var_for_const18() {
    ap_var_for_const18 = ap_const_lv8_D9;
}

void FCMac::thread_ap_var_for_const19() {
    ap_var_for_const19 = ap_const_lv8_EC;
}

void FCMac::thread_ap_var_for_const20() {
    ap_var_for_const20 = ap_const_lv8_FF;
}

void FCMac::thread_ap_var_for_const21() {
    ap_var_for_const21 = ap_const_lv8_37;
}

void FCMac::thread_ap_var_for_const22() {
    ap_var_for_const22 = ap_const_lv8_F5;
}

void FCMac::thread_ap_var_for_const23() {
    ap_var_for_const23 = ap_const_lv8_DF;
}

void FCMac::thread_ap_var_for_const24() {
    ap_var_for_const24 = ap_const_lv8_F8;
}

void FCMac::thread_ap_var_for_const25() {
    ap_var_for_const25 = ap_const_lv8_DA;
}

void FCMac::thread_ap_var_for_const26() {
    ap_var_for_const26 = ap_const_lv8_D4;
}

void FCMac::thread_ap_var_for_const27() {
    ap_var_for_const27 = ap_const_lv8_65;
}

void FCMac::thread_ap_var_for_const28() {
    ap_var_for_const28 = ap_const_lv8_D5;
}

void FCMac::thread_ap_var_for_const29() {
    ap_var_for_const29 = ap_const_lv8_DB;
}

void FCMac::thread_ap_var_for_const30() {
    ap_var_for_const30 = ap_const_lv8_28;
}

void FCMac::thread_ap_var_for_const31() {
    ap_var_for_const31 = ap_const_lv8_17;
}

void FCMac::thread_ap_var_for_const32() {
    ap_var_for_const32 = ap_const_lv8_FC;
}

void FCMac::thread_ap_var_for_const33() {
    ap_var_for_const33 = ap_const_lv8_38;
}

void FCMac::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    esl_seteq<1,1,1>(tmp_1_fu_581_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ne4_reg_257 = ne_3_reg_627.read();
    } else if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && 
                esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ne4_reg_257 = ap_const_lv6_0;
    }
    if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ne6_reg_269 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(out_V_V_full_n.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ne6_reg_269 = ne_2_reg_655.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_280_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ne_reg_235 = ne_1_fu_286_p2.read();
    } else if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ne_reg_235 = ap_const_lv6_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_280_p2.read(), ap_const_lv1_1))) {
        sy_reg_246 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_452_p2.read(), ap_const_lv1_1))) {
        sy_reg_246 = sy_1_reg_614.read();
    }
    if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        OP1_V_cast_cast_reg_619 = OP1_V_cast_cast_fu_448_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        macRegisters_0_V_ad_1_reg_637 =  (sc_lv<6>) (tmp_4_fu_482_p1.read());
        qb_assign_1_reg_647 = qb_assign_1_fu_556_p2.read();
        tmp_15_reg_642 = p_Val2_s_fu_491_p2.read().range(13, 7);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ne_2_reg_655 = ne_2_fu_587_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ne_3_reg_627 = ne_3_fu_458_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)))) {
        sy_1_reg_614 = sy_1_fu_442_p2.read();
        sy_cast_reg_606 = sy_cast_fu_432_p1.read();
    }
}

void FCMac::thread_OP1_V_cast_cast_fu_448_p1() {
    OP1_V_cast_cast_fu_448_p1 = esl_sext<14,8>(in_V_V_dout.read());
}

void FCMac::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void FCMac::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void FCMac::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void FCMac::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void FCMac::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void FCMac::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void FCMac::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void FCMac::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void FCMac::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void FCMac::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0));
}

void FCMac::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_581_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void FCMac::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void FCMac::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void FCMac::thread_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void FCMac::thread_in_V_V_read() {
    if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void FCMac::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_581_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void FCMac::thread_macRegisters_0_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        macRegisters_0_V_address0 =  (sc_lv<6>) (tmp_3_fu_593_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        macRegisters_0_V_address0 = macRegisters_0_V_ad_1_reg_637.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        macRegisters_0_V_address0 =  (sc_lv<6>) (tmp_4_fu_482_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        macRegisters_0_V_address0 =  (sc_lv<6>) (tmp_9_fu_292_p1.read());
    } else {
        macRegisters_0_V_address0 = "XXXXXX";
    }
}

void FCMac::thread_macRegisters_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        macRegisters_0_V_ce0 = ap_const_logic_1;
    } else {
        macRegisters_0_V_ce0 = ap_const_logic_0;
    }
}

void FCMac::thread_macRegisters_0_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        macRegisters_0_V_d0 = p_Val2_6_fu_574_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        macRegisters_0_V_d0 = temp_bias_V_fu_297_p66.read();
    } else {
        macRegisters_0_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void FCMac::thread_macRegisters_0_V_we0() {
    if (((esl_seteq<1,1,1>(tmp_fu_280_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        macRegisters_0_V_we0 = ap_const_logic_1;
    } else {
        macRegisters_0_V_we0 = ap_const_logic_0;
    }
}

void FCMac::thread_ne_1_fu_286_p2() {
    ne_1_fu_286_p2 = (!ne_reg_235.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ne_reg_235.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void FCMac::thread_ne_2_fu_587_p2() {
    ne_2_fu_587_p2 = (!ne6_reg_269.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ne6_reg_269.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void FCMac::thread_ne_3_fu_458_p2() {
    ne_3_fu_458_p2 = (!ne4_reg_257.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ne4_reg_257.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void FCMac::thread_out_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void FCMac::thread_out_V_V_din() {
    out_V_V_din = macRegisters_0_V_q0.read();
}

void FCMac::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(out_V_V_full_n.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void FCMac::thread_p_Val2_2_fu_562_p1() {
    p_Val2_2_fu_562_p1 = esl_sext<8,7>(tmp_15_reg_642.read());
}

void FCMac::thread_p_Val2_6_fu_574_p2() {
    p_Val2_6_fu_574_p2 = (!tmp1_fu_568_p2.read().is_01() || !macRegisters_0_V_q0.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp1_fu_568_p2.read()) + sc_biguint<8>(macRegisters_0_V_q0.read()));
}

void FCMac::thread_p_Val2_s_fu_491_p0() {
    p_Val2_s_fu_491_p0 =  (sc_lv<8>) (OP1_V_cast_cast_reg_619.read());
}

void FCMac::thread_p_Val2_s_fu_491_p1() {
    p_Val2_s_fu_491_p1 = weights27_m_weights_s_q0.read();
}

void FCMac::thread_p_Val2_s_fu_491_p2() {
    p_Val2_s_fu_491_p2 = (!p_Val2_s_fu_491_p0.read().is_01() || !p_Val2_s_fu_491_p1.read().is_01())? sc_lv<14>(): sc_bigint<8>(p_Val2_s_fu_491_p0.read()) * sc_bigint<6>(p_Val2_s_fu_491_p1.read());
}

void FCMac::thread_qb_assign_1_fu_556_p2() {
    qb_assign_1_fu_556_p2 = (tmp_11_fu_550_p2.read() & qbit_fu_514_p3.read());
}

void FCMac::thread_qbit_fu_514_p3() {
    qbit_fu_514_p3 = p_Val2_s_fu_491_p2.read().range(6, 6);
}

void FCMac::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void FCMac::thread_start_out() {
    start_out = real_start.read();
}

void FCMac::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void FCMac::thread_sy_1_fu_442_p2() {
    sy_1_fu_442_p2 = (!sy_reg_246.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(sy_reg_246.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void FCMac::thread_sy_cast_fu_432_p1() {
    sy_cast_fu_432_p1 = esl_zext<14,9>(sy_reg_246.read());
}

void FCMac::thread_tmp1_fu_568_p2() {
    tmp1_fu_568_p2 = (!p_Val2_2_fu_562_p1.read().is_01() || !tmp_14_fu_565_p1.read().is_01())? sc_lv<8>(): (sc_bigint<8>(p_Val2_2_fu_562_p1.read()) + sc_biguint<8>(tmp_14_fu_565_p1.read()));
}

void FCMac::thread_tmp_11_fu_550_p2() {
    tmp_11_fu_550_p2 = (!tmp_19_fu_542_p3.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_19_fu_542_p3.read() != ap_const_lv6_0);
}

void FCMac::thread_tmp_14_fu_565_p1() {
    tmp_14_fu_565_p1 = esl_zext<8,1>(qb_assign_1_reg_647.read());
}

void FCMac::thread_tmp_16_fu_496_p3() {
    tmp_16_fu_496_p3 = p_Val2_s_fu_491_p2.read().range(13, 13);
}

void FCMac::thread_tmp_17_fu_526_p2() {
    tmp_17_fu_526_p2 = (tmp_21_fu_522_p1.read() | tmp_16_fu_496_p3.read());
}

void FCMac::thread_tmp_18_fu_532_p4() {
    tmp_18_fu_532_p4 = p_Val2_s_fu_491_p2.read().range(5, 1);
}

void FCMac::thread_tmp_19_fu_542_p3() {
    tmp_19_fu_542_p3 = esl_concat<5,1>(tmp_18_fu_532_p4.read(), tmp_17_fu_526_p2.read());
}

void FCMac::thread_tmp_1_fu_581_p2() {
    tmp_1_fu_581_p2 = (!ne6_reg_269.read().is_01() || !ap_const_lv6_28.is_01())? sc_lv<1>(): sc_lv<1>(ne6_reg_269.read() == ap_const_lv6_28);
}

void FCMac::thread_tmp_21_fu_522_p1() {
    tmp_21_fu_522_p1 = p_Val2_s_fu_491_p2.read().range(1-1, 0);
}

void FCMac::thread_tmp_2_fu_452_p2() {
    tmp_2_fu_452_p2 = (!ne4_reg_257.read().is_01() || !ap_const_lv6_28.is_01())? sc_lv<1>(): sc_lv<1>(ne4_reg_257.read() == ap_const_lv6_28);
}

void FCMac::thread_tmp_3_fu_593_p1() {
    tmp_3_fu_593_p1 = esl_zext<64,6>(ne6_reg_269.read());
}

void FCMac::thread_tmp_4_fu_482_p1() {
    tmp_4_fu_482_p1 = esl_zext<64,6>(ne4_reg_257.read());
}

void FCMac::thread_tmp_5_fu_464_p3() {
    tmp_5_fu_464_p3 = esl_concat<6,8>(ne4_reg_257.read(), ap_const_lv8_0);
}

void FCMac::thread_tmp_6_fu_472_p2() {
    tmp_6_fu_472_p2 = (!tmp_5_fu_464_p3.read().is_01() || !sy_cast_reg_606.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_5_fu_464_p3.read()) + sc_biguint<14>(sy_cast_reg_606.read()));
}

void FCMac::thread_tmp_7_fu_477_p1() {
    tmp_7_fu_477_p1 = esl_zext<64,14>(tmp_6_fu_472_p2.read());
}

void FCMac::thread_tmp_9_fu_292_p1() {
    tmp_9_fu_292_p1 = esl_zext<64,6>(ne_reg_235.read());
}

void FCMac::thread_tmp_fu_280_p2() {
    tmp_fu_280_p2 = (!ne_reg_235.read().is_01() || !ap_const_lv6_28.is_01())? sc_lv<1>(): sc_lv<1>(ne_reg_235.read() == ap_const_lv6_28);
}

void FCMac::thread_tmp_s_fu_436_p2() {
    tmp_s_fu_436_p2 = (!sy_reg_246.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(sy_reg_246.read() == ap_const_lv9_100);
}

void FCMac::thread_weights27_m_weights_s_address0() {
    weights27_m_weights_s_address0 =  (sc_lv<14>) (tmp_7_fu_477_p1.read());
}

void FCMac::thread_weights27_m_weights_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        weights27_m_weights_s_ce0 = ap_const_logic_1;
    } else {
        weights27_m_weights_s_ce0 = ap_const_logic_0;
    }
}

void FCMac::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_280_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((!(esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(tmp_s_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_2_fu_452_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(tmp_1_fu_581_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(out_V_V_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

}

