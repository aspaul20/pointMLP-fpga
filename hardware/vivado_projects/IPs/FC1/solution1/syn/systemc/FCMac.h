// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _FCMac_HH_
#define _FCMac_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "FCL1_mux_646_8_1_1.h"
#include "FCMac_weights27_mbkb.h"
#include "FCMac_macRegistercud.h"

namespace ap_rtl {

struct FCMac : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<8> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const2;
    sc_signal< sc_lv<8> > ap_var_for_const3;
    sc_signal< sc_lv<8> > ap_var_for_const4;
    sc_signal< sc_lv<8> > ap_var_for_const5;
    sc_signal< sc_lv<8> > ap_var_for_const6;
    sc_signal< sc_lv<8> > ap_var_for_const7;
    sc_signal< sc_lv<8> > ap_var_for_const8;
    sc_signal< sc_lv<8> > ap_var_for_const9;
    sc_signal< sc_lv<8> > ap_var_for_const10;
    sc_signal< sc_lv<8> > ap_var_for_const11;
    sc_signal< sc_lv<8> > ap_var_for_const12;
    sc_signal< sc_lv<8> > ap_var_for_const13;
    sc_signal< sc_lv<8> > ap_var_for_const14;
    sc_signal< sc_lv<8> > ap_var_for_const15;
    sc_signal< sc_lv<8> > ap_var_for_const16;
    sc_signal< sc_lv<8> > ap_var_for_const17;
    sc_signal< sc_lv<8> > ap_var_for_const18;
    sc_signal< sc_lv<8> > ap_var_for_const19;
    sc_signal< sc_lv<8> > ap_var_for_const20;
    sc_signal< sc_lv<8> > ap_var_for_const21;
    sc_signal< sc_lv<8> > ap_var_for_const22;
    sc_signal< sc_lv<8> > ap_var_for_const23;
    sc_signal< sc_lv<8> > ap_var_for_const24;
    sc_signal< sc_lv<8> > ap_var_for_const25;
    sc_signal< sc_lv<8> > ap_var_for_const26;
    sc_signal< sc_lv<8> > ap_var_for_const27;
    sc_signal< sc_lv<8> > ap_var_for_const28;
    sc_signal< sc_lv<8> > ap_var_for_const29;
    sc_signal< sc_lv<8> > ap_var_for_const30;
    sc_signal< sc_lv<8> > ap_var_for_const31;
    sc_signal< sc_lv<8> > ap_var_for_const32;
    sc_signal< sc_lv<8> > ap_var_for_const33;


    // Module declarations
    FCMac(sc_module_name name);
    SC_HAS_PROCESS(FCMac);

    ~FCMac();

    sc_trace_file* mVcdFile;

    FCMac_weights27_mbkb* weights27_m_weights_s_U;
    FCMac_macRegistercud* macRegisters_0_V_U;
    FCL1_mux_646_8_1_1<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* FCL1_mux_646_8_1_1_U3;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<14> > weights27_m_weights_s_address0;
    sc_signal< sc_logic > weights27_m_weights_s_ce0;
    sc_signal< sc_lv<6> > weights27_m_weights_s_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_s_fu_436_p2;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<6> > ne_1_fu_286_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<14> > sy_cast_fu_432_p1;
    sc_signal< sc_lv<14> > sy_cast_reg_606;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<9> > sy_1_fu_442_p2;
    sc_signal< sc_lv<9> > sy_1_reg_614;
    sc_signal< sc_lv<14> > OP1_V_cast_cast_fu_448_p1;
    sc_signal< sc_lv<14> > OP1_V_cast_cast_reg_619;
    sc_signal< sc_lv<6> > ne_3_fu_458_p2;
    sc_signal< sc_lv<6> > ne_3_reg_627;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_2_fu_452_p2;
    sc_signal< sc_lv<6> > macRegisters_0_V_ad_1_reg_637;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > tmp_15_reg_642;
    sc_signal< sc_lv<1> > qb_assign_1_fu_556_p2;
    sc_signal< sc_lv<1> > qb_assign_1_reg_647;
    sc_signal< sc_lv<6> > ne_2_fu_587_p2;
    sc_signal< sc_lv<6> > ne_2_reg_655;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > tmp_1_fu_581_p2;
    sc_signal< sc_lv<6> > macRegisters_0_V_address0;
    sc_signal< sc_logic > macRegisters_0_V_ce0;
    sc_signal< sc_logic > macRegisters_0_V_we0;
    sc_signal< sc_lv<8> > macRegisters_0_V_d0;
    sc_signal< sc_lv<8> > macRegisters_0_V_q0;
    sc_signal< sc_lv<6> > ne_reg_235;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_fu_280_p2;
    sc_signal< sc_lv<9> > sy_reg_246;
    sc_signal< sc_lv<6> > ne4_reg_257;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ne6_reg_269;
    sc_signal< sc_lv<64> > tmp_9_fu_292_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_477_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_482_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_593_p1;
    sc_signal< sc_lv<8> > temp_bias_V_fu_297_p66;
    sc_signal< sc_lv<8> > p_Val2_6_fu_574_p2;
    sc_signal< sc_lv<14> > tmp_5_fu_464_p3;
    sc_signal< sc_lv<14> > tmp_6_fu_472_p2;
    sc_signal< sc_lv<8> > p_Val2_s_fu_491_p0;
    sc_signal< sc_lv<6> > p_Val2_s_fu_491_p1;
    sc_signal< sc_lv<14> > p_Val2_s_fu_491_p2;
    sc_signal< sc_lv<1> > tmp_21_fu_522_p1;
    sc_signal< sc_lv<1> > tmp_16_fu_496_p3;
    sc_signal< sc_lv<5> > tmp_18_fu_532_p4;
    sc_signal< sc_lv<1> > tmp_17_fu_526_p2;
    sc_signal< sc_lv<6> > tmp_19_fu_542_p3;
    sc_signal< sc_lv<1> > tmp_11_fu_550_p2;
    sc_signal< sc_lv<1> > qbit_fu_514_p3;
    sc_signal< sc_lv<8> > p_Val2_2_fu_562_p1;
    sc_signal< sc_lv<8> > tmp_14_fu_565_p1;
    sc_signal< sc_lv<8> > tmp1_fu_568_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<6> ap_const_lv6_28;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_5E;
    static const sc_lv<8> ap_const_lv8_E5;
    static const sc_lv<8> ap_const_lv8_35;
    static const sc_lv<8> ap_const_lv8_E1;
    static const sc_lv<8> ap_const_lv8_4C;
    static const sc_lv<8> ap_const_lv8_22;
    static const sc_lv<8> ap_const_lv8_DE;
    static const sc_lv<8> ap_const_lv8_F2;
    static const sc_lv<8> ap_const_lv8_87;
    static const sc_lv<8> ap_const_lv8_F9;
    static const sc_lv<8> ap_const_lv8_E3;
    static const sc_lv<8> ap_const_lv8_F3;
    static const sc_lv<8> ap_const_lv8_F7;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_E2;
    static const sc_lv<8> ap_const_lv8_FD;
    static const sc_lv<8> ap_const_lv8_ED;
    static const sc_lv<8> ap_const_lv8_EE;
    static const sc_lv<8> ap_const_lv8_D9;
    static const sc_lv<8> ap_const_lv8_EC;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_37;
    static const sc_lv<8> ap_const_lv8_F5;
    static const sc_lv<8> ap_const_lv8_DF;
    static const sc_lv<8> ap_const_lv8_F8;
    static const sc_lv<8> ap_const_lv8_DA;
    static const sc_lv<8> ap_const_lv8_D4;
    static const sc_lv<8> ap_const_lv8_65;
    static const sc_lv<8> ap_const_lv8_D5;
    static const sc_lv<8> ap_const_lv8_DB;
    static const sc_lv<8> ap_const_lv8_28;
    static const sc_lv<8> ap_const_lv8_17;
    static const sc_lv<8> ap_const_lv8_FC;
    static const sc_lv<8> ap_const_lv8_38;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_var_for_const9();
    void thread_ap_var_for_const10();
    void thread_ap_var_for_const11();
    void thread_ap_var_for_const12();
    void thread_ap_var_for_const13();
    void thread_ap_var_for_const14();
    void thread_ap_var_for_const15();
    void thread_ap_var_for_const16();
    void thread_ap_var_for_const17();
    void thread_ap_var_for_const18();
    void thread_ap_var_for_const19();
    void thread_ap_var_for_const20();
    void thread_ap_var_for_const21();
    void thread_ap_var_for_const22();
    void thread_ap_var_for_const23();
    void thread_ap_var_for_const24();
    void thread_ap_var_for_const25();
    void thread_ap_var_for_const26();
    void thread_ap_var_for_const27();
    void thread_ap_var_for_const28();
    void thread_ap_var_for_const29();
    void thread_ap_var_for_const30();
    void thread_ap_var_for_const31();
    void thread_ap_var_for_const32();
    void thread_ap_var_for_const33();
    void thread_ap_clk_no_reset_();
    void thread_OP1_V_cast_cast_fu_448_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_address0();
    void thread_macRegisters_0_V_ce0();
    void thread_macRegisters_0_V_d0();
    void thread_macRegisters_0_V_we0();
    void thread_ne_1_fu_286_p2();
    void thread_ne_2_fu_587_p2();
    void thread_ne_3_fu_458_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_Val2_2_fu_562_p1();
    void thread_p_Val2_6_fu_574_p2();
    void thread_p_Val2_s_fu_491_p0();
    void thread_p_Val2_s_fu_491_p1();
    void thread_p_Val2_s_fu_491_p2();
    void thread_qb_assign_1_fu_556_p2();
    void thread_qbit_fu_514_p3();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_sy_1_fu_442_p2();
    void thread_sy_cast_fu_432_p1();
    void thread_tmp1_fu_568_p2();
    void thread_tmp_11_fu_550_p2();
    void thread_tmp_14_fu_565_p1();
    void thread_tmp_16_fu_496_p3();
    void thread_tmp_17_fu_526_p2();
    void thread_tmp_18_fu_532_p4();
    void thread_tmp_19_fu_542_p3();
    void thread_tmp_1_fu_581_p2();
    void thread_tmp_21_fu_522_p1();
    void thread_tmp_2_fu_452_p2();
    void thread_tmp_3_fu_593_p1();
    void thread_tmp_4_fu_482_p1();
    void thread_tmp_5_fu_464_p3();
    void thread_tmp_6_fu_472_p2();
    void thread_tmp_7_fu_477_p1();
    void thread_tmp_9_fu_292_p1();
    void thread_tmp_fu_280_p2();
    void thread_tmp_s_fu_436_p2();
    void thread_weights27_m_weights_s_address0();
    void thread_weights27_m_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
