-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FCL1 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input1_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s4_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    input1_V_V_TVALID : IN STD_LOGIC;
    input1_V_V_TREADY : OUT STD_LOGIC;
    s4_out_V_V_TVALID : OUT STD_LOGIC;
    s4_out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of FCL1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FCL1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.368500,HLS_SYN_LAT=31356,HLS_SYN_TPT=31356,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=460,HLS_SYN_LUT=982,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ResizeStream_1_U0_ap_start : STD_LOGIC;
    signal ResizeStream_1_U0_ap_done : STD_LOGIC;
    signal ResizeStream_1_U0_ap_continue : STD_LOGIC;
    signal ResizeStream_1_U0_ap_idle : STD_LOGIC;
    signal ResizeStream_1_U0_ap_ready : STD_LOGIC;
    signal ResizeStream_1_U0_start_out : STD_LOGIC;
    signal ResizeStream_1_U0_start_write : STD_LOGIC;
    signal ResizeStream_1_U0_in_V_V_TREADY : STD_LOGIC;
    signal ResizeStream_1_U0_out_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ResizeStream_1_U0_out_V_V_write : STD_LOGIC;
    signal FCMac_U0_ap_start : STD_LOGIC;
    signal FCMac_U0_ap_done : STD_LOGIC;
    signal FCMac_U0_ap_continue : STD_LOGIC;
    signal FCMac_U0_ap_idle : STD_LOGIC;
    signal FCMac_U0_ap_ready : STD_LOGIC;
    signal FCMac_U0_start_out : STD_LOGIC;
    signal FCMac_U0_start_write : STD_LOGIC;
    signal FCMac_U0_in_V_V_read : STD_LOGIC;
    signal FCMac_U0_out_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal FCMac_U0_out_V_V_write : STD_LOGIC;
    signal ResizeStream_U0_ap_start : STD_LOGIC;
    signal ResizeStream_U0_ap_done : STD_LOGIC;
    signal ResizeStream_U0_ap_continue : STD_LOGIC;
    signal ResizeStream_U0_ap_idle : STD_LOGIC;
    signal ResizeStream_U0_ap_ready : STD_LOGIC;
    signal ResizeStream_U0_in_V_V_read : STD_LOGIC;
    signal ResizeStream_U0_out_V_V_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ResizeStream_U0_out_V_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal inn_V_V_full_n : STD_LOGIC;
    signal inn_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inn_V_V_empty_n : STD_LOGIC;
    signal outStr_V_V_full_n : STD_LOGIC;
    signal outStr_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal outStr_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_FCMac_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FCMac_U0_full_n : STD_LOGIC;
    signal start_for_FCMac_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FCMac_U0_empty_n : STD_LOGIC;
    signal start_for_ResizeStream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ResizeStream_U0_full_n : STD_LOGIC;
    signal start_for_ResizeStream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ResizeStream_U0_empty_n : STD_LOGIC;
    signal ResizeStream_U0_start_full_n : STD_LOGIC;
    signal ResizeStream_U0_start_write : STD_LOGIC;

    component ResizeStream_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_V_TVALID : IN STD_LOGIC;
        in_V_V_TREADY : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component FCMac IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component ResizeStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_V_V_TVALID : OUT STD_LOGIC;
        out_V_V_TREADY : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FCMac_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ResizeSdEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FCL1_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    FCL1_control_s_axi_U : component FCL1_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    ResizeStream_1_U0 : component ResizeStream_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ResizeStream_1_U0_ap_start,
        start_full_n => start_for_FCMac_U0_full_n,
        ap_done => ResizeStream_1_U0_ap_done,
        ap_continue => ResizeStream_1_U0_ap_continue,
        ap_idle => ResizeStream_1_U0_ap_idle,
        ap_ready => ResizeStream_1_U0_ap_ready,
        start_out => ResizeStream_1_U0_start_out,
        start_write => ResizeStream_1_U0_start_write,
        in_V_V_TDATA => input1_V_V_TDATA,
        in_V_V_TVALID => input1_V_V_TVALID,
        in_V_V_TREADY => ResizeStream_1_U0_in_V_V_TREADY,
        out_V_V_din => ResizeStream_1_U0_out_V_V_din,
        out_V_V_full_n => inn_V_V_full_n,
        out_V_V_write => ResizeStream_1_U0_out_V_V_write);

    FCMac_U0 : component FCMac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FCMac_U0_ap_start,
        start_full_n => start_for_ResizeStream_U0_full_n,
        ap_done => FCMac_U0_ap_done,
        ap_continue => FCMac_U0_ap_continue,
        ap_idle => FCMac_U0_ap_idle,
        ap_ready => FCMac_U0_ap_ready,
        start_out => FCMac_U0_start_out,
        start_write => FCMac_U0_start_write,
        in_V_V_dout => inn_V_V_dout,
        in_V_V_empty_n => inn_V_V_empty_n,
        in_V_V_read => FCMac_U0_in_V_V_read,
        out_V_V_din => FCMac_U0_out_V_V_din,
        out_V_V_full_n => outStr_V_V_full_n,
        out_V_V_write => FCMac_U0_out_V_V_write);

    ResizeStream_U0 : component ResizeStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ResizeStream_U0_ap_start,
        ap_done => ResizeStream_U0_ap_done,
        ap_continue => ResizeStream_U0_ap_continue,
        ap_idle => ResizeStream_U0_ap_idle,
        ap_ready => ResizeStream_U0_ap_ready,
        in_V_V_dout => outStr_V_V_dout,
        in_V_V_empty_n => outStr_V_V_empty_n,
        in_V_V_read => ResizeStream_U0_in_V_V_read,
        out_V_V_TDATA => ResizeStream_U0_out_V_V_TDATA,
        out_V_V_TVALID => ResizeStream_U0_out_V_V_TVALID,
        out_V_V_TREADY => s4_out_V_V_TREADY);

    inn_V_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ResizeStream_1_U0_out_V_V_din,
        if_full_n => inn_V_V_full_n,
        if_write => ResizeStream_1_U0_out_V_V_write,
        if_dout => inn_V_V_dout,
        if_empty_n => inn_V_V_empty_n,
        if_read => FCMac_U0_in_V_V_read);

    outStr_V_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FCMac_U0_out_V_V_din,
        if_full_n => outStr_V_V_full_n,
        if_write => FCMac_U0_out_V_V_write,
        if_dout => outStr_V_V_dout,
        if_empty_n => outStr_V_V_empty_n,
        if_read => ResizeStream_U0_in_V_V_read);

    start_for_FCMac_U0_U : component start_for_FCMac_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FCMac_U0_din,
        if_full_n => start_for_FCMac_U0_full_n,
        if_write => ResizeStream_1_U0_start_write,
        if_dout => start_for_FCMac_U0_dout,
        if_empty_n => start_for_FCMac_U0_empty_n,
        if_read => FCMac_U0_ap_ready);

    start_for_ResizeSdEe_U : component start_for_ResizeSdEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ResizeStream_U0_din,
        if_full_n => start_for_ResizeStream_U0_full_n,
        if_write => FCMac_U0_start_write,
        if_dout => start_for_ResizeStream_U0_dout,
        if_empty_n => start_for_ResizeStream_U0_empty_n,
        if_read => ResizeStream_U0_ap_ready);




    FCMac_U0_ap_continue <= ap_const_logic_1;
    FCMac_U0_ap_start <= start_for_FCMac_U0_empty_n;
    ResizeStream_1_U0_ap_continue <= ap_const_logic_1;
    ResizeStream_1_U0_ap_start <= ap_start;
    ResizeStream_U0_ap_continue <= ap_const_logic_1;
    ResizeStream_U0_ap_start <= start_for_ResizeStream_U0_empty_n;
    ResizeStream_U0_start_full_n <= ap_const_logic_1;
    ResizeStream_U0_start_write <= ap_const_logic_0;
    ap_done <= ResizeStream_U0_ap_done;
    ap_idle <= (ResizeStream_U0_ap_idle and ResizeStream_1_U0_ap_idle and FCMac_U0_ap_idle);
    ap_ready <= ResizeStream_1_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= ResizeStream_U0_ap_done;
    ap_sync_ready <= ResizeStream_1_U0_ap_ready;
    input1_V_V_TREADY <= ResizeStream_1_U0_in_V_V_TREADY;
    s4_out_V_V_TDATA <= ResizeStream_U0_out_V_V_TDATA;
    s4_out_V_V_TVALID <= ResizeStream_U0_out_V_V_TVALID;
    start_for_FCMac_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ResizeStream_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
