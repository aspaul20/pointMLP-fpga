// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FCL1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.368500,HLS_SYN_LAT=31356,HLS_SYN_TPT=31356,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=460,HLS_SYN_LUT=982,HLS_VERSION=2018_2}" *)

module FCL1 (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        input1_V_V_TDATA,
        s4_out_V_V_TDATA,
        input1_V_V_TVALID,
        input1_V_V_TREADY,
        s4_out_V_V_TVALID,
        s4_out_V_V_TREADY
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [63:0] input1_V_V_TDATA;
output  [63:0] s4_out_V_V_TDATA;
input   input1_V_V_TVALID;
output   input1_V_V_TREADY;
output   s4_out_V_V_TVALID;
input   s4_out_V_V_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    ResizeStream_1_U0_ap_start;
wire    ResizeStream_1_U0_ap_done;
wire    ResizeStream_1_U0_ap_continue;
wire    ResizeStream_1_U0_ap_idle;
wire    ResizeStream_1_U0_ap_ready;
wire    ResizeStream_1_U0_start_out;
wire    ResizeStream_1_U0_start_write;
wire    ResizeStream_1_U0_in_V_V_TREADY;
wire   [7:0] ResizeStream_1_U0_out_V_V_din;
wire    ResizeStream_1_U0_out_V_V_write;
wire    FCMac_U0_ap_start;
wire    FCMac_U0_ap_done;
wire    FCMac_U0_ap_continue;
wire    FCMac_U0_ap_idle;
wire    FCMac_U0_ap_ready;
wire    FCMac_U0_start_out;
wire    FCMac_U0_start_write;
wire    FCMac_U0_in_V_V_read;
wire   [7:0] FCMac_U0_out_V_V_din;
wire    FCMac_U0_out_V_V_write;
wire    ResizeStream_U0_ap_start;
wire    ResizeStream_U0_ap_done;
wire    ResizeStream_U0_ap_continue;
wire    ResizeStream_U0_ap_idle;
wire    ResizeStream_U0_ap_ready;
wire    ResizeStream_U0_in_V_V_read;
wire   [63:0] ResizeStream_U0_out_V_V_TDATA;
wire    ResizeStream_U0_out_V_V_TVALID;
wire    ap_sync_continue;
wire    inn_V_V_full_n;
wire   [7:0] inn_V_V_dout;
wire    inn_V_V_empty_n;
wire    outStr_V_V_full_n;
wire   [7:0] outStr_V_V_dout;
wire    outStr_V_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_FCMac_U0_din;
wire    start_for_FCMac_U0_full_n;
wire   [0:0] start_for_FCMac_U0_dout;
wire    start_for_FCMac_U0_empty_n;
wire   [0:0] start_for_ResizeStream_U0_din;
wire    start_for_ResizeStream_U0_full_n;
wire   [0:0] start_for_ResizeStream_U0_dout;
wire    start_for_ResizeStream_U0_empty_n;
wire    ResizeStream_U0_start_full_n;
wire    ResizeStream_U0_start_write;

FCL1_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
FCL1_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ResizeStream_1 ResizeStream_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ResizeStream_1_U0_ap_start),
    .start_full_n(start_for_FCMac_U0_full_n),
    .ap_done(ResizeStream_1_U0_ap_done),
    .ap_continue(ResizeStream_1_U0_ap_continue),
    .ap_idle(ResizeStream_1_U0_ap_idle),
    .ap_ready(ResizeStream_1_U0_ap_ready),
    .start_out(ResizeStream_1_U0_start_out),
    .start_write(ResizeStream_1_U0_start_write),
    .in_V_V_TDATA(input1_V_V_TDATA),
    .in_V_V_TVALID(input1_V_V_TVALID),
    .in_V_V_TREADY(ResizeStream_1_U0_in_V_V_TREADY),
    .out_V_V_din(ResizeStream_1_U0_out_V_V_din),
    .out_V_V_full_n(inn_V_V_full_n),
    .out_V_V_write(ResizeStream_1_U0_out_V_V_write)
);

FCMac FCMac_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(FCMac_U0_ap_start),
    .start_full_n(start_for_ResizeStream_U0_full_n),
    .ap_done(FCMac_U0_ap_done),
    .ap_continue(FCMac_U0_ap_continue),
    .ap_idle(FCMac_U0_ap_idle),
    .ap_ready(FCMac_U0_ap_ready),
    .start_out(FCMac_U0_start_out),
    .start_write(FCMac_U0_start_write),
    .in_V_V_dout(inn_V_V_dout),
    .in_V_V_empty_n(inn_V_V_empty_n),
    .in_V_V_read(FCMac_U0_in_V_V_read),
    .out_V_V_din(FCMac_U0_out_V_V_din),
    .out_V_V_full_n(outStr_V_V_full_n),
    .out_V_V_write(FCMac_U0_out_V_V_write)
);

ResizeStream ResizeStream_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ResizeStream_U0_ap_start),
    .ap_done(ResizeStream_U0_ap_done),
    .ap_continue(ResizeStream_U0_ap_continue),
    .ap_idle(ResizeStream_U0_ap_idle),
    .ap_ready(ResizeStream_U0_ap_ready),
    .in_V_V_dout(outStr_V_V_dout),
    .in_V_V_empty_n(outStr_V_V_empty_n),
    .in_V_V_read(ResizeStream_U0_in_V_V_read),
    .out_V_V_TDATA(ResizeStream_U0_out_V_V_TDATA),
    .out_V_V_TVALID(ResizeStream_U0_out_V_V_TVALID),
    .out_V_V_TREADY(s4_out_V_V_TREADY)
);

fifo_w8_d2_A inn_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ResizeStream_1_U0_out_V_V_din),
    .if_full_n(inn_V_V_full_n),
    .if_write(ResizeStream_1_U0_out_V_V_write),
    .if_dout(inn_V_V_dout),
    .if_empty_n(inn_V_V_empty_n),
    .if_read(FCMac_U0_in_V_V_read)
);

fifo_w8_d2_A outStr_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FCMac_U0_out_V_V_din),
    .if_full_n(outStr_V_V_full_n),
    .if_write(FCMac_U0_out_V_V_write),
    .if_dout(outStr_V_V_dout),
    .if_empty_n(outStr_V_V_empty_n),
    .if_read(ResizeStream_U0_in_V_V_read)
);

start_for_FCMac_U0 start_for_FCMac_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_FCMac_U0_din),
    .if_full_n(start_for_FCMac_U0_full_n),
    .if_write(ResizeStream_1_U0_start_write),
    .if_dout(start_for_FCMac_U0_dout),
    .if_empty_n(start_for_FCMac_U0_empty_n),
    .if_read(FCMac_U0_ap_ready)
);

start_for_ResizeSdEe start_for_ResizeSdEe_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_ResizeStream_U0_din),
    .if_full_n(start_for_ResizeStream_U0_full_n),
    .if_write(FCMac_U0_start_write),
    .if_dout(start_for_ResizeStream_U0_dout),
    .if_empty_n(start_for_ResizeStream_U0_empty_n),
    .if_read(ResizeStream_U0_ap_ready)
);

assign FCMac_U0_ap_continue = 1'b1;

assign FCMac_U0_ap_start = start_for_FCMac_U0_empty_n;

assign ResizeStream_1_U0_ap_continue = 1'b1;

assign ResizeStream_1_U0_ap_start = ap_start;

assign ResizeStream_U0_ap_continue = 1'b1;

assign ResizeStream_U0_ap_start = start_for_ResizeStream_U0_empty_n;

assign ResizeStream_U0_start_full_n = 1'b1;

assign ResizeStream_U0_start_write = 1'b0;

assign ap_done = ResizeStream_U0_ap_done;

assign ap_idle = (ResizeStream_U0_ap_idle & ResizeStream_1_U0_ap_idle & FCMac_U0_ap_idle);

assign ap_ready = ResizeStream_1_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = ResizeStream_U0_ap_done;

assign ap_sync_ready = ResizeStream_1_U0_ap_ready;

assign input1_V_V_TREADY = ResizeStream_1_U0_in_V_V_TREADY;

assign s4_out_V_V_TDATA = ResizeStream_U0_out_V_V_TDATA;

assign s4_out_V_V_TVALID = ResizeStream_U0_out_V_V_TVALID;

assign start_for_FCMac_U0_din = 1'b1;

assign start_for_ResizeStream_U0_din = 1'b1;

endmodule //FCL1
