-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FCMac is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of FCMac is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_5E : STD_LOGIC_VECTOR (7 downto 0) := "01011110";
    constant ap_const_lv8_E5 : STD_LOGIC_VECTOR (7 downto 0) := "11100101";
    constant ap_const_lv8_35 : STD_LOGIC_VECTOR (7 downto 0) := "00110101";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_4C : STD_LOGIC_VECTOR (7 downto 0) := "01001100";
    constant ap_const_lv8_22 : STD_LOGIC_VECTOR (7 downto 0) := "00100010";
    constant ap_const_lv8_DE : STD_LOGIC_VECTOR (7 downto 0) := "11011110";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_E3 : STD_LOGIC_VECTOR (7 downto 0) := "11100011";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_E2 : STD_LOGIC_VECTOR (7 downto 0) := "11100010";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_ED : STD_LOGIC_VECTOR (7 downto 0) := "11101101";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_D9 : STD_LOGIC_VECTOR (7 downto 0) := "11011001";
    constant ap_const_lv8_EC : STD_LOGIC_VECTOR (7 downto 0) := "11101100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_37 : STD_LOGIC_VECTOR (7 downto 0) := "00110111";
    constant ap_const_lv8_F5 : STD_LOGIC_VECTOR (7 downto 0) := "11110101";
    constant ap_const_lv8_DF : STD_LOGIC_VECTOR (7 downto 0) := "11011111";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_DA : STD_LOGIC_VECTOR (7 downto 0) := "11011010";
    constant ap_const_lv8_D4 : STD_LOGIC_VECTOR (7 downto 0) := "11010100";
    constant ap_const_lv8_65 : STD_LOGIC_VECTOR (7 downto 0) := "01100101";
    constant ap_const_lv8_D5 : STD_LOGIC_VECTOR (7 downto 0) := "11010101";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv8_17 : STD_LOGIC_VECTOR (7 downto 0) := "00010111";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_38 : STD_LOGIC_VECTOR (7 downto 0) := "00111000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights27_m_weights_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights27_m_weights_s_ce0 : STD_LOGIC;
    signal weights27_m_weights_s_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ne_1_fu_286_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sy_cast_fu_432_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sy_cast_reg_606 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal sy_1_fu_442_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sy_1_reg_614 : STD_LOGIC_VECTOR (8 downto 0);
    signal OP1_V_cast_cast_fu_448_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal OP1_V_cast_cast_reg_619 : STD_LOGIC_VECTOR (13 downto 0);
    signal ne_3_fu_458_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ne_3_reg_627 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal macRegisters_0_V_ad_1_reg_637 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_15_reg_642 : STD_LOGIC_VECTOR (6 downto 0);
    signal qb_assign_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ne_2_fu_587_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ne_2_reg_655 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal macRegisters_0_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal macRegisters_0_V_ce0 : STD_LOGIC;
    signal macRegisters_0_V_we0 : STD_LOGIC;
    signal macRegisters_0_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ne_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sy_reg_246 : STD_LOGIC_VECTOR (8 downto 0);
    signal ne4_reg_257 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ne6_reg_269 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_bias_V_fu_297_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_464_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_472_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_fu_491_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_491_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_fu_491_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_fu_522_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_532_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_542_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_514_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component FCL1_mux_646_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (7 downto 0);
        din50 : IN STD_LOGIC_VECTOR (7 downto 0);
        din51 : IN STD_LOGIC_VECTOR (7 downto 0);
        din52 : IN STD_LOGIC_VECTOR (7 downto 0);
        din53 : IN STD_LOGIC_VECTOR (7 downto 0);
        din54 : IN STD_LOGIC_VECTOR (7 downto 0);
        din55 : IN STD_LOGIC_VECTOR (7 downto 0);
        din56 : IN STD_LOGIC_VECTOR (7 downto 0);
        din57 : IN STD_LOGIC_VECTOR (7 downto 0);
        din58 : IN STD_LOGIC_VECTOR (7 downto 0);
        din59 : IN STD_LOGIC_VECTOR (7 downto 0);
        din60 : IN STD_LOGIC_VECTOR (7 downto 0);
        din61 : IN STD_LOGIC_VECTOR (7 downto 0);
        din62 : IN STD_LOGIC_VECTOR (7 downto 0);
        din63 : IN STD_LOGIC_VECTOR (7 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FCMac_weights27_mbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component FCMac_macRegistercud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weights27_m_weights_s_U : component FCMac_weights27_mbkb
    generic map (
        DataWidth => 6,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights27_m_weights_s_address0,
        ce0 => weights27_m_weights_s_ce0,
        q0 => weights27_m_weights_s_q0);

    macRegisters_0_V_U : component FCMac_macRegistercud
    generic map (
        DataWidth => 8,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => macRegisters_0_V_address0,
        ce0 => macRegisters_0_V_ce0,
        we0 => macRegisters_0_V_we0,
        d0 => macRegisters_0_V_d0,
        q0 => macRegisters_0_V_q0);

    FCL1_mux_646_8_1_1_U3 : component FCL1_mux_646_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_5E,
        din1 => ap_const_lv8_E5,
        din2 => ap_const_lv8_35,
        din3 => ap_const_lv8_E1,
        din4 => ap_const_lv8_4C,
        din5 => ap_const_lv8_22,
        din6 => ap_const_lv8_DE,
        din7 => ap_const_lv8_F2,
        din8 => ap_const_lv8_87,
        din9 => ap_const_lv8_F9,
        din10 => ap_const_lv8_E3,
        din11 => ap_const_lv8_F3,
        din12 => ap_const_lv8_F7,
        din13 => ap_const_lv8_E5,
        din14 => ap_const_lv8_2,
        din15 => ap_const_lv8_E2,
        din16 => ap_const_lv8_FD,
        din17 => ap_const_lv8_ED,
        din18 => ap_const_lv8_EE,
        din19 => ap_const_lv8_D9,
        din20 => ap_const_lv8_EC,
        din21 => ap_const_lv8_FF,
        din22 => ap_const_lv8_37,
        din23 => ap_const_lv8_F5,
        din24 => ap_const_lv8_DF,
        din25 => ap_const_lv8_ED,
        din26 => ap_const_lv8_F8,
        din27 => ap_const_lv8_DA,
        din28 => ap_const_lv8_DE,
        din29 => ap_const_lv8_D4,
        din30 => ap_const_lv8_65,
        din31 => ap_const_lv8_D5,
        din32 => ap_const_lv8_DB,
        din33 => ap_const_lv8_28,
        din34 => ap_const_lv8_E3,
        din35 => ap_const_lv8_17,
        din36 => ap_const_lv8_FC,
        din37 => ap_const_lv8_38,
        din38 => ap_const_lv8_ED,
        din39 => ap_const_lv8_E1,
        din40 => ap_const_lv8_E1,
        din41 => ap_const_lv8_E1,
        din42 => ap_const_lv8_E1,
        din43 => ap_const_lv8_E1,
        din44 => ap_const_lv8_E1,
        din45 => ap_const_lv8_E1,
        din46 => ap_const_lv8_E1,
        din47 => ap_const_lv8_E1,
        din48 => ap_const_lv8_E1,
        din49 => ap_const_lv8_E1,
        din50 => ap_const_lv8_E1,
        din51 => ap_const_lv8_E1,
        din52 => ap_const_lv8_E1,
        din53 => ap_const_lv8_E1,
        din54 => ap_const_lv8_E1,
        din55 => ap_const_lv8_E1,
        din56 => ap_const_lv8_E1,
        din57 => ap_const_lv8_E1,
        din58 => ap_const_lv8_E1,
        din59 => ap_const_lv8_E1,
        din60 => ap_const_lv8_E1,
        din61 => ap_const_lv8_E1,
        din62 => ap_const_lv8_E1,
        din63 => ap_const_lv8_E1,
        din64 => ne_reg_235,
        dout => temp_bias_V_fu_297_p66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_1_fu_581_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ne4_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ne4_reg_257 <= ne_3_reg_627;
            elsif ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ne4_reg_257 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    ne6_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ne6_reg_269 <= ap_const_lv6_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                ne6_reg_269 <= ne_2_reg_655;
            end if; 
        end if;
    end process;

    ne_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ne_reg_235 <= ne_1_fu_286_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ne_reg_235 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sy_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_280_p2 = ap_const_lv1_1))) then 
                sy_reg_246 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_452_p2 = ap_const_lv1_1))) then 
                sy_reg_246 <= sy_1_reg_614;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                OP1_V_cast_cast_reg_619 <= OP1_V_cast_cast_fu_448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                macRegisters_0_V_ad_1_reg_637 <= tmp_4_fu_482_p1(6 - 1 downto 0);
                qb_assign_1_reg_647 <= qb_assign_1_fu_556_p2;
                tmp_15_reg_642 <= p_Val2_s_fu_491_p2(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ne_2_reg_655 <= ne_2_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ne_3_reg_627 <= ne_3_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sy_1_reg_614 <= sy_1_fu_442_p2;
                    sy_cast_reg_606(8 downto 0) <= sy_cast_fu_432_p1(8 downto 0);
            end if;
        end if;
    end process;
    sy_cast_reg_606(13 downto 9) <= "00000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state3, tmp_s_fu_436_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_2_fu_452_p2, ap_CS_fsm_state7, tmp_1_fu_581_p2, tmp_fu_280_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_280_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_452_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_1_fu_581_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
        OP1_V_cast_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),14));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(in_V_V_empty_n, tmp_s_fu_436_p2)
    begin
                ap_block_state3 <= ((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, tmp_1_fu_581_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_1_fu_581_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state3, tmp_s_fu_436_p2)
    begin
        if (((tmp_s_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state3, tmp_s_fu_436_p2)
    begin
        if ((not(((tmp_s_fu_436_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_1_fu_581_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_1_fu_581_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    macRegisters_0_V_address0_assign_proc : process(ap_CS_fsm_state2, macRegisters_0_V_ad_1_reg_637, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_9_fu_292_p1, tmp_4_fu_482_p1, tmp_3_fu_593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            macRegisters_0_V_address0 <= tmp_3_fu_593_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            macRegisters_0_V_address0 <= macRegisters_0_V_ad_1_reg_637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            macRegisters_0_V_address0 <= tmp_4_fu_482_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            macRegisters_0_V_address0 <= tmp_9_fu_292_p1(6 - 1 downto 0);
        else 
            macRegisters_0_V_address0 <= "XXXXXX";
        end if; 
    end process;


    macRegisters_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            macRegisters_0_V_ce0 <= ap_const_logic_1;
        else 
            macRegisters_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    macRegisters_0_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, temp_bias_V_fu_297_p66, p_Val2_6_fu_574_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            macRegisters_0_V_d0 <= p_Val2_6_fu_574_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            macRegisters_0_V_d0 <= temp_bias_V_fu_297_p66;
        else 
            macRegisters_0_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    macRegisters_0_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_280_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            macRegisters_0_V_we0 <= ap_const_logic_1;
        else 
            macRegisters_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ne_1_fu_286_p2 <= std_logic_vector(unsigned(ne_reg_235) + unsigned(ap_const_lv6_1));
    ne_2_fu_587_p2 <= std_logic_vector(unsigned(ne6_reg_269) + unsigned(ap_const_lv6_1));
    ne_3_fu_458_p2 <= std_logic_vector(unsigned(ne4_reg_257) + unsigned(ap_const_lv6_1));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= macRegisters_0_V_q0;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_Val2_2_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_642),8));

    p_Val2_6_fu_574_p2 <= std_logic_vector(unsigned(tmp1_fu_568_p2) + unsigned(macRegisters_0_V_q0));
    p_Val2_s_fu_491_p0 <= OP1_V_cast_cast_reg_619(8 - 1 downto 0);
    p_Val2_s_fu_491_p1 <= weights27_m_weights_s_q0;
    p_Val2_s_fu_491_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_491_p0) * signed(p_Val2_s_fu_491_p1))), 14));
    qb_assign_1_fu_556_p2 <= (tmp_11_fu_550_p2 and qbit_fu_514_p3);
    qbit_fu_514_p3 <= p_Val2_s_fu_491_p2(6 downto 6);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sy_1_fu_442_p2 <= std_logic_vector(unsigned(sy_reg_246) + unsigned(ap_const_lv9_1));
    sy_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sy_reg_246),14));
    tmp1_fu_568_p2 <= std_logic_vector(signed(p_Val2_2_fu_562_p1) + signed(tmp_14_fu_565_p1));
    tmp_11_fu_550_p2 <= "0" when (tmp_19_fu_542_p3 = ap_const_lv6_0) else "1";
    tmp_14_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_reg_647),8));
    tmp_16_fu_496_p3 <= p_Val2_s_fu_491_p2(13 downto 13);
    tmp_17_fu_526_p2 <= (tmp_21_fu_522_p1 or tmp_16_fu_496_p3);
    tmp_18_fu_532_p4 <= p_Val2_s_fu_491_p2(5 downto 1);
    tmp_19_fu_542_p3 <= (tmp_18_fu_532_p4 & tmp_17_fu_526_p2);
    tmp_1_fu_581_p2 <= "1" when (ne6_reg_269 = ap_const_lv6_28) else "0";
    tmp_21_fu_522_p1 <= p_Val2_s_fu_491_p2(1 - 1 downto 0);
    tmp_2_fu_452_p2 <= "1" when (ne4_reg_257 = ap_const_lv6_28) else "0";
    tmp_3_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ne6_reg_269),64));
    tmp_4_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ne4_reg_257),64));
    tmp_5_fu_464_p3 <= (ne4_reg_257 & ap_const_lv8_0);
    tmp_6_fu_472_p2 <= std_logic_vector(unsigned(tmp_5_fu_464_p3) + unsigned(sy_cast_reg_606));
    tmp_7_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_472_p2),64));
    tmp_9_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ne_reg_235),64));
    tmp_fu_280_p2 <= "1" when (ne_reg_235 = ap_const_lv6_28) else "0";
    tmp_s_fu_436_p2 <= "1" when (sy_reg_246 = ap_const_lv9_100) else "0";
    weights27_m_weights_s_address0 <= tmp_7_fu_477_p1(14 - 1 downto 0);

    weights27_m_weights_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights27_m_weights_s_ce0 <= ap_const_logic_1;
        else 
            weights27_m_weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
