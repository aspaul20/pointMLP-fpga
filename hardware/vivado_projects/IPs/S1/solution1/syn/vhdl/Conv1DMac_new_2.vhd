-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv14_3000 : STD_LOGIC_VECTOR (13 downto 0) := "11000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights0_m_weights_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights0_m_weights_V_ce0 : STD_LOGIC;
    signal weights0_m_weights_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights0_m_weights_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights0_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights0_m_weights_V_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights0_m_weights_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights0_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights0_m_weights_V_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights0_m_weights_V_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights0_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights0_m_weights_V_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten6_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_100_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_reg_1502_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten6_reg_221 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_reg_254 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten6_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next6_fu_557_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal newSel57_cast_mid2_fu_825_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel57_cast_mid2_reg_1457 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel57_cast_mid2_reg_1457_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel71_cast_mid2_fu_871_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel71_cast_mid2_reg_1462 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel71_cast_mid2_reg_1462_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel85_cast_mid2_fu_935_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel85_cast_mid2_reg_1467 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel85_cast_mid2_reg_1467_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel99_cast_mid2_fu_975_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel99_cast_mid2_reg_1472 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel99_cast_mid2_reg_1472_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_mid2_fu_983_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_100_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_2_fu_1019_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_1031_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_1047_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_89_reg_1516 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_90_reg_1522 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_s_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_1_fu_1077_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_184_1_reg_1532 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_94_reg_1538 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_1_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_reg_1543 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_2_fu_1107_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_184_2_reg_1548 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_96_reg_1554 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_2_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_3_fu_1137_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_184_3_reg_1564 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_98_reg_1570 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_3_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal tmp_88_fu_1005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_4_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_1225_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_4_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_1269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_4_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_1313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_4_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_289_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_293_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_301_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_cast1_fu_285_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_371_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel1_fu_379_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel3_fu_395_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_cond_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_403_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel5_fu_417_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel7_fu_433_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_441_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel9_fu_455_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel11_fu_471_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel12_fu_479_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel13_fu_487_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel14_fu_495_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel15_fu_503_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel16_fu_511_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel18_fu_527_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel93_cast_cast_fu_535_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_305_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel6_fu_425_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel10_fu_463_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel17_fu_519_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_729_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel20_fu_609_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel19_fu_543_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_359_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_569_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_115_mid_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_360_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_2_fu_649_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_730_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_mid1_fu_677_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_mid1_fu_685_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_cast1_mid1_fu_669_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_114_mid1_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_114_mid_fu_577_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_320_mid1_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_319_mid1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_318_mid1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_317_mid1_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_316_mid1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_315_mid1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_314_mid1_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_321_mid1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_mid1_fu_763_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel1_mid1_fu_771_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_322_mid1_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_323_mid1_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_mid1_fu_779_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel3_mid1_fu_787_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_cond_mid1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_mid1_fu_795_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel5_mid1_fu_809_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel6_mid1_fu_817_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel57_cast_mid_fu_585_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel7_mid1_fu_833_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_340_mid1_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_mid1_fu_841_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel9_mid1_fu_855_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel10_mid1_fu_863_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel71_cast_mid_fu_593_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel11_mid1_fu_879_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel12_mid1_fu_887_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel13_mid1_fu_895_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel14_mid1_fu_903_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel15_mid1_fu_911_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel16_mid1_fu_919_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel17_mid1_fu_927_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel85_cast_mid_fu_601_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel18_mid1_fu_943_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel93_cast_mid1_c_fu_951_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel19_mid1_fu_959_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel20_mid1_fu_967_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel99_cast_mid_fu_623_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sf_mid2_fu_661_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sf_cast_fu_991_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_114_mid2_fu_695_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_fu_995_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_116_cast_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_op_fu_1025_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_1047_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_1047_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_071_assign_1_cast_c_fu_1039_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_732_fu_1063_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_1_fu_1077_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_1_fu_1077_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_735_fu_1093_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_2_fu_1107_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_2_fu_1107_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_738_fu_1123_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_3_fu_1137_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_3_fu_1137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_741_fu_1153_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_731_fu_1187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_733_fu_1202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_cast_fu_1215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_1194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp43_fu_1219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_734_fu_1231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_1_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_736_fu_1246_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_1_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_1_cast_fu_1259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_1238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp44_fu_1263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_737_fu_1275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_2_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_739_fu_1290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_2_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_2_cast_fu_1303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_1282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp45_fu_1307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_740_fu_1319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_3_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_742_fu_1334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_3_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_3_cast_fu_1347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_1326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp46_fu_1351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel57_cast_mid2_c_fu_1175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel71_cast_mid2_c_fu_1178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel85_cast_mid2_c_fu_1181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel99_cast_mid2_c_fu_1184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_3_fu_1401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_2_fu_1395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_1_fu_1389_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_fu_1383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv1DMac_new_2_wcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new_2_wdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new_2_weOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new_2_wfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    weights0_m_weights_V_U : component Conv1DMac_new_2_wcud
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights0_m_weights_V_address0,
        ce0 => weights0_m_weights_V_ce0,
        q0 => weights0_m_weights_V_q0);

    weights0_m_weights_V_1_U : component Conv1DMac_new_2_wdEe
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights0_m_weights_V_1_address0,
        ce0 => weights0_m_weights_V_1_ce0,
        q0 => weights0_m_weights_V_1_q0);

    weights0_m_weights_V_2_U : component Conv1DMac_new_2_weOg
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights0_m_weights_V_2_address0,
        ce0 => weights0_m_weights_V_2_ce0,
        q0 => weights0_m_weights_V_2_q0);

    weights0_m_weights_V_3_U : component Conv1DMac_new_2_wfYi
    generic map (
        DataWidth => 6,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights0_m_weights_V_3_address0,
        ce0 => weights0_m_weights_V_3_ce0,
        q0 => weights0_m_weights_V_3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten6_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten6_reg_221 <= indvar_flatten_next6_fu_557_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten6_reg_221 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_fu_1031_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_232 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_4_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_4_fu_140 <= macRegisters_0_V_fu_1225_p2;
            elsif ((((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_4_fu_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_4_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_4_fu_144 <= macRegisters_1_V_fu_1269_p2;
            elsif ((((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_4_fu_144 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_4_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_4_fu_148 <= macRegisters_2_V_fu_1313_p2;
            elsif ((((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_4_fu_148 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_4_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_4_fu_152 <= macRegisters_3_V_fu_1357_p2;
            elsif ((((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_4_fu_152 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_243 <= nm_mid2_fu_983_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_243 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sf_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_254 <= sf_2_fu_1019_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_254 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten6_reg_1448 <= exitcond_flatten6_fu_551_p2;
                    newSel57_cast_mid2_reg_1457_pp0_iter1_reg(1 downto 0) <= newSel57_cast_mid2_reg_1457(1 downto 0);    newSel57_cast_mid2_reg_1457_pp0_iter1_reg(5) <= newSel57_cast_mid2_reg_1457(5);
                    newSel71_cast_mid2_reg_1462_pp0_iter1_reg(1 downto 0) <= newSel71_cast_mid2_reg_1462(1 downto 0);    newSel71_cast_mid2_reg_1462_pp0_iter1_reg(5) <= newSel71_cast_mid2_reg_1462(5);
                    newSel85_cast_mid2_reg_1467_pp0_iter1_reg(2 downto 0) <= newSel85_cast_mid2_reg_1467(2 downto 0);    newSel85_cast_mid2_reg_1467_pp0_iter1_reg(5) <= newSel85_cast_mid2_reg_1467(5);
                newSel99_cast_mid2_reg_1472_pp0_iter1_reg <= newSel99_cast_mid2_reg_1472;
                tmp_100_reg_1502_pp0_iter1_reg <= tmp_100_reg_1502;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    newSel57_cast_mid2_reg_1457(1 downto 0) <= newSel57_cast_mid2_fu_825_p3(1 downto 0);    newSel57_cast_mid2_reg_1457(5) <= newSel57_cast_mid2_fu_825_p3(5);
                    newSel71_cast_mid2_reg_1462(1 downto 0) <= newSel71_cast_mid2_fu_871_p3(1 downto 0);    newSel71_cast_mid2_reg_1462(5) <= newSel71_cast_mid2_fu_871_p3(5);
                    newSel85_cast_mid2_reg_1467(2 downto 0) <= newSel85_cast_mid2_fu_935_p3(2 downto 0);    newSel85_cast_mid2_reg_1467(5) <= newSel85_cast_mid2_fu_935_p3(5);
                newSel99_cast_mid2_reg_1472 <= newSel99_cast_mid2_fu_975_p3;
                tmp_100_reg_1502 <= tmp_100_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_1_reg_1543 <= p_1_fu_1097_p2;
                p_2_reg_1559 <= p_2_fu_1127_p2;
                p_3_reg_1575 <= p_3_fu_1157_p2;
                p_s_reg_1527 <= p_s_fu_1067_p2;
                tmp_184_1_reg_1532 <= tmp_184_1_fu_1077_p2;
                tmp_184_2_reg_1548 <= tmp_184_2_fu_1107_p2;
                tmp_184_3_reg_1564 <= tmp_184_3_fu_1137_p2;
                tmp_89_reg_1516 <= tmp_89_fu_1047_p2;
                tmp_90_reg_1522 <= tmp_89_fu_1047_p2(13 downto 7);
                tmp_94_reg_1538 <= tmp_184_1_fu_1077_p2(13 downto 7);
                tmp_96_reg_1554 <= tmp_184_2_fu_1107_p2(13 downto 7);
                tmp_98_reg_1570 <= tmp_184_3_fu_1137_p2(13 downto 7);
            end if;
        end if;
    end process;
    newSel57_cast_mid2_reg_1457(4 downto 2) <= "000";
    newSel57_cast_mid2_reg_1457_pp0_iter1_reg(4 downto 2) <= "000";
    newSel71_cast_mid2_reg_1462(4 downto 2) <= "000";
    newSel71_cast_mid2_reg_1462_pp0_iter1_reg(4 downto 2) <= "000";
    newSel85_cast_mid2_reg_1467(4 downto 3) <= "00";
    newSel85_cast_mid2_reg_1467_pp0_iter1_reg(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten6_fu_551_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten6_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten6_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten6_reg_1448, ap_enable_reg_pp0_iter2, tmp_100_reg_1502_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten6_reg_1448, ap_enable_reg_pp0_iter2, tmp_100_reg_1502_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten6_reg_1448, ap_enable_reg_pp0_iter2, tmp_100_reg_1502_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten6_reg_1448)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(out_V_V_full_n, tmp_100_reg_1502_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten6_fu_551_p2)
    begin
        if ((exitcond_flatten6_fu_551_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten6_fu_551_p2 <= "1" when (indvar_flatten6_reg_221 = ap_const_lv14_3000) else "0";
    exitcond_flatten_fu_563_p2 <= "1" when (indvar_flatten_reg_232 = ap_const_lv6_18) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten6_reg_1448)
    begin
        if (((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten6_reg_1448, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten6_reg_1448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next6_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(indvar_flatten6_reg_221));
    indvar_flatten_next_fu_1031_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        indvar_flatten_op_fu_1025_p2;
    indvar_flatten_op_fu_1025_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_232) + unsigned(ap_const_lv6_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_1225_p2 <= std_logic_vector(signed(tmp_91_fu_1194_p1) + signed(tmp43_fu_1219_p2));
    macRegisters_1_V_fu_1269_p2 <= std_logic_vector(signed(tmp_95_fu_1238_p1) + signed(tmp44_fu_1263_p2));
    macRegisters_2_V_fu_1313_p2 <= std_logic_vector(signed(tmp_97_fu_1282_p1) + signed(tmp45_fu_1307_p2));
    macRegisters_3_V_fu_1357_p2 <= std_logic_vector(signed(tmp_99_fu_1326_p1) + signed(tmp46_fu_1351_p2));
    newSel10_fu_463_p3 <= 
        newSel8_fu_441_p3 when (or_cond_fu_411_p2(0) = '1') else 
        newSel9_fu_455_p3;
    newSel10_mid1_fu_863_p3 <= 
        newSel8_mid1_fu_841_p3 when (or_cond_mid1_fu_803_p2(0) = '1') else 
        newSel9_mid1_fu_855_p3;
    newSel11_fu_471_p3 <= 
        ap_const_lv6_0 when (tmp_80_fu_347_p2(0) = '1') else 
        ap_const_lv6_24;
    newSel11_mid1_fu_879_p3 <= 
        ap_const_lv6_0 when (tmp_320_mid1_fu_739_p2(0) = '1') else 
        ap_const_lv6_24;
    newSel12_fu_479_p3 <= 
        ap_const_lv6_23 when (tmp_78_fu_335_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel12_mid1_fu_887_p3 <= 
        ap_const_lv6_23 when (tmp_318_mid1_fu_727_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel13_fu_487_p3 <= 
        ap_const_lv6_0 when (tmp_76_fu_323_p2(0) = '1') else 
        ap_const_lv6_25;
    newSel13_mid1_fu_895_p3 <= 
        ap_const_lv6_0 when (tmp_316_mid1_fu_715_p2(0) = '1') else 
        ap_const_lv6_25;
    newSel14_fu_495_p3 <= 
        ap_const_lv6_21 when (tmp_74_fu_311_p2(0) = '1') else 
        ap_const_lv6_20;
    newSel14_mid1_fu_903_p3 <= 
        ap_const_lv6_21 when (tmp_314_mid1_fu_703_p2(0) = '1') else 
        ap_const_lv6_20;
    newSel15_fu_503_p3 <= 
        newSel11_fu_471_p3 when (tmp_81_fu_353_p2(0) = '1') else 
        newSel12_fu_479_p3;
    newSel15_mid1_fu_911_p3 <= 
        newSel11_mid1_fu_879_p3 when (tmp_321_mid1_fu_745_p2(0) = '1') else 
        newSel12_mid1_fu_887_p3;
    newSel16_fu_511_p3 <= 
        newSel13_fu_487_p3 when (tmp_83_fu_365_p2(0) = '1') else 
        newSel14_fu_495_p3;
    newSel16_mid1_fu_919_p3 <= 
        newSel13_mid1_fu_895_p3 when (tmp_323_mid1_fu_757_p2(0) = '1') else 
        newSel14_mid1_fu_903_p3;
    newSel17_fu_519_p3 <= 
        newSel15_fu_503_p3 when (or_cond_fu_411_p2(0) = '1') else 
        newSel16_fu_511_p3;
    newSel17_mid1_fu_927_p3 <= 
        newSel15_mid1_fu_911_p3 when (or_cond_mid1_fu_803_p2(0) = '1') else 
        newSel16_mid1_fu_919_p3;
    newSel18_fu_527_p3 <= 
        ap_const_lv6_23 when (tmp_76_fu_323_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel18_mid1_fu_943_p3 <= 
        ap_const_lv6_23 when (tmp_316_mid1_fu_715_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel19_fu_543_p3 <= 
        newSel18_fu_527_p3 when (tmp_83_fu_365_p2(0) = '1') else 
        newSel93_cast_cast_fu_535_p3;
    newSel19_mid1_fu_959_p3 <= 
        newSel18_mid1_fu_943_p3 when (tmp_323_mid1_fu_757_p2(0) = '1') else 
        newSel93_cast_mid1_c_fu_951_p3;
    newSel1_fu_379_p3 <= 
        ap_const_lv6_0 when (tmp_78_fu_335_p2(0) = '1') else 
        ap_const_lv6_21;
    newSel1_mid1_fu_771_p3 <= 
        ap_const_lv6_0 when (tmp_318_mid1_fu_727_p2(0) = '1') else 
        ap_const_lv6_21;
    newSel20_fu_609_p3 <= 
        ap_const_lv6_1D when (exitcond_flatten_fu_563_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel20_mid1_fu_967_p3 <= 
        ap_const_lv6_0 when (or_cond_mid1_fu_803_p2(0) = '1') else 
        newSel19_mid1_fu_959_p3;
    newSel2_fu_387_p3 <= 
        ap_const_lv6_20 when (tmp_76_fu_323_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel2_mid1_fu_779_p3 <= 
        ap_const_lv6_20 when (tmp_316_mid1_fu_715_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel3_fu_395_p3 <= 
        ap_const_lv6_23 when (tmp_74_fu_311_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel3_mid1_fu_787_p3 <= 
        ap_const_lv6_23 when (tmp_314_mid1_fu_703_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel4_fu_403_p3 <= 
        newSel_fu_371_p3 when (tmp_81_fu_353_p2(0) = '1') else 
        newSel1_fu_379_p3;
    newSel4_mid1_fu_795_p3 <= 
        newSel_mid1_fu_763_p3 when (tmp_321_mid1_fu_745_p2(0) = '1') else 
        newSel1_mid1_fu_771_p3;
    newSel57_cast_mid2_c_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel57_cast_mid2_reg_1457_pp0_iter1_reg),8));
    newSel57_cast_mid2_fu_825_p3 <= 
        newSel6_mid1_fu_817_p3 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        newSel57_cast_mid_fu_585_p3;
    newSel57_cast_mid_fu_585_p3 <= 
        ap_const_lv6_23 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        newSel6_fu_425_p3;
    newSel5_fu_417_p3 <= 
        newSel2_fu_387_p3 when (tmp_83_fu_365_p2(0) = '1') else 
        newSel3_fu_395_p3;
    newSel5_mid1_fu_809_p3 <= 
        newSel2_mid1_fu_779_p3 when (tmp_323_mid1_fu_757_p2(0) = '1') else 
        newSel3_mid1_fu_787_p3;
    newSel6_fu_425_p3 <= 
        newSel4_fu_403_p3 when (or_cond_fu_411_p2(0) = '1') else 
        newSel5_fu_417_p3;
    newSel6_mid1_fu_817_p3 <= 
        newSel4_mid1_fu_795_p3 when (or_cond_mid1_fu_803_p2(0) = '1') else 
        newSel5_mid1_fu_809_p3;
    newSel71_cast_mid2_c_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel71_cast_mid2_reg_1462_pp0_iter1_reg),8));
    newSel71_cast_mid2_fu_871_p3 <= 
        newSel10_mid1_fu_863_p3 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        newSel71_cast_mid_fu_593_p3;
    newSel71_cast_mid_fu_593_p3 <= 
        ap_const_lv6_0 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        newSel10_fu_463_p3;
    newSel7_fu_433_p3 <= 
        ap_const_lv6_23 when (tmp_80_fu_347_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel7_mid1_fu_833_p3 <= 
        ap_const_lv6_23 when (tmp_320_mid1_fu_739_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel85_cast_mid2_c_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel85_cast_mid2_reg_1467_pp0_iter1_reg),8));
    newSel85_cast_mid2_fu_935_p3 <= 
        newSel17_mid1_fu_927_p3 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        newSel85_cast_mid_fu_601_p3;
    newSel85_cast_mid_fu_601_p3 <= 
        ap_const_lv6_21 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        newSel17_fu_519_p3;
    newSel8_fu_441_p3 <= 
        newSel7_fu_433_p3 when (tmp_81_fu_353_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel8_mid1_fu_841_p3 <= 
        newSel7_mid1_fu_833_p3 when (tmp_321_mid1_fu_745_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel93_cast_cast_fu_535_p3 <= 
        ap_const_lv6_1D when (tmp_74_fu_311_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel93_cast_mid1_c_fu_951_p3 <= 
        ap_const_lv6_1D when (tmp_314_mid1_fu_703_p2(0) = '1') else 
        ap_const_lv6_0;
    newSel99_cast_mid2_c_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel99_cast_mid2_reg_1472_pp0_iter1_reg),8));
    newSel99_cast_mid2_fu_975_p3 <= 
        newSel20_mid1_fu_967_p3 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        newSel99_cast_mid_fu_623_p3;
    newSel99_cast_mid_fu_623_p3 <= 
        newSel20_fu_609_p3 when (tmp_729_fu_617_p2(0) = '1') else 
        newSel19_fu_543_p3;
    newSel9_fu_455_p3 <= 
        ap_const_lv6_0 when (tmp_84_fu_449_p2(0) = '1') else 
        ap_const_lv6_20;
    newSel9_mid1_fu_855_p3 <= 
        ap_const_lv6_0 when (tmp_340_mid1_fu_849_p2(0) = '1') else 
        ap_const_lv6_20;
    newSel_fu_371_p3 <= 
        ap_const_lv6_0 when (tmp_80_fu_347_p2(0) = '1') else 
        ap_const_lv6_23;
    newSel_mid1_fu_763_p3 <= 
        ap_const_lv6_0 when (tmp_320_mid1_fu_739_p2(0) = '1') else 
        ap_const_lv6_23;
    nm_2_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(nm_mid_fu_569_p3));
    nm_cast1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nm_reg_243),6));
    nm_cast1_mid1_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nm_2_fu_649_p2),6));
    nm_mid2_fu_983_p3 <= 
        nm_2_fu_649_p2 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        nm_mid_fu_569_p3;
    nm_mid_fu_569_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        nm_reg_243;
    not_exitcond_flatten_fu_631_p2 <= (exitcond_flatten_fu_563_p2 xor ap_const_lv1_1);
    or_cond_fu_411_p2 <= (tmp_82_fu_359_p2 or tmp_81_fu_353_p2);
    or_cond_mid1_fu_803_p2 <= (tmp_322_mid1_fu_751_p2 or tmp_321_mid1_fu_745_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_100_reg_1502_pp0_iter1_reg)
    begin
        if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((result_V_3_fu_1401_p2 & result_V_2_fu_1395_p2) & result_V_1_fu_1389_p2) & result_V_fu_1383_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_100_reg_1502_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_100_reg_1502_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_071_assign_1_cast_c_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),14));

    p_1_fu_1097_p2 <= "0" when (tmp_735_fu_1093_p1 = ap_const_lv6_0) else "1";
    p_2_fu_1127_p2 <= "0" when (tmp_738_fu_1123_p1 = ap_const_lv6_0) else "1";
    p_3_fu_1157_p2 <= "0" when (tmp_741_fu_1153_p1 = ap_const_lv6_0) else "1";
    p_s_fu_1067_p2 <= "0" when (tmp_732_fu_1063_p1 = ap_const_lv6_0) else "1";
    p_shl_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_293_p3),6));
    p_shl_cast_mid1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_677_p3),6));
    p_shl_fu_293_p3 <= (tmp_fu_289_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_677_p3 <= (tmp_730_fu_673_p1 & ap_const_lv2_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    result_V_1_fu_1389_p2 <= std_logic_vector(unsigned(newSel71_cast_mid2_c_fu_1178_p1) + unsigned(macRegisters_1_V_fu_1269_p2));
    result_V_2_fu_1395_p2 <= std_logic_vector(unsigned(newSel85_cast_mid2_c_fu_1181_p1) + unsigned(macRegisters_2_V_fu_1313_p2));
    result_V_3_fu_1401_p2 <= std_logic_vector(unsigned(newSel99_cast_mid2_c_fu_1184_p1) + unsigned(macRegisters_3_V_fu_1357_p2));
    result_V_fu_1383_p2 <= std_logic_vector(unsigned(newSel57_cast_mid2_c_fu_1175_p1) + unsigned(macRegisters_0_V_fu_1225_p2));
    sf_2_fu_1019_p2 <= std_logic_vector(unsigned(sf_mid2_fu_661_p3) + unsigned(ap_const_lv2_1));
    sf_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_661_p3),6));
    sf_mid2_fu_661_p3 <= 
        ap_const_lv2_0 when (tmp_360_fu_655_p2(0) = '1') else 
        sf_reg_254;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp43_fu_1219_p2 <= std_logic_vector(unsigned(tmp_191_cast_fu_1215_p1) + unsigned(macRegisters_0_V_4_fu_140));
    tmp44_fu_1263_p2 <= std_logic_vector(unsigned(tmp_191_1_cast_fu_1259_p1) + unsigned(macRegisters_1_V_4_fu_144));
    tmp45_fu_1307_p2 <= std_logic_vector(unsigned(tmp_191_2_cast_fu_1303_p1) + unsigned(macRegisters_2_V_4_fu_148));
    tmp46_fu_1351_p2 <= std_logic_vector(unsigned(tmp_191_3_cast_fu_1347_p1) + unsigned(macRegisters_3_V_4_fu_152));
    tmp_100_fu_1013_p2 <= "1" when (sf_mid2_fu_661_p3 = ap_const_lv2_2) else "0";
    tmp_114_mid1_fu_689_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_685_p1) - unsigned(nm_cast1_mid1_fu_669_p1));
    tmp_114_mid2_fu_695_p3 <= 
        tmp_114_mid1_fu_689_p2 when (tmp_115_mid_fu_643_p2(0) = '1') else 
        tmp_114_mid_fu_577_p3;
    tmp_114_mid_fu_577_p3 <= 
        ap_const_lv6_0 when (exitcond_flatten_fu_563_p2(0) = '1') else 
        tmp_s_fu_305_p2;
    tmp_115_mid_fu_643_p2 <= (tmp_359_fu_637_p2 and not_exitcond_flatten_fu_631_p2);
        tmp_116_cast_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_995_p2),32));

    tmp_184_1_fu_1077_p0 <= weights0_m_weights_V_1_q0;
    tmp_184_1_fu_1077_p1 <= p_071_assign_1_cast_c_fu_1039_p1(8 - 1 downto 0);
    tmp_184_1_fu_1077_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_184_1_fu_1077_p0) * signed(tmp_184_1_fu_1077_p1))), 14));
    tmp_184_2_fu_1107_p0 <= weights0_m_weights_V_2_q0;
    tmp_184_2_fu_1107_p1 <= p_071_assign_1_cast_c_fu_1039_p1(8 - 1 downto 0);
    tmp_184_2_fu_1107_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_184_2_fu_1107_p0) * signed(tmp_184_2_fu_1107_p1))), 14));
    tmp_184_3_fu_1137_p0 <= weights0_m_weights_V_3_q0;
    tmp_184_3_fu_1137_p1 <= p_071_assign_1_cast_c_fu_1039_p1(8 - 1 downto 0);
    tmp_184_3_fu_1137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_184_3_fu_1137_p0) * signed(tmp_184_3_fu_1137_p1))), 14));
    tmp_187_1_fu_1241_p2 <= (tmp_734_fu_1231_p3 or p_1_reg_1543);
    tmp_187_2_fu_1285_p2 <= (tmp_737_fu_1275_p3 or p_2_reg_1559);
    tmp_187_3_fu_1329_p2 <= (tmp_740_fu_1319_p3 or p_3_reg_1575);
    tmp_191_1_cast_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_1_fu_1253_p2),8));
    tmp_191_1_fu_1253_p2 <= (tmp_736_fu_1246_p3 and tmp_187_1_fu_1241_p2);
    tmp_191_2_cast_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_2_fu_1297_p2),8));
    tmp_191_2_fu_1297_p2 <= (tmp_739_fu_1290_p3 and tmp_187_2_fu_1285_p2);
    tmp_191_3_cast_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_3_fu_1341_p2),8));
    tmp_191_3_fu_1341_p2 <= (tmp_742_fu_1334_p3 and tmp_187_3_fu_1329_p2);
    tmp_191_cast_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_1209_p2),8));
    tmp_314_mid1_fu_703_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_0) else "0";
    tmp_315_mid1_fu_709_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_1) else "0";
    tmp_316_mid1_fu_715_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_2) else "0";
    tmp_317_mid1_fu_721_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_3) else "0";
    tmp_318_mid1_fu_727_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_4) else "0";
    tmp_319_mid1_fu_733_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_5) else "0";
    tmp_320_mid1_fu_739_p2 <= "1" when (tmp_730_fu_673_p1 = ap_const_lv3_6) else "0";
    tmp_321_mid1_fu_745_p2 <= (tmp_320_mid1_fu_739_p2 or tmp_319_mid1_fu_733_p2);
    tmp_322_mid1_fu_751_p2 <= (tmp_318_mid1_fu_727_p2 or tmp_317_mid1_fu_721_p2);
    tmp_323_mid1_fu_757_p2 <= (tmp_316_mid1_fu_715_p2 or tmp_315_mid1_fu_709_p2);
    tmp_340_mid1_fu_849_p2 <= (tmp_323_mid1_fu_757_p2 or tmp_314_mid1_fu_703_p2);
    tmp_359_fu_637_p2 <= "1" when (sf_reg_254 = ap_const_lv2_3) else "0";
    tmp_360_fu_655_p2 <= (tmp_115_mid_fu_643_p2 or exitcond_flatten_fu_563_p2);
    tmp_729_fu_617_p2 <= (or_cond_fu_411_p2 or exitcond_flatten_fu_563_p2);
    tmp_730_fu_673_p1 <= nm_2_fu_649_p2(3 - 1 downto 0);
    tmp_731_fu_1187_p3 <= tmp_89_reg_1516(12 downto 12);
    tmp_732_fu_1063_p1 <= tmp_89_fu_1047_p2(6 - 1 downto 0);
    tmp_733_fu_1202_p3 <= tmp_89_reg_1516(6 downto 6);
    tmp_734_fu_1231_p3 <= tmp_184_1_reg_1532(12 downto 12);
    tmp_735_fu_1093_p1 <= tmp_184_1_fu_1077_p2(6 - 1 downto 0);
    tmp_736_fu_1246_p3 <= tmp_184_1_reg_1532(6 downto 6);
    tmp_737_fu_1275_p3 <= tmp_184_2_reg_1548(12 downto 12);
    tmp_738_fu_1123_p1 <= tmp_184_2_fu_1107_p2(6 - 1 downto 0);
    tmp_739_fu_1290_p3 <= tmp_184_2_reg_1548(6 downto 6);
    tmp_740_fu_1319_p3 <= tmp_184_3_reg_1564(12 downto 12);
    tmp_741_fu_1153_p1 <= tmp_184_3_fu_1137_p2(6 - 1 downto 0);
    tmp_742_fu_1334_p3 <= tmp_184_3_reg_1564(6 downto 6);
    tmp_74_fu_311_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_0) else "0";
    tmp_75_fu_317_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_1) else "0";
    tmp_76_fu_323_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_2) else "0";
    tmp_77_fu_329_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_3) else "0";
    tmp_78_fu_335_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_4) else "0";
    tmp_79_fu_341_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_5) else "0";
    tmp_80_fu_347_p2 <= "1" when (tmp_fu_289_p1 = ap_const_lv3_6) else "0";
    tmp_81_fu_353_p2 <= (tmp_80_fu_347_p2 or tmp_79_fu_341_p2);
    tmp_82_fu_359_p2 <= (tmp_78_fu_335_p2 or tmp_77_fu_329_p2);
    tmp_83_fu_365_p2 <= (tmp_76_fu_323_p2 or tmp_75_fu_317_p2);
    tmp_84_fu_449_p2 <= (tmp_83_fu_365_p2 or tmp_74_fu_311_p2);
    tmp_87_fu_995_p2 <= std_logic_vector(unsigned(sf_cast_fu_991_p1) + unsigned(tmp_114_mid2_fu_695_p3));
    tmp_88_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_cast_fu_1001_p1),64));
    tmp_89_fu_1047_p0 <= weights0_m_weights_V_q0;
    tmp_89_fu_1047_p1 <= p_071_assign_1_cast_c_fu_1039_p1(8 - 1 downto 0);
    tmp_89_fu_1047_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_89_fu_1047_p0) * signed(tmp_89_fu_1047_p1))), 14));
        tmp_91_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_90_reg_1522),8));

    tmp_92_fu_1197_p2 <= (tmp_731_fu_1187_p3 or p_s_reg_1527);
    tmp_93_fu_1209_p2 <= (tmp_92_fu_1197_p2 and tmp_733_fu_1202_p3);
        tmp_95_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_94_reg_1538),8));

        tmp_97_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_96_reg_1554),8));

        tmp_99_fu_1326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_98_reg_1570),8));

    tmp_fu_289_p1 <= nm_reg_243(3 - 1 downto 0);
    tmp_s_fu_305_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_301_p1) - unsigned(nm_cast1_fu_285_p1));
    weights0_m_weights_V_1_address0 <= tmp_88_fu_1005_p1(5 - 1 downto 0);

    weights0_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights0_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights0_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights0_m_weights_V_2_address0 <= tmp_88_fu_1005_p1(5 - 1 downto 0);

    weights0_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights0_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights0_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights0_m_weights_V_3_address0 <= tmp_88_fu_1005_p1(5 - 1 downto 0);

    weights0_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights0_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights0_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights0_m_weights_V_address0 <= tmp_88_fu_1005_p1(5 - 1 downto 0);

    weights0_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights0_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights0_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
