-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new319 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new319 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_22 : STD_LOGIC_VECTOR (7 downto 0) := "00100010";
    constant ap_const_lv8_25 : STD_LOGIC_VECTOR (7 downto 0) := "00100101";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv8_13 : STD_LOGIC_VECTOR (7 downto 0) := "00010011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_24 : STD_LOGIC_VECTOR (7 downto 0) := "00100100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights1_m_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten5_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_69_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_1057_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten5_reg_259 : STD_LOGIC_VECTOR (22 downto 0);
    signal indvar_flatten_reg_270 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_reg_281 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_reg_292 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten5_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten5_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next5_fu_341_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_435_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1039 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1039_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_mid2_fu_443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_62_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_reg_1052 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_1057_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_467_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_479_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_50_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_1_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_1_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_1_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_2_reg_1116 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_2_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_2_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_3_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_3_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_3_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_63_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_3_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_3_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_3_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_3_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_323_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_327_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_357_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_353_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_mid_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_358_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_716_fu_415_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_mid1_fu_419_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_mid_fu_361_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nm_t_mid_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_mid2_fu_407_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_cast1_fu_451_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_mid2_fu_427_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_473_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_fu_501_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_071_assign_1_fu_494_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_718_fu_525_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_717_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_719_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_1_fu_559_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_1_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_1_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_721_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_720_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_1_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_722_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_2_fu_617_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_2_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_2_fu_617_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_724_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_723_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_725_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_3_fu_675_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_3_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_3_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_727_fu_699_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_726_fu_681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_3_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_728_fu_715_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_cast_fu_741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_1_cast_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_2_cast_fu_769_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_3_cast_fu_783_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_817_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_860_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_903_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_946_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_3_fu_983_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_2_fu_940_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_1_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_fu_854_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS1_mux_164DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new319_zec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new319_Aem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new319_Bew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new319_CeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weights1_m_weights_V_U : component Conv1DMac_new319_zec
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_address0,
        ce0 => weights1_m_weights_V_ce0,
        q0 => weights1_m_weights_V_q0);

    weights1_m_weights_V_1_U : component Conv1DMac_new319_Aem
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_1_address0,
        ce0 => weights1_m_weights_V_1_ce0,
        q0 => weights1_m_weights_V_1_q0);

    weights1_m_weights_V_2_U : component Conv1DMac_new319_Bew
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_2_address0,
        ce0 => weights1_m_weights_V_2_ce0,
        q0 => weights1_m_weights_V_2_q0);

    weights1_m_weights_V_3_U : component Conv1DMac_new319_CeG
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_3_address0,
        ce0 => weights1_m_weights_V_3_ce0,
        q0 => weights1_m_weights_V_3_q0);

    computeS1_mux_164DeQ_U42 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_12,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_28,
        din6 => ap_const_lv8_16,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_C,
        din9 => ap_const_lv8_FD,
        din10 => ap_const_lv8_18,
        din11 => ap_const_lv8_1B,
        din12 => ap_const_lv8_F2,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_15,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1039_pp0_iter2_reg,
        dout => tmp_70_fu_817_p18);

    computeS1_mux_164DeQ_U43 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_22,
        din1 => ap_const_lv8_12,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_25,
        din4 => ap_const_lv8_FC,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_A,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_10,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_12,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_10,
        din13 => ap_const_lv8_FF,
        din14 => ap_const_lv8_5,
        din15 => ap_const_lv8_10,
        din16 => nm_t_mid2_reg_1039_pp0_iter2_reg,
        dout => tmp_71_fu_860_p18);

    computeS1_mux_164DeQ_U44 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_1E,
        din2 => ap_const_lv8_1D,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_13,
        din7 => ap_const_lv8_4,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_14,
        din10 => ap_const_lv8_6,
        din11 => ap_const_lv8_24,
        din12 => ap_const_lv8_D,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_F,
        din15 => ap_const_lv8_20,
        din16 => nm_t_mid2_reg_1039_pp0_iter2_reg,
        dout => tmp_72_fu_903_p18);

    computeS1_mux_164DeQ_U45 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_13,
        din1 => ap_const_lv8_11,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_4,
        din5 => ap_const_lv8_22,
        din6 => ap_const_lv8_1E,
        din7 => ap_const_lv8_20,
        din8 => ap_const_lv8_6,
        din9 => ap_const_lv8_1A,
        din10 => ap_const_lv8_25,
        din11 => ap_const_lv8_1A,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_16,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_1A,
        din16 => nm_t_mid2_reg_1039_pp0_iter2_reg,
        dout => tmp_73_fu_946_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten5_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_259 <= indvar_flatten_next5_fu_341_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten5_reg_259 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_270 <= indvar_flatten_next_fu_479_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_270 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_3_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_3_fu_178 <= macRegisters_0_V_fu_749_p2;
            elsif ((((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_3_fu_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_3_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_3_fu_182 <= macRegisters_1_V_fu_763_p2;
            elsif ((((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_3_fu_182 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_3_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_3_fu_186 <= macRegisters_2_V_fu_777_p2;
            elsif ((((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_3_fu_186 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_3_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_3_fu_190 <= macRegisters_3_V_fu_791_p2;
            elsif ((((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_3_fu_190 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_281 <= nm_mid2_fu_443_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_281 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sf_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_292 <= sf_1_fu_467_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_292 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten5_reg_1030 <= exitcond_flatten5_fu_335_p2;
                exitcond_flatten5_reg_1030_pp0_iter1_reg <= exitcond_flatten5_reg_1030;
                nm_t_mid2_reg_1039_pp0_iter1_reg <= nm_t_mid2_reg_1039;
                tmp_69_reg_1057_pp0_iter1_reg <= tmp_69_reg_1057;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1039 <= nm_t_mid2_fu_435_p3;
                tmp_62_reg_1052 <= tmp_62_fu_455_p2;
                tmp_69_reg_1057 <= tmp_69_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1039_pp0_iter2_reg <= nm_t_mid2_reg_1039_pp0_iter1_reg;
                tmp_69_reg_1057_pp0_iter2_reg <= tmp_69_reg_1057_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_142_1_reg_1106 <= tmp_140_1_fu_559_p2(14 downto 7);
                tmp_142_2_reg_1116 <= tmp_140_2_fu_617_p2(14 downto 7);
                tmp_142_3_reg_1126 <= tmp_140_3_fu_675_p2(14 downto 7);
                tmp_147_1_reg_1111 <= tmp_147_1_fu_607_p2;
                tmp_147_2_reg_1121 <= tmp_147_2_fu_665_p2;
                tmp_147_3_reg_1131 <= tmp_147_3_fu_723_p2;
                tmp_66_reg_1096 <= tmp_65_fu_501_p2(14 downto 7);
                tmp_68_reg_1101 <= tmp_68_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_50_reg_1071 <= in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten5_fu_335_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten5_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten5_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1030, ap_enable_reg_pp0_iter3, tmp_69_reg_1057_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1030, ap_enable_reg_pp0_iter3, tmp_69_reg_1057_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1030, ap_enable_reg_pp0_iter3, tmp_69_reg_1057_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten5_reg_1030)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, tmp_69_reg_1057_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten5_fu_335_p2)
    begin
        if ((exitcond_flatten5_fu_335_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten5_fu_335_p2 <= "1" when (indvar_flatten5_reg_259 = ap_const_lv23_400000) else "0";
    exitcond_flatten_fu_347_p2 <= "1" when (indvar_flatten_reg_270 = ap_const_lv12_400) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten5_reg_1030)
    begin
        if (((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1030, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten5_reg_1030 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next5_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv23_1) + unsigned(indvar_flatten5_reg_259));
    indvar_flatten_next_fu_479_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_347_p2(0) = '1') else 
        indvar_flatten_op_fu_473_p2;
    indvar_flatten_op_fu_473_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_270) + unsigned(ap_const_lv12_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_749_p2 <= std_logic_vector(unsigned(macRegisters_0_V_3_fu_178) + unsigned(tmp1_fu_744_p2));
    macRegisters_1_V_fu_763_p2 <= std_logic_vector(unsigned(macRegisters_1_V_3_fu_182) + unsigned(tmp2_fu_758_p2));
    macRegisters_2_V_fu_777_p2 <= std_logic_vector(unsigned(macRegisters_2_V_3_fu_186) + unsigned(tmp3_fu_772_p2));
    macRegisters_3_V_fu_791_p2 <= std_logic_vector(unsigned(macRegisters_3_V_3_fu_190) + unsigned(tmp4_fu_786_p2));
    nm_1_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(nm_mid_fu_353_p3));
    nm_mid2_fu_443_p3 <= 
        nm_1_fu_395_p2 when (tmp_61_mid_fu_389_p2(0) = '1') else 
        nm_mid_fu_353_p3;
    nm_mid_fu_353_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_347_p2(0) = '1') else 
        nm_reg_281;
    nm_t_mid2_fu_435_p3 <= 
        tmp_716_fu_415_p1 when (tmp_61_mid_fu_389_p2(0) = '1') else 
        nm_t_mid_fu_369_p3;
    nm_t_mid_fu_369_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_347_p2(0) = '1') else 
        tmp_fu_323_p1;
    not_exitcond_flatten_fu_377_p2 <= (exitcond_flatten_fu_347_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, tmp_69_reg_1057_pp0_iter2_reg)
    begin
        if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((result_V_3_fu_983_p2 & result_V_2_fu_940_p2) & result_V_1_fu_897_p2) & result_V_fu_854_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_69_reg_1057_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_69_reg_1057_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_071_assign_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_50_reg_1071),16));

    p_1_fu_587_p2 <= "0" when (tmp_721_fu_583_p1 = ap_const_lv6_0) else "1";
    p_2_fu_645_p2 <= "0" when (tmp_724_fu_641_p1 = ap_const_lv6_0) else "1";
    p_3_fu_703_p2 <= "0" when (tmp_727_fu_699_p1 = ap_const_lv6_0) else "1";
    p_s_fu_529_p2 <= "0" when (tmp_718_fu_525_p1 = ap_const_lv6_0) else "1";

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    result_V_1_fu_897_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_763_p2) + unsigned(tmp_71_fu_860_p18));
    result_V_2_fu_940_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_777_p2) + unsigned(tmp_72_fu_903_p18));
    result_V_3_fu_983_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_791_p2) + unsigned(tmp_73_fu_946_p18));
    result_V_fu_854_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_749_p2) + unsigned(tmp_70_fu_817_p18));
    sf_1_fu_467_p2 <= std_logic_vector(unsigned(sf_mid2_fu_407_p3) + unsigned(ap_const_lv7_1));
    sf_cast1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_407_p3),10));
    sf_mid2_fu_407_p3 <= 
        ap_const_lv7_0 when (tmp_358_fu_401_p2(0) = '1') else 
        sf_reg_292;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_744_p2 <= std_logic_vector(unsigned(tmp_147_cast_fu_741_p1) + unsigned(tmp_66_reg_1096));
    tmp2_fu_758_p2 <= std_logic_vector(unsigned(tmp_147_1_cast_fu_755_p1) + unsigned(tmp_142_1_reg_1106));
    tmp3_fu_772_p2 <= std_logic_vector(unsigned(tmp_147_2_cast_fu_769_p1) + unsigned(tmp_142_2_reg_1116));
    tmp4_fu_786_p2 <= std_logic_vector(unsigned(tmp_147_3_cast_fu_783_p1) + unsigned(tmp_142_3_reg_1126));
    tmp_140_1_fu_559_p0 <= weights1_m_weights_V_1_q0;
    tmp_140_1_fu_559_p1 <= p_071_assign_1_fu_494_p1(8 - 1 downto 0);
    tmp_140_1_fu_559_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_140_1_fu_559_p0) * signed(tmp_140_1_fu_559_p1))), 16));
    tmp_140_2_fu_617_p0 <= weights1_m_weights_V_2_q0;
    tmp_140_2_fu_617_p1 <= p_071_assign_1_fu_494_p1(8 - 1 downto 0);
    tmp_140_2_fu_617_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_140_2_fu_617_p0) * signed(tmp_140_2_fu_617_p1))), 16));
    tmp_140_3_fu_675_p0 <= weights1_m_weights_V_3_q0;
    tmp_140_3_fu_675_p1 <= p_071_assign_1_fu_494_p1(8 - 1 downto 0);
    tmp_140_3_fu_675_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_140_3_fu_675_p0) * signed(tmp_140_3_fu_675_p1))), 16));
    tmp_143_1_fu_593_p2 <= (tmp_720_fu_565_p3 or p_1_fu_587_p2);
    tmp_143_2_fu_651_p2 <= (tmp_723_fu_623_p3 or p_2_fu_645_p2);
    tmp_143_3_fu_709_p2 <= (tmp_726_fu_681_p3 or p_3_fu_703_p2);
    tmp_147_1_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_1_reg_1111),8));
    tmp_147_1_fu_607_p2 <= (tmp_722_fu_599_p3 and tmp_143_1_fu_593_p2);
    tmp_147_2_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_2_reg_1121),8));
    tmp_147_2_fu_665_p2 <= (tmp_725_fu_657_p3 and tmp_143_2_fu_651_p2);
    tmp_147_3_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_3_reg_1131),8));
    tmp_147_3_fu_723_p2 <= (tmp_728_fu_715_p3 and tmp_143_3_fu_709_p2);
    tmp_147_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_reg_1101),8));
    tmp_357_fu_383_p2 <= "1" when (sf_reg_292 = ap_const_lv7_40) else "0";
    tmp_358_fu_401_p2 <= (tmp_61_mid_fu_389_p2 or exitcond_flatten_fu_347_p2);
    tmp_60_mid1_fu_419_p3 <= (tmp_716_fu_415_p1 & ap_const_lv6_0);
    tmp_60_mid2_fu_427_p3 <= 
        tmp_60_mid1_fu_419_p3 when (tmp_61_mid_fu_389_p2(0) = '1') else 
        tmp_60_mid_fu_361_p3;
    tmp_60_mid_fu_361_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_347_p2(0) = '1') else 
        tmp_s_fu_327_p3;
    tmp_61_mid_fu_389_p2 <= (tmp_357_fu_383_p2 and not_exitcond_flatten_fu_377_p2);
    tmp_62_fu_455_p2 <= std_logic_vector(unsigned(sf_cast1_fu_451_p1) + unsigned(tmp_60_mid2_fu_427_p3));
    tmp_63_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_1052),64));
    tmp_65_fu_501_p0 <= weights1_m_weights_V_q0;
    tmp_65_fu_501_p1 <= p_071_assign_1_fu_494_p1(8 - 1 downto 0);
    tmp_65_fu_501_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_65_fu_501_p0) * signed(tmp_65_fu_501_p1))), 16));
    tmp_67_fu_535_p2 <= (tmp_717_fu_507_p3 or p_s_fu_529_p2);
    tmp_68_fu_549_p2 <= (tmp_719_fu_541_p3 and tmp_67_fu_535_p2);
    tmp_69_fu_461_p2 <= "1" when (sf_mid2_fu_407_p3 = ap_const_lv7_3F) else "0";
    tmp_716_fu_415_p1 <= nm_1_fu_395_p2(4 - 1 downto 0);
    tmp_717_fu_507_p3 <= tmp_65_fu_501_p2(15 downto 15);
    tmp_718_fu_525_p1 <= tmp_65_fu_501_p2(6 - 1 downto 0);
    tmp_719_fu_541_p3 <= tmp_65_fu_501_p2(6 downto 6);
    tmp_720_fu_565_p3 <= tmp_140_1_fu_559_p2(14 downto 14);
    tmp_721_fu_583_p1 <= tmp_140_1_fu_559_p2(6 - 1 downto 0);
    tmp_722_fu_599_p3 <= tmp_140_1_fu_559_p2(6 downto 6);
    tmp_723_fu_623_p3 <= tmp_140_2_fu_617_p2(15 downto 15);
    tmp_724_fu_641_p1 <= tmp_140_2_fu_617_p2(6 - 1 downto 0);
    tmp_725_fu_657_p3 <= tmp_140_2_fu_617_p2(6 downto 6);
    tmp_726_fu_681_p3 <= tmp_140_3_fu_675_p2(14 downto 14);
    tmp_727_fu_699_p1 <= tmp_140_3_fu_675_p2(6 - 1 downto 0);
    tmp_728_fu_715_p3 <= tmp_140_3_fu_675_p2(6 downto 6);
    tmp_fu_323_p1 <= nm_reg_281(4 - 1 downto 0);
    tmp_s_fu_327_p3 <= (tmp_fu_323_p1 & ap_const_lv6_0);
    weights1_m_weights_V_1_address0 <= tmp_63_fu_487_p1(10 - 1 downto 0);

    weights1_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_2_address0 <= tmp_63_fu_487_p1(10 - 1 downto 0);

    weights1_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_3_address0 <= tmp_63_fu_487_p1(10 - 1 downto 0);

    weights1_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_address0 <= tmp_63_fu_487_p1(10 - 1 downto 0);

    weights1_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
