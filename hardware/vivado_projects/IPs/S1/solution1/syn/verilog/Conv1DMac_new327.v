// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new327 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights4_m_weights_V_address0;
reg    weights4_m_weights_V_ce0;
wire   [7:0] weights4_m_weights_V_q0;
wire   [9:0] weights4_m_weights_V_1_address0;
reg    weights4_m_weights_V_1_ce0;
wire   [7:0] weights4_m_weights_V_1_q0;
wire   [9:0] weights4_m_weights_V_2_address0;
reg    weights4_m_weights_V_2_ce0;
wire   [7:0] weights4_m_weights_V_2_q0;
wire   [9:0] weights4_m_weights_V_3_address0;
reg    weights4_m_weights_V_3_ce0;
wire   [7:0] weights4_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten3_reg_1044;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_49_reg_1071;
reg   [0:0] tmp_49_reg_1071_pp0_iter2_reg;
reg   [18:0] indvar_flatten3_reg_273;
reg   [11:0] indvar_flatten_reg_284;
reg   [4:0] nm_reg_295;
reg   [6:0] sf_reg_306;
wire   [0:0] exitcond_flatten3_fu_349_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten3_reg_1044_pp0_iter1_reg;
wire   [18:0] indvar_flatten_next3_fu_355_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_449_p3;
reg   [3:0] nm_t_mid2_reg_1053;
reg   [3:0] nm_t_mid2_reg_1053_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1053_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_457_p3;
wire   [9:0] tmp_42_fu_469_p2;
reg   [9:0] tmp_42_reg_1066;
wire   [0:0] tmp_49_fu_475_p2;
reg   [0:0] tmp_49_reg_1071_pp0_iter1_reg;
wire   [6:0] sf_1_fu_481_p2;
wire   [11:0] indvar_flatten_next_fu_493_p3;
reg   [7:0] tmp_V_48_reg_1085;
reg   [7:0] tmp_46_reg_1110;
wire   [0:0] tmp_48_fu_563_p2;
reg   [0:0] tmp_48_reg_1115;
reg   [7:0] tmp_164_1_reg_1120;
wire   [0:0] tmp_169_1_fu_621_p2;
reg   [0:0] tmp_169_1_reg_1125;
reg   [7:0] tmp_164_2_reg_1130;
wire   [0:0] tmp_169_2_fu_679_p2;
reg   [0:0] tmp_169_2_reg_1135;
reg   [7:0] tmp_164_3_reg_1140;
wire   [0:0] tmp_169_3_fu_737_p2;
reg   [0:0] tmp_169_3_reg_1145;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_43_fu_501_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_1_fu_192;
wire   [7:0] macRegisters_0_V_fu_763_p2;
reg   [7:0] macRegisters_1_V_1_fu_196;
wire   [7:0] macRegisters_1_V_fu_777_p2;
reg   [7:0] macRegisters_2_V_1_fu_200;
wire   [7:0] macRegisters_2_V_fu_791_p2;
reg   [7:0] macRegisters_3_V_1_fu_204;
wire   [7:0] macRegisters_3_V_fu_805_p2;
wire   [3:0] tmp_fu_337_p1;
wire   [0:0] exitcond_flatten_fu_361_p2;
wire   [9:0] tmp_s_fu_341_p3;
wire   [0:0] tmp_353_fu_397_p2;
wire   [0:0] not_exitcond_flatten_fu_391_p2;
wire   [4:0] nm_mid_fu_367_p3;
wire   [0:0] tmp_91_mid_fu_403_p2;
wire   [0:0] tmp_354_fu_415_p2;
wire   [4:0] nm_1_fu_409_p2;
wire   [3:0] tmp_690_fu_429_p1;
wire   [9:0] tmp_90_mid1_fu_433_p3;
wire   [9:0] tmp_90_mid_fu_375_p3;
wire   [3:0] nm_t_mid_fu_383_p3;
wire   [6:0] sf_mid2_fu_421_p3;
wire   [9:0] sf_cast1_fu_465_p1;
wire   [9:0] tmp_90_mid2_fu_441_p3;
wire   [11:0] indvar_flatten_op_fu_487_p2;
wire  signed [7:0] tmp_45_fu_515_p0;
wire  signed [7:0] tmp_45_fu_515_p1;
wire  signed [15:0] p_071_assign_1_fu_508_p1;
wire   [15:0] tmp_45_fu_515_p2;
wire   [5:0] tmp_692_fu_539_p1;
wire   [0:0] tmp_691_fu_521_p3;
wire   [0:0] p_s_fu_543_p2;
wire   [0:0] tmp_47_fu_549_p2;
wire   [0:0] tmp_693_fu_555_p3;
wire  signed [7:0] tmp_162_1_fu_573_p0;
wire  signed [7:0] tmp_162_1_fu_573_p1;
wire   [15:0] tmp_162_1_fu_573_p2;
wire   [5:0] tmp_695_fu_597_p1;
wire   [0:0] tmp_694_fu_579_p3;
wire   [0:0] p_1_fu_601_p2;
wire   [0:0] tmp_165_1_fu_607_p2;
wire   [0:0] tmp_696_fu_613_p3;
wire  signed [7:0] tmp_162_2_fu_631_p0;
wire  signed [7:0] tmp_162_2_fu_631_p1;
wire   [15:0] tmp_162_2_fu_631_p2;
wire   [5:0] tmp_698_fu_655_p1;
wire   [0:0] tmp_697_fu_637_p3;
wire   [0:0] p_2_fu_659_p2;
wire   [0:0] tmp_165_2_fu_665_p2;
wire   [0:0] tmp_699_fu_671_p3;
wire  signed [7:0] tmp_162_3_fu_689_p0;
wire  signed [7:0] tmp_162_3_fu_689_p1;
wire   [15:0] tmp_162_3_fu_689_p2;
wire   [5:0] tmp_701_fu_713_p1;
wire   [0:0] tmp_700_fu_695_p3;
wire   [0:0] p_3_fu_717_p2;
wire   [0:0] tmp_165_3_fu_723_p2;
wire   [0:0] tmp_702_fu_729_p3;
wire   [7:0] tmp_169_cast_fu_755_p1;
wire   [7:0] tmp1_fu_758_p2;
wire   [7:0] tmp_169_1_cast_fu_769_p1;
wire   [7:0] tmp2_fu_772_p2;
wire   [7:0] tmp_169_2_cast_fu_783_p1;
wire   [7:0] tmp3_fu_786_p2;
wire   [7:0] tmp_169_3_cast_fu_797_p1;
wire   [7:0] tmp4_fu_800_p2;
wire   [7:0] tmp_50_fu_831_p18;
wire   [7:0] tmp_51_fu_874_p18;
wire   [7:0] tmp_52_fu_917_p18;
wire   [7:0] tmp_53_fu_960_p18;
wire   [7:0] result_V_3_fu_997_p2;
wire   [7:0] result_V_2_fu_954_p2;
wire   [7:0] result_V_1_fu_911_p2;
wire   [7:0] result_V_fu_868_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new327_QgW #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_address0),
    .ce0(weights4_m_weights_V_ce0),
    .q0(weights4_m_weights_V_q0)
);

Conv1DMac_new327_Rg6 #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_1_address0),
    .ce0(weights4_m_weights_V_1_ce0),
    .q0(weights4_m_weights_V_1_q0)
);

Conv1DMac_new327_Shg #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_2_address0),
    .ce0(weights4_m_weights_V_2_ce0),
    .q0(weights4_m_weights_V_2_q0)
);

Conv1DMac_new327_Thq #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_3_address0),
    .ce0(weights4_m_weights_V_3_ce0),
    .q0(weights4_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U104(
    .din0(8'd0),
    .din1(8'd220),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd243),
    .din5(8'd8),
    .din6(8'd0),
    .din7(8'd5),
    .din8(8'd255),
    .din9(8'd236),
    .din10(8'd142),
    .din11(8'd17),
    .din12(8'd0),
    .din13(8'd252),
    .din14(8'd16),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1053_pp0_iter2_reg),
    .dout(tmp_50_fu_831_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U105(
    .din0(8'd0),
    .din1(8'd188),
    .din2(8'd0),
    .din3(8'd13),
    .din4(8'd235),
    .din5(8'd15),
    .din6(8'd0),
    .din7(8'd39),
    .din8(8'd214),
    .din9(8'd253),
    .din10(8'd8),
    .din11(8'd16),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd219),
    .din15(8'd2),
    .din16(nm_t_mid2_reg_1053_pp0_iter2_reg),
    .dout(tmp_51_fu_874_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U106(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd181),
    .din4(8'd8),
    .din5(8'd0),
    .din6(8'd13),
    .din7(8'd2),
    .din8(8'd237),
    .din9(8'd96),
    .din10(8'd0),
    .din11(8'd11),
    .din12(8'd251),
    .din13(8'd238),
    .din14(8'd29),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1053_pp0_iter2_reg),
    .dout(tmp_52_fu_917_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U107(
    .din0(8'd0),
    .din1(8'd29),
    .din2(8'd12),
    .din3(8'd0),
    .din4(8'd67),
    .din5(8'd26),
    .din6(8'd34),
    .din7(8'd248),
    .din8(8'd179),
    .din9(8'd199),
    .din10(8'd110),
    .din11(8'd33),
    .din12(8'd48),
    .din13(8'd13),
    .din14(8'd0),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1053_pp0_iter2_reg),
    .dout(tmp_53_fu_960_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten3_reg_273 <= indvar_flatten_next3_fu_355_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_273 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_284 <= indvar_flatten_next_fu_493_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_284 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_1_fu_192 <= macRegisters_0_V_fu_763_p2;
    end else if ((((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_1_fu_192 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_1_fu_196 <= macRegisters_1_V_fu_777_p2;
    end else if ((((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_1_fu_196 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_1_fu_200 <= macRegisters_2_V_fu_791_p2;
    end else if ((((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_1_fu_200 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_1_fu_204 <= macRegisters_3_V_fu_805_p2;
    end else if ((((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_1_fu_204 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_295 <= nm_mid2_fu_457_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_295 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_306 <= sf_1_fu_481_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_306 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten3_reg_1044 <= exitcond_flatten3_fu_349_p2;
        exitcond_flatten3_reg_1044_pp0_iter1_reg <= exitcond_flatten3_reg_1044;
        nm_t_mid2_reg_1053_pp0_iter1_reg <= nm_t_mid2_reg_1053;
        tmp_49_reg_1071_pp0_iter1_reg <= tmp_49_reg_1071;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1053 <= nm_t_mid2_fu_449_p3;
        tmp_42_reg_1066 <= tmp_42_fu_469_p2;
        tmp_49_reg_1071 <= tmp_49_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1053_pp0_iter2_reg <= nm_t_mid2_reg_1053_pp0_iter1_reg;
        tmp_49_reg_1071_pp0_iter2_reg <= tmp_49_reg_1071_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1044_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_164_1_reg_1120 <= {{tmp_162_1_fu_573_p2[14:7]}};
        tmp_164_2_reg_1130 <= {{tmp_162_2_fu_631_p2[14:7]}};
        tmp_164_3_reg_1140 <= {{tmp_162_3_fu_689_p2[14:7]}};
        tmp_169_1_reg_1125 <= tmp_169_1_fu_621_p2;
        tmp_169_2_reg_1135 <= tmp_169_2_fu_679_p2;
        tmp_169_3_reg_1145 <= tmp_169_3_fu_737_p2;
        tmp_46_reg_1110 <= {{tmp_45_fu_515_p2[14:7]}};
        tmp_48_reg_1115 <= tmp_48_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_48_reg_1085 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_flatten3_fu_349_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_1044 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_1044 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten3_fu_349_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten3_fu_349_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1044 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1044 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1044 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten3_reg_1044 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_49_reg_1071_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten3_fu_349_p2 = ((indvar_flatten3_reg_273 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_361_p2 = ((indvar_flatten_reg_284 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next3_fu_355_p2 = (19'd1 + indvar_flatten3_reg_273);

assign indvar_flatten_next_fu_493_p3 = ((exitcond_flatten_fu_361_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_487_p2);

assign indvar_flatten_op_fu_487_p2 = (indvar_flatten_reg_284 + 12'd1);

assign macRegisters_0_V_fu_763_p2 = (macRegisters_0_V_1_fu_192 + tmp1_fu_758_p2);

assign macRegisters_1_V_fu_777_p2 = (macRegisters_1_V_1_fu_196 + tmp2_fu_772_p2);

assign macRegisters_2_V_fu_791_p2 = (macRegisters_2_V_1_fu_200 + tmp3_fu_786_p2);

assign macRegisters_3_V_fu_805_p2 = (macRegisters_3_V_1_fu_204 + tmp4_fu_800_p2);

assign nm_1_fu_409_p2 = (5'd1 + nm_mid_fu_367_p3);

assign nm_mid2_fu_457_p3 = ((tmp_91_mid_fu_403_p2[0:0] === 1'b1) ? nm_1_fu_409_p2 : nm_mid_fu_367_p3);

assign nm_mid_fu_367_p3 = ((exitcond_flatten_fu_361_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_295);

assign nm_t_mid2_fu_449_p3 = ((tmp_91_mid_fu_403_p2[0:0] === 1'b1) ? tmp_690_fu_429_p1 : nm_t_mid_fu_383_p3);

assign nm_t_mid_fu_383_p3 = ((exitcond_flatten_fu_361_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_337_p1);

assign not_exitcond_flatten_fu_391_p2 = (exitcond_flatten_fu_361_p2 ^ 1'd1);

assign out_V_V_din = {{{{result_V_3_fu_997_p2}, {result_V_2_fu_954_p2}}, {result_V_1_fu_911_p2}}, {result_V_fu_868_p2}};

assign p_071_assign_1_fu_508_p1 = $signed(tmp_V_48_reg_1085);

assign p_1_fu_601_p2 = ((tmp_695_fu_597_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_2_fu_659_p2 = ((tmp_698_fu_655_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_3_fu_717_p2 = ((tmp_701_fu_713_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_s_fu_543_p2 = ((tmp_692_fu_539_p1 != 6'd0) ? 1'b1 : 1'b0);

assign result_V_1_fu_911_p2 = (macRegisters_1_V_fu_777_p2 + tmp_51_fu_874_p18);

assign result_V_2_fu_954_p2 = (macRegisters_2_V_fu_791_p2 + tmp_52_fu_917_p18);

assign result_V_3_fu_997_p2 = (macRegisters_3_V_fu_805_p2 + tmp_53_fu_960_p18);

assign result_V_fu_868_p2 = (macRegisters_0_V_fu_763_p2 + tmp_50_fu_831_p18);

assign sf_1_fu_481_p2 = (sf_mid2_fu_421_p3 + 7'd1);

assign sf_cast1_fu_465_p1 = sf_mid2_fu_421_p3;

assign sf_mid2_fu_421_p3 = ((tmp_354_fu_415_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_306);

assign start_out = real_start;

assign tmp1_fu_758_p2 = (tmp_169_cast_fu_755_p1 + tmp_46_reg_1110);

assign tmp2_fu_772_p2 = (tmp_169_1_cast_fu_769_p1 + tmp_164_1_reg_1120);

assign tmp3_fu_786_p2 = (tmp_169_2_cast_fu_783_p1 + tmp_164_2_reg_1130);

assign tmp4_fu_800_p2 = (tmp_169_3_cast_fu_797_p1 + tmp_164_3_reg_1140);

assign tmp_162_1_fu_573_p0 = weights4_m_weights_V_1_q0;

assign tmp_162_1_fu_573_p1 = p_071_assign_1_fu_508_p1;

assign tmp_162_1_fu_573_p2 = ($signed(tmp_162_1_fu_573_p0) * $signed(tmp_162_1_fu_573_p1));

assign tmp_162_2_fu_631_p0 = weights4_m_weights_V_2_q0;

assign tmp_162_2_fu_631_p1 = p_071_assign_1_fu_508_p1;

assign tmp_162_2_fu_631_p2 = ($signed(tmp_162_2_fu_631_p0) * $signed(tmp_162_2_fu_631_p1));

assign tmp_162_3_fu_689_p0 = weights4_m_weights_V_3_q0;

assign tmp_162_3_fu_689_p1 = p_071_assign_1_fu_508_p1;

assign tmp_162_3_fu_689_p2 = ($signed(tmp_162_3_fu_689_p0) * $signed(tmp_162_3_fu_689_p1));

assign tmp_165_1_fu_607_p2 = (tmp_694_fu_579_p3 | p_1_fu_601_p2);

assign tmp_165_2_fu_665_p2 = (tmp_697_fu_637_p3 | p_2_fu_659_p2);

assign tmp_165_3_fu_723_p2 = (tmp_700_fu_695_p3 | p_3_fu_717_p2);

assign tmp_169_1_cast_fu_769_p1 = tmp_169_1_reg_1125;

assign tmp_169_1_fu_621_p2 = (tmp_696_fu_613_p3 & tmp_165_1_fu_607_p2);

assign tmp_169_2_cast_fu_783_p1 = tmp_169_2_reg_1135;

assign tmp_169_2_fu_679_p2 = (tmp_699_fu_671_p3 & tmp_165_2_fu_665_p2);

assign tmp_169_3_cast_fu_797_p1 = tmp_169_3_reg_1145;

assign tmp_169_3_fu_737_p2 = (tmp_702_fu_729_p3 & tmp_165_3_fu_723_p2);

assign tmp_169_cast_fu_755_p1 = tmp_48_reg_1115;

assign tmp_353_fu_397_p2 = ((sf_reg_306 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_354_fu_415_p2 = (tmp_91_mid_fu_403_p2 | exitcond_flatten_fu_361_p2);

assign tmp_42_fu_469_p2 = (sf_cast1_fu_465_p1 + tmp_90_mid2_fu_441_p3);

assign tmp_43_fu_501_p1 = tmp_42_reg_1066;

assign tmp_45_fu_515_p0 = weights4_m_weights_V_q0;

assign tmp_45_fu_515_p1 = p_071_assign_1_fu_508_p1;

assign tmp_45_fu_515_p2 = ($signed(tmp_45_fu_515_p0) * $signed(tmp_45_fu_515_p1));

assign tmp_47_fu_549_p2 = (tmp_691_fu_521_p3 | p_s_fu_543_p2);

assign tmp_48_fu_563_p2 = (tmp_693_fu_555_p3 & tmp_47_fu_549_p2);

assign tmp_49_fu_475_p2 = ((sf_mid2_fu_421_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_690_fu_429_p1 = nm_1_fu_409_p2[3:0];

assign tmp_691_fu_521_p3 = tmp_45_fu_515_p2[32'd14];

assign tmp_692_fu_539_p1 = tmp_45_fu_515_p2[5:0];

assign tmp_693_fu_555_p3 = tmp_45_fu_515_p2[32'd6];

assign tmp_694_fu_579_p3 = tmp_162_1_fu_573_p2[32'd14];

assign tmp_695_fu_597_p1 = tmp_162_1_fu_573_p2[5:0];

assign tmp_696_fu_613_p3 = tmp_162_1_fu_573_p2[32'd6];

assign tmp_697_fu_637_p3 = tmp_162_2_fu_631_p2[32'd14];

assign tmp_698_fu_655_p1 = tmp_162_2_fu_631_p2[5:0];

assign tmp_699_fu_671_p3 = tmp_162_2_fu_631_p2[32'd6];

assign tmp_700_fu_695_p3 = tmp_162_3_fu_689_p2[32'd14];

assign tmp_701_fu_713_p1 = tmp_162_3_fu_689_p2[5:0];

assign tmp_702_fu_729_p3 = tmp_162_3_fu_689_p2[32'd6];

assign tmp_90_mid1_fu_433_p3 = {{tmp_690_fu_429_p1}, {6'd0}};

assign tmp_90_mid2_fu_441_p3 = ((tmp_91_mid_fu_403_p2[0:0] === 1'b1) ? tmp_90_mid1_fu_433_p3 : tmp_90_mid_fu_375_p3);

assign tmp_90_mid_fu_375_p3 = ((exitcond_flatten_fu_361_p2[0:0] === 1'b1) ? 10'd0 : tmp_s_fu_341_p3);

assign tmp_91_mid_fu_403_p2 = (tmp_353_fu_397_p2 & not_exitcond_flatten_fu_391_p2);

assign tmp_fu_337_p1 = nm_reg_295[3:0];

assign tmp_s_fu_341_p3 = {{tmp_fu_337_p1}, {6'd0}};

assign weights4_m_weights_V_1_address0 = tmp_43_fu_501_p1;

assign weights4_m_weights_V_2_address0 = tmp_43_fu_501_p1;

assign weights4_m_weights_V_3_address0 = tmp_43_fu_501_p1;

assign weights4_m_weights_V_address0 = tmp_43_fu_501_p1;

endmodule //Conv1DMac_new327
