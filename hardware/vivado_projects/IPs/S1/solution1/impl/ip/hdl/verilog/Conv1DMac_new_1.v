// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights5_m_weights_V_address0;
reg    weights5_m_weights_V_ce0;
wire   [4:0] weights5_m_weights_V_q0;
wire   [9:0] weights5_m_weights_V_1_address0;
reg    weights5_m_weights_V_1_ce0;
wire   [4:0] weights5_m_weights_V_1_q0;
wire   [9:0] weights5_m_weights_V_2_address0;
reg    weights5_m_weights_V_2_ce0;
wire   [4:0] weights5_m_weights_V_2_q0;
wire   [9:0] weights5_m_weights_V_3_address0;
reg    weights5_m_weights_V_3_ce0;
wire   [5:0] weights5_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten7_reg_1046;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_112_reg_1073;
reg   [0:0] tmp_112_reg_1073_pp0_iter2_reg;
reg   [18:0] indvar_flatten7_reg_241;
reg   [11:0] indvar_flatten_reg_252;
reg   [4:0] nm_reg_263;
reg   [6:0] sf_reg_274;
wire   [0:0] exitcond_flatten7_fu_317_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten7_reg_1046_pp0_iter1_reg;
wire   [18:0] indvar_flatten_next7_fu_323_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_417_p3;
reg   [3:0] nm_t_mid2_reg_1055;
reg   [3:0] nm_t_mid2_reg_1055_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1055_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_425_p3;
wire   [9:0] tmp_103_fu_437_p2;
reg   [9:0] tmp_103_reg_1068;
wire   [0:0] tmp_112_fu_443_p2;
reg   [0:0] tmp_112_reg_1073_pp0_iter1_reg;
wire   [6:0] sf_2_fu_449_p2;
wire   [11:0] indvar_flatten_next_fu_461_p3;
reg  signed [7:0] tmp_V_52_reg_1087;
wire   [6:0] tmp1_fu_548_p2;
reg   [6:0] tmp1_reg_1113;
wire   [6:0] tmp2_fu_620_p2;
reg   [6:0] tmp2_reg_1118;
wire   [6:0] tmp3_fu_692_p2;
reg   [6:0] tmp3_reg_1123;
reg   [6:0] tmp_113_reg_1128;
wire   [0:0] tmp_169_3_fu_750_p2;
reg   [0:0] tmp_169_3_reg_1133;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_104_fu_469_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_5_fu_160;
wire   [7:0] macRegisters_0_V_fu_771_p2;
reg   [7:0] macRegisters_1_V_5_fu_164;
wire   [7:0] macRegisters_1_V_fu_780_p2;
reg   [7:0] macRegisters_2_V_5_fu_168;
wire   [7:0] macRegisters_2_V_fu_789_p2;
reg   [7:0] macRegisters_3_V_5_fu_172;
wire   [7:0] macRegisters_3_V_fu_807_p2;
wire   [3:0] tmp_fu_305_p1;
wire   [0:0] exitcond_flatten_fu_329_p2;
wire   [9:0] tmp_s_fu_309_p3;
wire   [0:0] tmp_361_fu_365_p2;
wire   [0:0] not_exitcond_flatten_fu_359_p2;
wire   [4:0] nm_mid_fu_335_p3;
wire   [0:0] tmp_106_mid_fu_371_p2;
wire   [0:0] tmp_362_fu_383_p2;
wire   [4:0] nm_2_fu_377_p2;
wire   [3:0] tmp_743_fu_397_p1;
wire   [9:0] tmp_105_mid1_fu_401_p3;
wire   [9:0] tmp_105_mid_fu_343_p3;
wire   [3:0] nm_t_mid_fu_351_p3;
wire   [6:0] sf_mid2_fu_389_p3;
wire   [9:0] tmp_105_mid2_fu_409_p3;
wire   [9:0] sf_cast6_fu_433_p1;
wire   [11:0] indvar_flatten_op_fu_455_p2;
wire  signed [7:0] tmp_105_fu_486_p0;
wire  signed [12:0] p_071_assign_1_cast5_s_fu_476_p1;
wire  signed [4:0] tmp_105_fu_486_p1;
wire   [12:0] tmp_105_fu_486_p2;
wire   [5:0] tmp_745_fu_500_p4;
wire   [5:0] tmp_746_fu_514_p1;
wire   [0:0] tmp_744_fu_492_p3;
wire   [0:0] p_s_fu_518_p2;
wire   [0:0] tmp_108_fu_524_p2;
wire   [0:0] tmp_747_fu_530_p3;
wire   [0:0] tmp_109_fu_538_p2;
wire  signed [6:0] tmp_107_cast_fu_510_p1;
wire   [6:0] tmp_169_cast_cast_fu_544_p1;
wire  signed [7:0] tmp_162_1_fu_558_p0;
wire  signed [4:0] tmp_162_1_fu_558_p1;
wire   [12:0] tmp_162_1_fu_558_p2;
wire   [5:0] tmp_749_fu_572_p4;
wire   [5:0] tmp_750_fu_586_p1;
wire   [0:0] tmp_748_fu_564_p3;
wire   [0:0] p_1_fu_590_p2;
wire   [0:0] tmp_165_1_fu_596_p2;
wire   [0:0] tmp_751_fu_602_p3;
wire   [0:0] tmp_169_1_fu_610_p2;
wire  signed [6:0] tmp_164_1_cast_fu_582_p1;
wire   [6:0] tmp_169_1_cast_cast_fu_616_p1;
wire  signed [7:0] tmp_162_2_fu_630_p0;
wire  signed [4:0] tmp_162_2_fu_630_p1;
wire   [12:0] tmp_162_2_fu_630_p2;
wire   [5:0] tmp_753_fu_644_p4;
wire   [5:0] tmp_754_fu_658_p1;
wire   [0:0] tmp_752_fu_636_p3;
wire   [0:0] p_2_fu_662_p2;
wire   [0:0] tmp_165_2_fu_668_p2;
wire   [0:0] tmp_755_fu_674_p3;
wire   [0:0] tmp_169_2_fu_682_p2;
wire  signed [6:0] tmp_164_2_cast_fu_654_p1;
wire   [6:0] tmp_169_2_cast_cast_fu_688_p1;
wire  signed [7:0] tmp_162_3_fu_702_p0;
wire  signed [5:0] tmp_162_3_fu_702_p1;
wire   [13:0] tmp_162_3_fu_702_p2;
wire   [5:0] tmp_757_fu_726_p1;
wire   [0:0] tmp_756_fu_708_p3;
wire   [0:0] p_3_fu_730_p2;
wire   [0:0] tmp_165_3_fu_736_p2;
wire   [0:0] tmp_758_fu_742_p3;
wire  signed [7:0] tmp1_cast_fu_768_p1;
wire  signed [7:0] tmp2_cast_fu_777_p1;
wire  signed [7:0] tmp3_cast_fu_786_p1;
wire   [7:0] tmp_169_3_cast_fu_798_p1;
wire   [7:0] tmp4_fu_801_p2;
wire  signed [7:0] tmp_114_fu_795_p1;
wire   [7:0] tmp_115_fu_833_p18;
wire   [7:0] tmp_116_fu_876_p18;
wire   [7:0] tmp_117_fu_919_p18;
wire   [7:0] tmp_118_fu_962_p18;
wire   [7:0] result_V_3_fu_999_p2;
wire   [7:0] result_V_2_fu_956_p2;
wire   [7:0] result_V_1_fu_913_p2;
wire   [7:0] result_V_fu_870_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new_1_wVhK #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_address0),
    .ce0(weights5_m_weights_V_ce0),
    .q0(weights5_m_weights_V_q0)
);

Conv1DMac_new_1_wWhU #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_1_address0),
    .ce0(weights5_m_weights_V_1_ce0),
    .q0(weights5_m_weights_V_1_q0)
);

Conv1DMac_new_1_wXh4 #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_2_address0),
    .ce0(weights5_m_weights_V_2_ce0),
    .q0(weights5_m_weights_V_2_q0)
);

Conv1DMac_new_1_wYie #(
    .DataWidth( 6 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_3_address0),
    .ce0(weights5_m_weights_V_3_ce0),
    .q0(weights5_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U124(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd15),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd7),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd1),
    .din10(8'd0),
    .din11(8'd8),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd253),
    .din15(8'd253),
    .din16(nm_t_mid2_reg_1055_pp0_iter2_reg),
    .dout(tmp_115_fu_833_p18)
);

computeS1_mux_164DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_U125(
    .din0(8'd6),
    .din1(8'd2),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd10),
    .din5(8'd0),
    .din6(8'd2),
    .din7(8'd0),
    .din8(8'd15),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd9),
    .din14(8'd17),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1055_pp0_iter2_reg),
    .dout(tmp_116_fu_876_p18)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U126(
    .din0(8'd2),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd6),
    .din4(8'd6),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd11),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd4),
    .din12(8'd5),
    .din13(8'd0),
    .din14(8'd3),
    .din15(8'd251),
    .din16(nm_t_mid2_reg_1055_pp0_iter2_reg),
    .dout(tmp_117_fu_919_p18)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U127(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd247),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd9),
    .din6(8'd8),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd2),
    .din11(8'd0),
    .din12(8'd11),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1055_pp0_iter2_reg),
    .dout(tmp_118_fu_962_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten7_reg_241 <= indvar_flatten_next7_fu_323_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_241 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_252 <= indvar_flatten_next_fu_461_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_252 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_5_fu_160 <= macRegisters_0_V_fu_771_p2;
    end else if ((((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_5_fu_160 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_5_fu_164 <= macRegisters_1_V_fu_780_p2;
    end else if ((((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_5_fu_164 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_5_fu_168 <= macRegisters_2_V_fu_789_p2;
    end else if ((((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_5_fu_168 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_5_fu_172 <= macRegisters_3_V_fu_807_p2;
    end else if ((((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_5_fu_172 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_263 <= nm_mid2_fu_425_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_263 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_274 <= sf_2_fu_449_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_274 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten7_reg_1046 <= exitcond_flatten7_fu_317_p2;
        exitcond_flatten7_reg_1046_pp0_iter1_reg <= exitcond_flatten7_reg_1046;
        nm_t_mid2_reg_1055_pp0_iter1_reg <= nm_t_mid2_reg_1055;
        tmp_112_reg_1073_pp0_iter1_reg <= tmp_112_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1055 <= nm_t_mid2_fu_417_p3;
        tmp_103_reg_1068 <= tmp_103_fu_437_p2;
        tmp_112_reg_1073 <= tmp_112_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1055_pp0_iter2_reg <= nm_t_mid2_reg_1055_pp0_iter1_reg;
        tmp_112_reg_1073_pp0_iter2_reg <= tmp_112_reg_1073_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_reg_1046_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_reg_1113 <= tmp1_fu_548_p2;
        tmp2_reg_1118 <= tmp2_fu_620_p2;
        tmp3_reg_1123 <= tmp3_fu_692_p2;
        tmp_113_reg_1128 <= {{tmp_162_3_fu_702_p2[13:7]}};
        tmp_169_3_reg_1133 <= tmp_169_3_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_reg_1046 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_52_reg_1087 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_flatten7_fu_317_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten7_reg_1046 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten7_reg_1046 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten7_fu_317_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten7_fu_317_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1046 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1046 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1046 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten7_reg_1046 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_112_reg_1073_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten7_fu_317_p2 = ((indvar_flatten7_reg_241 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_329_p2 = ((indvar_flatten_reg_252 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next7_fu_323_p2 = (19'd1 + indvar_flatten7_reg_241);

assign indvar_flatten_next_fu_461_p3 = ((exitcond_flatten_fu_329_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_455_p2);

assign indvar_flatten_op_fu_455_p2 = (indvar_flatten_reg_252 + 12'd1);

assign macRegisters_0_V_fu_771_p2 = ($signed(tmp1_cast_fu_768_p1) + $signed(macRegisters_0_V_5_fu_160));

assign macRegisters_1_V_fu_780_p2 = ($signed(tmp2_cast_fu_777_p1) + $signed(macRegisters_1_V_5_fu_164));

assign macRegisters_2_V_fu_789_p2 = ($signed(tmp3_cast_fu_786_p1) + $signed(macRegisters_2_V_5_fu_168));

assign macRegisters_3_V_fu_807_p2 = ($signed(tmp4_fu_801_p2) + $signed(tmp_114_fu_795_p1));

assign nm_2_fu_377_p2 = (5'd1 + nm_mid_fu_335_p3);

assign nm_mid2_fu_425_p3 = ((tmp_106_mid_fu_371_p2[0:0] === 1'b1) ? nm_2_fu_377_p2 : nm_mid_fu_335_p3);

assign nm_mid_fu_335_p3 = ((exitcond_flatten_fu_329_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_263);

assign nm_t_mid2_fu_417_p3 = ((tmp_106_mid_fu_371_p2[0:0] === 1'b1) ? tmp_743_fu_397_p1 : nm_t_mid_fu_351_p3);

assign nm_t_mid_fu_351_p3 = ((exitcond_flatten_fu_329_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_305_p1);

assign not_exitcond_flatten_fu_359_p2 = (exitcond_flatten_fu_329_p2 ^ 1'd1);

assign out_V_V_din = {{{{result_V_3_fu_999_p2}, {result_V_2_fu_956_p2}}, {result_V_1_fu_913_p2}}, {result_V_fu_870_p2}};

assign p_071_assign_1_cast5_s_fu_476_p1 = tmp_V_52_reg_1087;

assign p_1_fu_590_p2 = ((tmp_750_fu_586_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_2_fu_662_p2 = ((tmp_754_fu_658_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_3_fu_730_p2 = ((tmp_757_fu_726_p1 != 6'd0) ? 1'b1 : 1'b0);

assign p_s_fu_518_p2 = ((tmp_746_fu_514_p1 != 6'd0) ? 1'b1 : 1'b0);

assign result_V_1_fu_913_p2 = (macRegisters_1_V_fu_780_p2 + tmp_116_fu_876_p18);

assign result_V_2_fu_956_p2 = (macRegisters_2_V_fu_789_p2 + tmp_117_fu_919_p18);

assign result_V_3_fu_999_p2 = (macRegisters_3_V_fu_807_p2 + tmp_118_fu_962_p18);

assign result_V_fu_870_p2 = (macRegisters_0_V_fu_771_p2 + tmp_115_fu_833_p18);

assign sf_2_fu_449_p2 = (sf_mid2_fu_389_p3 + 7'd1);

assign sf_cast6_fu_433_p1 = sf_mid2_fu_389_p3;

assign sf_mid2_fu_389_p3 = ((tmp_362_fu_383_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_274);

assign start_out = real_start;

assign tmp1_cast_fu_768_p1 = $signed(tmp1_reg_1113);

assign tmp1_fu_548_p2 = ($signed(tmp_107_cast_fu_510_p1) + $signed(tmp_169_cast_cast_fu_544_p1));

assign tmp2_cast_fu_777_p1 = $signed(tmp2_reg_1118);

assign tmp2_fu_620_p2 = ($signed(tmp_164_1_cast_fu_582_p1) + $signed(tmp_169_1_cast_cast_fu_616_p1));

assign tmp3_cast_fu_786_p1 = $signed(tmp3_reg_1123);

assign tmp3_fu_692_p2 = ($signed(tmp_164_2_cast_fu_654_p1) + $signed(tmp_169_2_cast_cast_fu_688_p1));

assign tmp4_fu_801_p2 = (macRegisters_3_V_5_fu_172 + tmp_169_3_cast_fu_798_p1);

assign tmp_103_fu_437_p2 = (tmp_105_mid2_fu_409_p3 + sf_cast6_fu_433_p1);

assign tmp_104_fu_469_p1 = tmp_103_reg_1068;

assign tmp_105_fu_486_p0 = p_071_assign_1_cast5_s_fu_476_p1;

assign tmp_105_fu_486_p1 = weights5_m_weights_V_q0;

assign tmp_105_fu_486_p2 = ($signed(tmp_105_fu_486_p0) * $signed(tmp_105_fu_486_p1));

assign tmp_105_mid1_fu_401_p3 = {{tmp_743_fu_397_p1}, {6'd0}};

assign tmp_105_mid2_fu_409_p3 = ((tmp_106_mid_fu_371_p2[0:0] === 1'b1) ? tmp_105_mid1_fu_401_p3 : tmp_105_mid_fu_343_p3);

assign tmp_105_mid_fu_343_p3 = ((exitcond_flatten_fu_329_p2[0:0] === 1'b1) ? 10'd0 : tmp_s_fu_309_p3);

assign tmp_106_mid_fu_371_p2 = (tmp_361_fu_365_p2 & not_exitcond_flatten_fu_359_p2);

assign tmp_107_cast_fu_510_p1 = $signed(tmp_745_fu_500_p4);

assign tmp_108_fu_524_p2 = (tmp_744_fu_492_p3 | p_s_fu_518_p2);

assign tmp_109_fu_538_p2 = (tmp_747_fu_530_p3 & tmp_108_fu_524_p2);

assign tmp_112_fu_443_p2 = ((sf_mid2_fu_389_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_114_fu_795_p1 = $signed(tmp_113_reg_1128);

assign tmp_162_1_fu_558_p0 = p_071_assign_1_cast5_s_fu_476_p1;

assign tmp_162_1_fu_558_p1 = weights5_m_weights_V_1_q0;

assign tmp_162_1_fu_558_p2 = ($signed(tmp_162_1_fu_558_p0) * $signed(tmp_162_1_fu_558_p1));

assign tmp_162_2_fu_630_p0 = p_071_assign_1_cast5_s_fu_476_p1;

assign tmp_162_2_fu_630_p1 = weights5_m_weights_V_2_q0;

assign tmp_162_2_fu_630_p2 = ($signed(tmp_162_2_fu_630_p0) * $signed(tmp_162_2_fu_630_p1));

assign tmp_162_3_fu_702_p0 = tmp_V_52_reg_1087;

assign tmp_162_3_fu_702_p1 = weights5_m_weights_V_3_q0;

assign tmp_162_3_fu_702_p2 = ($signed(tmp_162_3_fu_702_p0) * $signed(tmp_162_3_fu_702_p1));

assign tmp_164_1_cast_fu_582_p1 = $signed(tmp_749_fu_572_p4);

assign tmp_164_2_cast_fu_654_p1 = $signed(tmp_753_fu_644_p4);

assign tmp_165_1_fu_596_p2 = (tmp_748_fu_564_p3 | p_1_fu_590_p2);

assign tmp_165_2_fu_668_p2 = (tmp_752_fu_636_p3 | p_2_fu_662_p2);

assign tmp_165_3_fu_736_p2 = (tmp_756_fu_708_p3 | p_3_fu_730_p2);

assign tmp_169_1_cast_cast_fu_616_p1 = tmp_169_1_fu_610_p2;

assign tmp_169_1_fu_610_p2 = (tmp_751_fu_602_p3 & tmp_165_1_fu_596_p2);

assign tmp_169_2_cast_cast_fu_688_p1 = tmp_169_2_fu_682_p2;

assign tmp_169_2_fu_682_p2 = (tmp_755_fu_674_p3 & tmp_165_2_fu_668_p2);

assign tmp_169_3_cast_fu_798_p1 = tmp_169_3_reg_1133;

assign tmp_169_3_fu_750_p2 = (tmp_758_fu_742_p3 & tmp_165_3_fu_736_p2);

assign tmp_169_cast_cast_fu_544_p1 = tmp_109_fu_538_p2;

assign tmp_361_fu_365_p2 = ((sf_reg_274 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_362_fu_383_p2 = (tmp_106_mid_fu_371_p2 | exitcond_flatten_fu_329_p2);

assign tmp_743_fu_397_p1 = nm_2_fu_377_p2[3:0];

assign tmp_744_fu_492_p3 = tmp_105_fu_486_p2[32'd11];

assign tmp_745_fu_500_p4 = {{tmp_105_fu_486_p2[12:7]}};

assign tmp_746_fu_514_p1 = tmp_105_fu_486_p2[5:0];

assign tmp_747_fu_530_p3 = tmp_105_fu_486_p2[32'd6];

assign tmp_748_fu_564_p3 = tmp_162_1_fu_558_p2[32'd11];

assign tmp_749_fu_572_p4 = {{tmp_162_1_fu_558_p2[12:7]}};

assign tmp_750_fu_586_p1 = tmp_162_1_fu_558_p2[5:0];

assign tmp_751_fu_602_p3 = tmp_162_1_fu_558_p2[32'd6];

assign tmp_752_fu_636_p3 = tmp_162_2_fu_630_p2[32'd11];

assign tmp_753_fu_644_p4 = {{tmp_162_2_fu_630_p2[12:7]}};

assign tmp_754_fu_658_p1 = tmp_162_2_fu_630_p2[5:0];

assign tmp_755_fu_674_p3 = tmp_162_2_fu_630_p2[32'd6];

assign tmp_756_fu_708_p3 = tmp_162_3_fu_702_p2[32'd11];

assign tmp_757_fu_726_p1 = tmp_162_3_fu_702_p2[5:0];

assign tmp_758_fu_742_p3 = tmp_162_3_fu_702_p2[32'd6];

assign tmp_fu_305_p1 = nm_reg_263[3:0];

assign tmp_s_fu_309_p3 = {{tmp_fu_305_p1}, {6'd0}};

assign weights5_m_weights_V_1_address0 = tmp_104_fu_469_p1;

assign weights5_m_weights_V_2_address0 = tmp_104_fu_469_p1;

assign weights5_m_weights_V_3_address0 = tmp_104_fu_469_p1;

assign weights5_m_weights_V_address0 = tmp_104_fu_469_p1;

endmodule //Conv1DMac_new_1
