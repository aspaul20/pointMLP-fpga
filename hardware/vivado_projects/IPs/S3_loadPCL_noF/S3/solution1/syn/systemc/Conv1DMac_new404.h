// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv1DMac_new404_HH_
#define _Conv1DMac_new404_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "computeS3_mux_646yd2_x.h"
#include "Conv1DMac_new404_Aem.h"
#include "Conv1DMac_new404_Bew.h"
#include "Conv1DMac_new404_CeG.h"
#include "Conv1DMac_new404_DeQ.h"

namespace ap_rtl {

struct Conv1DMac_new404 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const2;
    sc_signal< sc_lv<8> > ap_var_for_const3;


    // Module declarations
    Conv1DMac_new404(sc_module_name name);
    SC_HAS_PROCESS(Conv1DMac_new404);

    ~Conv1DMac_new404();

    sc_trace_file* mVcdFile;

    Conv1DMac_new404_Aem* weights12_m_weights_3_U;
    Conv1DMac_new404_Bew* weights12_m_weights_2_U;
    Conv1DMac_new404_CeG* weights12_m_weights_1_U;
    Conv1DMac_new404_DeQ* weights12_m_weights_s_U;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U61;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U62;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U63;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U64;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<14> > weights12_m_weights_3_address0;
    sc_signal< sc_logic > weights12_m_weights_3_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_3_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_2_address0;
    sc_signal< sc_logic > weights12_m_weights_2_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_2_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_1_address0;
    sc_signal< sc_logic > weights12_m_weights_1_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_1_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_s_address0;
    sc_signal< sc_logic > weights12_m_weights_s_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_s_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_1409;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_1409_pp0_iter1_reg;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > tmp_204_reg_1436;
    sc_signal< sc_lv<1> > tmp_204_reg_1436_pp0_iter3_reg;
    sc_signal< sc_lv<25> > indvar_flatten1_reg_189;
    sc_signal< sc_lv<16> > indvar_flatten_reg_200;
    sc_signal< sc_lv<7> > nm_reg_211;
    sc_signal< sc_lv<9> > sf_reg_222;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_265_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<25> > indvar_flatten_next1_fu_271_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > nm_t_mid2_fu_365_p3;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1418;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1418_pp0_iter1_reg;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1418_pp0_iter2_reg;
    sc_signal< sc_lv<7> > nm_mid2_fu_373_p3;
    sc_signal< sc_lv<14> > tmp_184_fu_385_p2;
    sc_signal< sc_lv<14> > tmp_184_reg_1431;
    sc_signal< sc_lv<1> > tmp_204_fu_391_p2;
    sc_signal< sc_lv<1> > tmp_204_reg_1436_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_204_reg_1436_pp0_iter2_reg;
    sc_signal< sc_lv<9> > sf_2_fu_397_p2;
    sc_signal< sc_lv<16> > indvar_flatten_next_fu_409_p3;
    sc_signal< sc_lv<8> > tmp_141_reg_1470;
    sc_signal< sc_lv<1> > tmp_980_reg_1475;
    sc_signal< sc_lv<1> > tmp_190_fu_492_p2;
    sc_signal< sc_lv<1> > tmp_190_reg_1480;
    sc_signal< sc_lv<8> > tmp_143_reg_1485;
    sc_signal< sc_lv<1> > tmp_983_reg_1490;
    sc_signal< sc_lv<1> > tmp_279_1_fu_562_p2;
    sc_signal< sc_lv<1> > tmp_279_1_reg_1495;
    sc_signal< sc_lv<8> > tmp_145_reg_1500;
    sc_signal< sc_lv<1> > tmp_986_reg_1505;
    sc_signal< sc_lv<1> > tmp_279_2_fu_632_p2;
    sc_signal< sc_lv<1> > tmp_279_2_reg_1510;
    sc_signal< sc_lv<8> > tmp_147_reg_1515;
    sc_signal< sc_lv<1> > tmp_989_reg_1520;
    sc_signal< sc_lv<1> > tmp_279_3_fu_702_p2;
    sc_signal< sc_lv<1> > tmp_279_3_reg_1525;
    sc_signal< sc_lv<8> > p_Val2_s_fu_949_p2;
    sc_signal< sc_lv<8> > p_Val2_s_reg_1530;
    sc_signal< sc_lv<8> > p_Val2_23_1_fu_1088_p2;
    sc_signal< sc_lv<8> > p_Val2_23_1_reg_1535;
    sc_signal< sc_lv<8> > p_Val2_23_2_fu_1227_p2;
    sc_signal< sc_lv<8> > p_Val2_23_2_reg_1540;
    sc_signal< sc_lv<8> > p_Val2_23_3_fu_1366_p2;
    sc_signal< sc_lv<8> > p_Val2_23_3_reg_1545;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<64> > tmp_185_fu_417_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > macRegisters_0_V_6_fu_108;
    sc_signal< sc_lv<8> > macRegisters_0_V_fu_734_p2;
    sc_signal< sc_lv<8> > macRegisters_1_V_6_fu_112;
    sc_signal< sc_lv<8> > macRegisters_1_V_fu_753_p2;
    sc_signal< sc_lv<8> > macRegisters_2_V_6_fu_116;
    sc_signal< sc_lv<8> > macRegisters_2_V_fu_772_p2;
    sc_signal< sc_lv<8> > macRegisters_3_V_6_fu_120;
    sc_signal< sc_lv<8> > macRegisters_3_V_fu_791_p2;
    sc_signal< sc_lv<6> > tmp_fu_253_p1;
    sc_signal< sc_lv<1> > exitcond_flatten1_fu_277_p2;
    sc_signal< sc_lv<14> > tmp_s_fu_257_p3;
    sc_signal< sc_lv<1> > tmp_886_fu_313_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_307_p2;
    sc_signal< sc_lv<7> > nm_mid_fu_283_p3;
    sc_signal< sc_lv<1> > tmp_213_mid_fu_319_p2;
    sc_signal< sc_lv<1> > tmp_861_fu_331_p2;
    sc_signal< sc_lv<7> > nm_2_fu_325_p2;
    sc_signal< sc_lv<6> > tmp_978_fu_345_p1;
    sc_signal< sc_lv<14> > tmp_212_mid1_fu_349_p3;
    sc_signal< sc_lv<14> > tmp_212_mid_fu_291_p3;
    sc_signal< sc_lv<6> > nm_t_mid_fu_299_p3;
    sc_signal< sc_lv<9> > sf_mid2_fu_337_p3;
    sc_signal< sc_lv<14> > sf_cast1_fu_381_p1;
    sc_signal< sc_lv<14> > tmp_212_mid2_fu_357_p3;
    sc_signal< sc_lv<16> > indvar_flatten_op_fu_403_p2;
    sc_signal< sc_lv<7> > p_Val2_s_189_fu_432_p0;
    sc_signal< sc_lv<8> > p_Val2_s_189_fu_432_p1;
    sc_signal< sc_lv<15> > p_08_cast_fu_424_p1;
    sc_signal< sc_lv<15> > p_Val2_s_189_fu_432_p2;
    sc_signal< sc_lv<1> > tmp_981_fu_464_p1;
    sc_signal< sc_lv<1> > tmp_979_fu_438_p3;
    sc_signal< sc_lv<5> > tmp_188_fu_474_p4;
    sc_signal< sc_lv<1> > tmp_187_fu_468_p2;
    sc_signal< sc_lv<6> > tmp_189_fu_484_p3;
    sc_signal< sc_lv<7> > p_Val2_1_fu_502_p0;
    sc_signal< sc_lv<8> > p_Val2_1_fu_502_p1;
    sc_signal< sc_lv<15> > p_Val2_1_fu_502_p2;
    sc_signal< sc_lv<1> > tmp_984_fu_534_p1;
    sc_signal< sc_lv<1> > tmp_982_fu_508_p3;
    sc_signal< sc_lv<5> > tmp_194_fu_544_p4;
    sc_signal< sc_lv<1> > tmp_193_fu_538_p2;
    sc_signal< sc_lv<6> > tmp_195_fu_554_p3;
    sc_signal< sc_lv<7> > p_Val2_2_fu_572_p0;
    sc_signal< sc_lv<8> > p_Val2_2_fu_572_p1;
    sc_signal< sc_lv<15> > p_Val2_2_fu_572_p2;
    sc_signal< sc_lv<1> > tmp_987_fu_604_p1;
    sc_signal< sc_lv<1> > tmp_985_fu_578_p3;
    sc_signal< sc_lv<5> > tmp_198_fu_614_p4;
    sc_signal< sc_lv<1> > tmp_197_fu_608_p2;
    sc_signal< sc_lv<6> > tmp_199_fu_624_p3;
    sc_signal< sc_lv<7> > p_Val2_3_fu_642_p0;
    sc_signal< sc_lv<8> > p_Val2_3_fu_642_p1;
    sc_signal< sc_lv<15> > p_Val2_3_fu_642_p2;
    sc_signal< sc_lv<1> > tmp_990_fu_674_p1;
    sc_signal< sc_lv<1> > tmp_988_fu_648_p3;
    sc_signal< sc_lv<5> > tmp_202_fu_684_p4;
    sc_signal< sc_lv<1> > tmp_201_fu_678_p2;
    sc_signal< sc_lv<6> > tmp_203_fu_694_p3;
    sc_signal< sc_lv<1> > qb_assign_2_fu_720_p2;
    sc_signal< sc_lv<8> > tmp_191_fu_724_p1;
    sc_signal< sc_lv<8> > tmp1_fu_728_p2;
    sc_signal< sc_lv<1> > qb_assign_2_1_fu_739_p2;
    sc_signal< sc_lv<8> > tmp_280_1_fu_743_p1;
    sc_signal< sc_lv<8> > tmp2_fu_747_p2;
    sc_signal< sc_lv<1> > qb_assign_2_2_fu_758_p2;
    sc_signal< sc_lv<8> > tmp_280_2_fu_762_p1;
    sc_signal< sc_lv<8> > tmp3_fu_766_p2;
    sc_signal< sc_lv<1> > qb_assign_2_3_fu_777_p2;
    sc_signal< sc_lv<8> > tmp_280_3_fu_781_p1;
    sc_signal< sc_lv<8> > tmp4_fu_785_p2;
    sc_signal< sc_lv<8> > tmp_148_fu_816_p66;
    sc_signal< sc_lv<8> > tmp_149_fu_955_p66;
    sc_signal< sc_lv<8> > tmp_150_fu_1094_p66;
    sc_signal< sc_lv<8> > tmp_151_fu_1233_p66;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<25> ap_const_lv25_1000000;
    static const sc_lv<25> ap_const_lv25_1;
    static const sc_lv<16> ap_const_lv16_4000;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<9> ap_const_lv9_FF;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_FD;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten1_fu_277_p2();
    void thread_exitcond_flatten_fu_265_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_indvar_flatten_next1_fu_271_p2();
    void thread_indvar_flatten_next_fu_409_p3();
    void thread_indvar_flatten_op_fu_403_p2();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_fu_734_p2();
    void thread_macRegisters_1_V_fu_753_p2();
    void thread_macRegisters_2_V_fu_772_p2();
    void thread_macRegisters_3_V_fu_791_p2();
    void thread_nm_2_fu_325_p2();
    void thread_nm_mid2_fu_373_p3();
    void thread_nm_mid_fu_283_p3();
    void thread_nm_t_mid2_fu_365_p3();
    void thread_nm_t_mid_fu_299_p3();
    void thread_not_exitcond_flatten_fu_307_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_08_cast_fu_424_p1();
    void thread_p_Val2_1_fu_502_p0();
    void thread_p_Val2_1_fu_502_p1();
    void thread_p_Val2_1_fu_502_p2();
    void thread_p_Val2_23_1_fu_1088_p2();
    void thread_p_Val2_23_2_fu_1227_p2();
    void thread_p_Val2_23_3_fu_1366_p2();
    void thread_p_Val2_2_fu_572_p0();
    void thread_p_Val2_2_fu_572_p1();
    void thread_p_Val2_2_fu_572_p2();
    void thread_p_Val2_3_fu_642_p0();
    void thread_p_Val2_3_fu_642_p1();
    void thread_p_Val2_3_fu_642_p2();
    void thread_p_Val2_s_189_fu_432_p0();
    void thread_p_Val2_s_189_fu_432_p1();
    void thread_p_Val2_s_189_fu_432_p2();
    void thread_p_Val2_s_fu_949_p2();
    void thread_qb_assign_2_1_fu_739_p2();
    void thread_qb_assign_2_2_fu_758_p2();
    void thread_qb_assign_2_3_fu_777_p2();
    void thread_qb_assign_2_fu_720_p2();
    void thread_real_start();
    void thread_sf_2_fu_397_p2();
    void thread_sf_cast1_fu_381_p1();
    void thread_sf_mid2_fu_337_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_fu_728_p2();
    void thread_tmp2_fu_747_p2();
    void thread_tmp3_fu_766_p2();
    void thread_tmp4_fu_785_p2();
    void thread_tmp_184_fu_385_p2();
    void thread_tmp_185_fu_417_p1();
    void thread_tmp_187_fu_468_p2();
    void thread_tmp_188_fu_474_p4();
    void thread_tmp_189_fu_484_p3();
    void thread_tmp_190_fu_492_p2();
    void thread_tmp_191_fu_724_p1();
    void thread_tmp_193_fu_538_p2();
    void thread_tmp_194_fu_544_p4();
    void thread_tmp_195_fu_554_p3();
    void thread_tmp_197_fu_608_p2();
    void thread_tmp_198_fu_614_p4();
    void thread_tmp_199_fu_624_p3();
    void thread_tmp_201_fu_678_p2();
    void thread_tmp_202_fu_684_p4();
    void thread_tmp_203_fu_694_p3();
    void thread_tmp_204_fu_391_p2();
    void thread_tmp_212_mid1_fu_349_p3();
    void thread_tmp_212_mid2_fu_357_p3();
    void thread_tmp_212_mid_fu_291_p3();
    void thread_tmp_213_mid_fu_319_p2();
    void thread_tmp_279_1_fu_562_p2();
    void thread_tmp_279_2_fu_632_p2();
    void thread_tmp_279_3_fu_702_p2();
    void thread_tmp_280_1_fu_743_p1();
    void thread_tmp_280_2_fu_762_p1();
    void thread_tmp_280_3_fu_781_p1();
    void thread_tmp_861_fu_331_p2();
    void thread_tmp_886_fu_313_p2();
    void thread_tmp_978_fu_345_p1();
    void thread_tmp_979_fu_438_p3();
    void thread_tmp_981_fu_464_p1();
    void thread_tmp_982_fu_508_p3();
    void thread_tmp_984_fu_534_p1();
    void thread_tmp_985_fu_578_p3();
    void thread_tmp_987_fu_604_p1();
    void thread_tmp_988_fu_648_p3();
    void thread_tmp_990_fu_674_p1();
    void thread_tmp_fu_253_p1();
    void thread_tmp_s_fu_257_p3();
    void thread_weights12_m_weights_1_address0();
    void thread_weights12_m_weights_1_ce0();
    void thread_weights12_m_weights_2_address0();
    void thread_weights12_m_weights_2_ce0();
    void thread_weights12_m_weights_3_address0();
    void thread_weights12_m_weights_3_ce0();
    void thread_weights12_m_weights_s_address0();
    void thread_weights12_m_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
