-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new398 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new398 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights6_m_weights_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights6_m_weights_V_ce0 : STD_LOGIC;
    signal weights6_m_weights_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights6_m_weights_V_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights6_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights6_m_weights_V_1_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights6_m_weights_V_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights6_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights6_m_weights_V_2_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights6_m_weights_V_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights6_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights6_m_weights_V_3_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten5_reg_1167 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten5_reg_1167_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_82_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1194_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten5_reg_195 : STD_LOGIC_VECTOR (23 downto 0);
    signal indvar_flatten_reg_206 : STD_LOGIC_VECTOR (13 downto 0);
    signal nm_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal sf_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten5_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next5_fu_277_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_371_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1176 : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1176_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1176_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_mid2_fu_379_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_fu_391_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_reg_1189 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_82_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1194_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1194_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_fu_415_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_1228 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_340_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_reg_1238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_reg_1243 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_343_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_1_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_2_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_2_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_reg_1273 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_349_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_3_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_899_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_reg_1288 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_1_fu_974_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_1_reg_1293 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_2_fu_1049_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_2_reg_1298 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_3_fu_1124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_3_reg_1303 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_71_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_3_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_3_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_3_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_3_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_259_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_263_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_291_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_mid_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_272_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_331_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_338_fu_351_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_mid1_fu_355_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_67_mid_fu_297_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_t_mid_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_mid2_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sf_cast1_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_67_mid2_fu_363_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_op_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_08_cast4_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_08_cast4_cast_fu_434_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_442_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_341_fu_474_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_339_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_484_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_494_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_1_fu_512_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_1_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_08_cast4_fu_430_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_1_fu_512_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_344_fu_544_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_342_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_554_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_564_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_2_fu_582_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_2_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_582_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_347_fu_614_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_345_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_624_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_84_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_634_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_fu_652_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_3_fu_652_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_652_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_350_fu_684_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_348_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_694_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_704_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal qb_assign_1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_730_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_741_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_1_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_2_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_2_fu_776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_3_fu_795_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_830_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_905_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_980_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_1055_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS2_mux_325yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new398_udo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new398_vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component Conv1DMac_new398_wdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component Conv1DMac_new398_xdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    weights6_m_weights_V_U : component Conv1DMac_new398_udo
    generic map (
        DataWidth => 6,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights6_m_weights_V_address0,
        ce0 => weights6_m_weights_V_ce0,
        q0 => weights6_m_weights_V_q0);

    weights6_m_weights_V_1_U : component Conv1DMac_new398_vdy
    generic map (
        DataWidth => 7,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights6_m_weights_V_1_address0,
        ce0 => weights6_m_weights_V_1_ce0,
        q0 => weights6_m_weights_V_1_q0);

    weights6_m_weights_V_2_U : component Conv1DMac_new398_wdI
    generic map (
        DataWidth => 7,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights6_m_weights_V_2_address0,
        ce0 => weights6_m_weights_V_2_ce0,
        q0 => weights6_m_weights_V_2_q0);

    weights6_m_weights_V_3_U : component Conv1DMac_new398_xdS
    generic map (
        DataWidth => 7,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights6_m_weights_V_3_address0,
        ce0 => weights6_m_weights_V_3_ce0,
        q0 => weights6_m_weights_V_3_q0);

    computeS2_mux_325yd2_U43 : component computeS2_mux_325yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_FE,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_1,
        din6 => ap_const_lv8_FF,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_FF,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_FF,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_FF,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_1,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_FF,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_FF,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1176_pp0_iter2_reg,
        dout => tmp_95_fu_830_p34);

    computeS2_mux_325yd2_U44 : component computeS2_mux_325yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_1,
        din2 => ap_const_lv8_FE,
        din3 => ap_const_lv8_FF,
        din4 => ap_const_lv8_FE,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_FF,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_FF,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_FF,
        din18 => ap_const_lv8_FF,
        din19 => ap_const_lv8_FF,
        din20 => ap_const_lv8_FF,
        din21 => ap_const_lv8_FF,
        din22 => ap_const_lv8_FE,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_FF,
        din26 => ap_const_lv8_FE,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1176_pp0_iter2_reg,
        dout => tmp_96_fu_905_p34);

    computeS2_mux_325yd2_U45 : component computeS2_mux_325yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_FF,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_FF,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_FF,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_FE,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_FF,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1176_pp0_iter2_reg,
        dout => tmp_97_fu_980_p34);

    computeS2_mux_325yd2_U46 : component computeS2_mux_325yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_FE,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_FF,
        din8 => ap_const_lv8_1,
        din9 => ap_const_lv8_FF,
        din10 => ap_const_lv8_FF,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_FF,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_FF,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_FF,
        din27 => ap_const_lv8_FF,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1176_pp0_iter2_reg,
        dout => tmp_98_fu_1055_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten5_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_195 <= indvar_flatten_next5_fu_277_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten5_reg_195 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_206 <= indvar_flatten_next_fu_415_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_206 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_3_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_3_fu_114 <= macRegisters_0_V_fu_747_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_0_V_3_fu_114 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_3_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_3_fu_118 <= macRegisters_1_V_fu_767_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_1_V_3_fu_118 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_3_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_3_fu_122 <= macRegisters_2_V_fu_786_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_2_V_3_fu_122 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_3_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_3_fu_126 <= macRegisters_3_V_fu_805_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_3_V_3_fu_126 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_217 <= nm_mid2_fu_379_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_217 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sf_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_228 <= sf_1_fu_403_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_228 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten5_reg_1167 <= exitcond_flatten5_fu_271_p2;
                exitcond_flatten5_reg_1167_pp0_iter1_reg <= exitcond_flatten5_reg_1167;
                nm_t_mid2_reg_1176_pp0_iter1_reg <= nm_t_mid2_reg_1176;
                tmp_82_reg_1194_pp0_iter1_reg <= tmp_82_reg_1194;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1176 <= nm_t_mid2_fu_371_p3;
                tmp_70_reg_1189 <= tmp_70_fu_391_p2;
                tmp_82_reg_1194 <= tmp_82_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1176_pp0_iter2_reg <= nm_t_mid2_reg_1176_pp0_iter1_reg;
                tmp_82_reg_1194_pp0_iter2_reg <= tmp_82_reg_1194_pp0_iter1_reg;
                tmp_82_reg_1194_pp0_iter3_reg <= tmp_82_reg_1194_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1194_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_20_1_reg_1293 <= p_Val2_20_1_fu_974_p2;
                p_Val2_20_2_reg_1298 <= p_Val2_20_2_fu_1049_p2;
                p_Val2_20_3_reg_1303 <= p_Val2_20_3_fu_1124_p2;
                p_Val2_7_reg_1288 <= p_Val2_7_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_203_1_reg_1253 <= tmp_203_1_fu_572_p2;
                tmp_203_2_reg_1268 <= tmp_203_2_fu_642_p2;
                tmp_203_3_reg_1283 <= tmp_203_3_fu_712_p2;
                tmp_340_reg_1233 <= p_Val2_s_fu_442_p2(6 downto 6);
                tmp_343_reg_1248 <= p_Val2_1_fu_512_p2(6 downto 6);
                tmp_346_reg_1263 <= p_Val2_2_fu_582_p2(6 downto 6);
                tmp_349_reg_1278 <= p_Val2_3_fu_652_p2(6 downto 6);
                tmp_76_reg_1238 <= tmp_76_fu_502_p2;
                tmp_92_reg_1243 <= p_Val2_1_fu_512_p2(14 downto 7);
                tmp_93_reg_1258 <= p_Val2_2_fu_582_p2(14 downto 7);
                tmp_94_reg_1273 <= p_Val2_3_fu_652_p2(14 downto 7);
                tmp_s_reg_1228 <= p_Val2_s_fu_442_p2(13 downto 7);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, exitcond_flatten5_fu_271_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten5_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1167_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_82_reg_1194_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1167_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_82_reg_1194_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1167_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_82_reg_1194_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(in_V_V_empty_n, exitcond_flatten5_reg_1167_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(out_V_V_full_n, tmp_82_reg_1194_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten5_fu_271_p2)
    begin
        if ((exitcond_flatten5_fu_271_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten5_fu_271_p2 <= "1" when (indvar_flatten5_reg_195 = ap_const_lv24_800000) else "0";
    exitcond_flatten_fu_283_p2 <= "1" when (indvar_flatten_reg_206 = ap_const_lv14_1000) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_flatten5_reg_1167_pp0_iter1_reg)
    begin
        if (((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1167_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten5_reg_1167_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next5_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(indvar_flatten5_reg_195));
    indvar_flatten_next_fu_415_p3 <= 
        ap_const_lv14_1 when (exitcond_flatten_fu_283_p2(0) = '1') else 
        indvar_flatten_op_fu_409_p2;
    indvar_flatten_op_fu_409_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_206) + unsigned(ap_const_lv14_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_747_p2 <= std_logic_vector(signed(tmp_91_fu_730_p1) + signed(tmp1_fu_741_p2));
    macRegisters_1_V_fu_767_p2 <= std_logic_vector(unsigned(tmp_92_reg_1243) + unsigned(tmp2_fu_761_p2));
    macRegisters_2_V_fu_786_p2 <= std_logic_vector(unsigned(tmp_93_reg_1258) + unsigned(tmp3_fu_780_p2));
    macRegisters_3_V_fu_805_p2 <= std_logic_vector(unsigned(tmp_94_reg_1273) + unsigned(tmp4_fu_799_p2));
    nm_1_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(nm_mid_fu_289_p3));
    nm_mid2_fu_379_p3 <= 
        nm_1_fu_331_p2 when (tmp_68_mid_fu_325_p2(0) = '1') else 
        nm_mid_fu_289_p3;
    nm_mid_fu_289_p3 <= 
        ap_const_lv6_0 when (exitcond_flatten_fu_283_p2(0) = '1') else 
        nm_reg_217;
    nm_t_mid2_fu_371_p3 <= 
        tmp_338_fu_351_p1 when (tmp_68_mid_fu_325_p2(0) = '1') else 
        nm_t_mid_fu_305_p3;
    nm_t_mid_fu_305_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_283_p2(0) = '1') else 
        tmp_fu_259_p1;
    not_exitcond_flatten_fu_313_p2 <= (exitcond_flatten_fu_283_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, tmp_82_reg_1194_pp0_iter3_reg)
    begin
        if (((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_20_3_reg_1303 & p_Val2_20_2_reg_1298) & p_Val2_20_1_reg_1293) & p_Val2_7_reg_1288);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, tmp_82_reg_1194_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_82_reg_1194_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_08_cast4_cast_fu_434_p0 <= in_V_V_dout;
    p_08_cast4_fu_430_p0 <= in_V_V_dout;
        p_08_cast4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_08_cast4_fu_430_p0),15));

    p_Val2_1_fu_512_p0 <= weights6_m_weights_V_1_q0;
    p_Val2_1_fu_512_p1 <= p_08_cast4_fu_430_p1(8 - 1 downto 0);
    p_Val2_1_fu_512_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_512_p0) * signed(p_Val2_1_fu_512_p1))), 15));
    p_Val2_20_1_fu_974_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_767_p2) + unsigned(tmp_96_fu_905_p34));
    p_Val2_20_2_fu_1049_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_786_p2) + unsigned(tmp_97_fu_980_p34));
    p_Val2_20_3_fu_1124_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_805_p2) + unsigned(tmp_98_fu_1055_p34));
    p_Val2_2_fu_582_p0 <= weights6_m_weights_V_2_q0;
    p_Val2_2_fu_582_p1 <= p_08_cast4_fu_430_p1(8 - 1 downto 0);
    p_Val2_2_fu_582_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_582_p0) * signed(p_Val2_2_fu_582_p1))), 15));
    p_Val2_3_fu_652_p0 <= weights6_m_weights_V_3_q0;
    p_Val2_3_fu_652_p1 <= p_08_cast4_fu_430_p1(8 - 1 downto 0);
    p_Val2_3_fu_652_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_652_p0) * signed(p_Val2_3_fu_652_p1))), 15));
    p_Val2_7_fu_899_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_747_p2) + unsigned(tmp_95_fu_830_p34));
    p_Val2_s_fu_442_p0 <= weights6_m_weights_V_q0;
    p_Val2_s_fu_442_p1 <= p_08_cast4_cast_fu_434_p0;
    p_Val2_s_fu_442_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_442_p0) * signed(p_Val2_s_fu_442_p1))), 14));
    qb_assign_1_1_fu_753_p2 <= (tmp_343_reg_1248 and tmp_203_1_reg_1253);
    qb_assign_1_2_fu_772_p2 <= (tmp_346_reg_1263 and tmp_203_2_reg_1268);
    qb_assign_1_3_fu_791_p2 <= (tmp_349_reg_1278 and tmp_203_3_reg_1283);
    qb_assign_1_fu_733_p2 <= (tmp_76_reg_1238 and tmp_340_reg_1233);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_403_p2 <= std_logic_vector(unsigned(sf_mid2_fu_343_p3) + unsigned(ap_const_lv8_1));
    sf_cast1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_343_p3),12));
    sf_mid2_fu_343_p3 <= 
        ap_const_lv8_0 when (tmp_272_fu_337_p2(0) = '1') else 
        sf_reg_228;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_741_p2 <= std_logic_vector(unsigned(tmp_77_fu_737_p1) + unsigned(macRegisters_0_V_3_fu_114));
    tmp2_fu_761_p2 <= std_logic_vector(unsigned(tmp_204_1_fu_757_p1) + unsigned(macRegisters_1_V_3_fu_118));
    tmp3_fu_780_p2 <= std_logic_vector(unsigned(tmp_204_2_fu_776_p1) + unsigned(macRegisters_2_V_3_fu_122));
    tmp4_fu_799_p2 <= std_logic_vector(unsigned(tmp_204_3_fu_795_p1) + unsigned(macRegisters_3_V_3_fu_126));
    tmp_203_1_fu_572_p2 <= "0" when (tmp_81_fu_564_p3 = ap_const_lv6_0) else "1";
    tmp_203_2_fu_642_p2 <= "0" when (tmp_86_fu_634_p3 = ap_const_lv6_0) else "1";
    tmp_203_3_fu_712_p2 <= "0" when (tmp_90_fu_704_p3 = ap_const_lv6_0) else "1";
    tmp_204_1_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_1_fu_753_p2),8));
    tmp_204_2_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_2_fu_772_p2),8));
    tmp_204_3_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_3_fu_791_p2),8));
    tmp_272_fu_337_p2 <= (tmp_68_mid_fu_325_p2 or exitcond_flatten_fu_283_p2);
    tmp_291_fu_319_p2 <= "1" when (sf_reg_228 = ap_const_lv8_80) else "0";
    tmp_338_fu_351_p1 <= nm_1_fu_331_p2(5 - 1 downto 0);
    tmp_339_fu_448_p3 <= p_Val2_s_fu_442_p2(13 downto 13);
    tmp_341_fu_474_p1 <= p_Val2_s_fu_442_p2(1 - 1 downto 0);
    tmp_342_fu_518_p3 <= p_Val2_1_fu_512_p2(14 downto 14);
    tmp_344_fu_544_p1 <= p_Val2_1_fu_512_p2(1 - 1 downto 0);
    tmp_345_fu_588_p3 <= p_Val2_2_fu_582_p2(14 downto 14);
    tmp_347_fu_614_p1 <= p_Val2_2_fu_582_p2(1 - 1 downto 0);
    tmp_348_fu_658_p3 <= p_Val2_3_fu_652_p2(14 downto 14);
    tmp_350_fu_684_p1 <= p_Val2_3_fu_652_p2(1 - 1 downto 0);
    tmp_67_fu_263_p3 <= (tmp_fu_259_p1 & ap_const_lv7_0);
    tmp_67_mid1_fu_355_p3 <= (tmp_338_fu_351_p1 & ap_const_lv7_0);
    tmp_67_mid2_fu_363_p3 <= 
        tmp_67_mid1_fu_355_p3 when (tmp_68_mid_fu_325_p2(0) = '1') else 
        tmp_67_mid_fu_297_p3;
    tmp_67_mid_fu_297_p3 <= 
        ap_const_lv12_0 when (exitcond_flatten_fu_283_p2(0) = '1') else 
        tmp_67_fu_263_p3;
    tmp_68_mid_fu_325_p2 <= (tmp_291_fu_319_p2 and not_exitcond_flatten_fu_313_p2);
    tmp_70_fu_391_p2 <= std_logic_vector(unsigned(sf_cast1_fu_387_p1) + unsigned(tmp_67_mid2_fu_363_p3));
    tmp_71_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_reg_1189),64));
    tmp_73_fu_478_p2 <= (tmp_341_fu_474_p1 or tmp_339_fu_448_p3);
    tmp_74_fu_484_p4 <= p_Val2_s_fu_442_p2(5 downto 1);
    tmp_75_fu_494_p3 <= (tmp_74_fu_484_p4 & tmp_73_fu_478_p2);
    tmp_76_fu_502_p2 <= "0" when (tmp_75_fu_494_p3 = ap_const_lv6_0) else "1";
    tmp_77_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_fu_733_p2),8));
    tmp_79_fu_548_p2 <= (tmp_344_fu_544_p1 or tmp_342_fu_518_p3);
    tmp_80_fu_554_p4 <= p_Val2_1_fu_512_p2(5 downto 1);
    tmp_81_fu_564_p3 <= (tmp_80_fu_554_p4 & tmp_79_fu_548_p2);
    tmp_82_fu_397_p2 <= "1" when (sf_mid2_fu_343_p3 = ap_const_lv8_7F) else "0";
    tmp_84_fu_618_p2 <= (tmp_347_fu_614_p1 or tmp_345_fu_588_p3);
    tmp_85_fu_624_p4 <= p_Val2_2_fu_582_p2(5 downto 1);
    tmp_86_fu_634_p3 <= (tmp_85_fu_624_p4 & tmp_84_fu_618_p2);
    tmp_88_fu_688_p2 <= (tmp_350_fu_684_p1 or tmp_348_fu_658_p3);
    tmp_89_fu_694_p4 <= p_Val2_3_fu_652_p2(5 downto 1);
    tmp_90_fu_704_p3 <= (tmp_89_fu_694_p4 & tmp_88_fu_688_p2);
        tmp_91_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1228),8));

    tmp_fu_259_p1 <= nm_reg_217(5 - 1 downto 0);
    weights6_m_weights_V_1_address0 <= tmp_71_fu_423_p1(12 - 1 downto 0);

    weights6_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights6_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights6_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights6_m_weights_V_2_address0 <= tmp_71_fu_423_p1(12 - 1 downto 0);

    weights6_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights6_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights6_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights6_m_weights_V_3_address0 <= tmp_71_fu_423_p1(12 - 1 downto 0);

    weights6_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights6_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights6_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights6_m_weights_V_address0 <= tmp_71_fu_423_p1(12 - 1 downto 0);

    weights6_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights6_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights6_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
