// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv1DMac_new398_HH_
#define _Conv1DMac_new398_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "computeS2_mux_325yd2.h"
#include "Conv1DMac_new398_udo.h"
#include "Conv1DMac_new398_vdy.h"
#include "Conv1DMac_new398_wdI.h"
#include "Conv1DMac_new398_xdS.h"

namespace ap_rtl {

struct Conv1DMac_new398 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const2;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const3;


    // Module declarations
    Conv1DMac_new398(sc_module_name name);
    SC_HAS_PROCESS(Conv1DMac_new398);

    ~Conv1DMac_new398();

    sc_trace_file* mVcdFile;

    Conv1DMac_new398_udo* weights6_m_weights_V_U;
    Conv1DMac_new398_vdy* weights6_m_weights_V_1_U;
    Conv1DMac_new398_wdI* weights6_m_weights_V_2_U;
    Conv1DMac_new398_xdS* weights6_m_weights_V_3_U;
    computeS2_mux_325yd2<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_U43;
    computeS2_mux_325yd2<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_U44;
    computeS2_mux_325yd2<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_U45;
    computeS2_mux_325yd2<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_U46;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<12> > weights6_m_weights_V_address0;
    sc_signal< sc_logic > weights6_m_weights_V_ce0;
    sc_signal< sc_lv<6> > weights6_m_weights_V_q0;
    sc_signal< sc_lv<12> > weights6_m_weights_V_1_address0;
    sc_signal< sc_logic > weights6_m_weights_V_1_ce0;
    sc_signal< sc_lv<7> > weights6_m_weights_V_1_q0;
    sc_signal< sc_lv<12> > weights6_m_weights_V_2_address0;
    sc_signal< sc_logic > weights6_m_weights_V_2_ce0;
    sc_signal< sc_lv<7> > weights6_m_weights_V_2_q0;
    sc_signal< sc_lv<12> > weights6_m_weights_V_3_address0;
    sc_signal< sc_logic > weights6_m_weights_V_3_ce0;
    sc_signal< sc_lv<7> > weights6_m_weights_V_3_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten5_reg_1167;
    sc_signal< sc_lv<1> > exitcond_flatten5_reg_1167_pp0_iter1_reg;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > tmp_82_reg_1194;
    sc_signal< sc_lv<1> > tmp_82_reg_1194_pp0_iter3_reg;
    sc_signal< sc_lv<24> > indvar_flatten5_reg_195;
    sc_signal< sc_lv<14> > indvar_flatten_reg_206;
    sc_signal< sc_lv<6> > nm_reg_217;
    sc_signal< sc_lv<8> > sf_reg_228;
    sc_signal< sc_lv<1> > exitcond_flatten5_fu_271_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<24> > indvar_flatten_next5_fu_277_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > nm_t_mid2_fu_371_p3;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1176;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1176_pp0_iter1_reg;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1176_pp0_iter2_reg;
    sc_signal< sc_lv<6> > nm_mid2_fu_379_p3;
    sc_signal< sc_lv<12> > tmp_70_fu_391_p2;
    sc_signal< sc_lv<12> > tmp_70_reg_1189;
    sc_signal< sc_lv<1> > tmp_82_fu_397_p2;
    sc_signal< sc_lv<1> > tmp_82_reg_1194_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_82_reg_1194_pp0_iter2_reg;
    sc_signal< sc_lv<8> > sf_1_fu_403_p2;
    sc_signal< sc_lv<14> > indvar_flatten_next_fu_415_p3;
    sc_signal< sc_lv<7> > tmp_s_reg_1228;
    sc_signal< sc_lv<1> > tmp_340_reg_1233;
    sc_signal< sc_lv<1> > tmp_76_fu_502_p2;
    sc_signal< sc_lv<1> > tmp_76_reg_1238;
    sc_signal< sc_lv<8> > tmp_92_reg_1243;
    sc_signal< sc_lv<1> > tmp_343_reg_1248;
    sc_signal< sc_lv<1> > tmp_203_1_fu_572_p2;
    sc_signal< sc_lv<1> > tmp_203_1_reg_1253;
    sc_signal< sc_lv<8> > tmp_93_reg_1258;
    sc_signal< sc_lv<1> > tmp_346_reg_1263;
    sc_signal< sc_lv<1> > tmp_203_2_fu_642_p2;
    sc_signal< sc_lv<1> > tmp_203_2_reg_1268;
    sc_signal< sc_lv<8> > tmp_94_reg_1273;
    sc_signal< sc_lv<1> > tmp_349_reg_1278;
    sc_signal< sc_lv<1> > tmp_203_3_fu_712_p2;
    sc_signal< sc_lv<1> > tmp_203_3_reg_1283;
    sc_signal< sc_lv<8> > p_Val2_7_fu_899_p2;
    sc_signal< sc_lv<8> > p_Val2_7_reg_1288;
    sc_signal< sc_lv<8> > p_Val2_20_1_fu_974_p2;
    sc_signal< sc_lv<8> > p_Val2_20_1_reg_1293;
    sc_signal< sc_lv<8> > p_Val2_20_2_fu_1049_p2;
    sc_signal< sc_lv<8> > p_Val2_20_2_reg_1298;
    sc_signal< sc_lv<8> > p_Val2_20_3_fu_1124_p2;
    sc_signal< sc_lv<8> > p_Val2_20_3_reg_1303;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<64> > tmp_71_fu_423_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > macRegisters_0_V_3_fu_114;
    sc_signal< sc_lv<8> > macRegisters_0_V_fu_747_p2;
    sc_signal< sc_lv<8> > macRegisters_1_V_3_fu_118;
    sc_signal< sc_lv<8> > macRegisters_1_V_fu_767_p2;
    sc_signal< sc_lv<8> > macRegisters_2_V_3_fu_122;
    sc_signal< sc_lv<8> > macRegisters_2_V_fu_786_p2;
    sc_signal< sc_lv<8> > macRegisters_3_V_3_fu_126;
    sc_signal< sc_lv<8> > macRegisters_3_V_fu_805_p2;
    sc_signal< sc_lv<5> > tmp_fu_259_p1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_283_p2;
    sc_signal< sc_lv<12> > tmp_67_fu_263_p3;
    sc_signal< sc_lv<1> > tmp_291_fu_319_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_313_p2;
    sc_signal< sc_lv<6> > nm_mid_fu_289_p3;
    sc_signal< sc_lv<1> > tmp_68_mid_fu_325_p2;
    sc_signal< sc_lv<1> > tmp_272_fu_337_p2;
    sc_signal< sc_lv<6> > nm_1_fu_331_p2;
    sc_signal< sc_lv<5> > tmp_338_fu_351_p1;
    sc_signal< sc_lv<12> > tmp_67_mid1_fu_355_p3;
    sc_signal< sc_lv<12> > tmp_67_mid_fu_297_p3;
    sc_signal< sc_lv<5> > nm_t_mid_fu_305_p3;
    sc_signal< sc_lv<8> > sf_mid2_fu_343_p3;
    sc_signal< sc_lv<12> > sf_cast1_fu_387_p1;
    sc_signal< sc_lv<12> > tmp_67_mid2_fu_363_p3;
    sc_signal< sc_lv<14> > indvar_flatten_op_fu_409_p2;
    sc_signal< sc_lv<8> > p_08_cast4_fu_430_p0;
    sc_signal< sc_lv<8> > p_08_cast4_cast_fu_434_p0;
    sc_signal< sc_lv<6> > p_Val2_s_fu_442_p0;
    sc_signal< sc_lv<8> > p_Val2_s_fu_442_p1;
    sc_signal< sc_lv<14> > p_Val2_s_fu_442_p2;
    sc_signal< sc_lv<1> > tmp_341_fu_474_p1;
    sc_signal< sc_lv<1> > tmp_339_fu_448_p3;
    sc_signal< sc_lv<5> > tmp_74_fu_484_p4;
    sc_signal< sc_lv<1> > tmp_73_fu_478_p2;
    sc_signal< sc_lv<6> > tmp_75_fu_494_p3;
    sc_signal< sc_lv<7> > p_Val2_1_fu_512_p0;
    sc_signal< sc_lv<8> > p_Val2_1_fu_512_p1;
    sc_signal< sc_lv<15> > p_08_cast4_fu_430_p1;
    sc_signal< sc_lv<15> > p_Val2_1_fu_512_p2;
    sc_signal< sc_lv<1> > tmp_344_fu_544_p1;
    sc_signal< sc_lv<1> > tmp_342_fu_518_p3;
    sc_signal< sc_lv<5> > tmp_80_fu_554_p4;
    sc_signal< sc_lv<1> > tmp_79_fu_548_p2;
    sc_signal< sc_lv<6> > tmp_81_fu_564_p3;
    sc_signal< sc_lv<7> > p_Val2_2_fu_582_p0;
    sc_signal< sc_lv<8> > p_Val2_2_fu_582_p1;
    sc_signal< sc_lv<15> > p_Val2_2_fu_582_p2;
    sc_signal< sc_lv<1> > tmp_347_fu_614_p1;
    sc_signal< sc_lv<1> > tmp_345_fu_588_p3;
    sc_signal< sc_lv<5> > tmp_85_fu_624_p4;
    sc_signal< sc_lv<1> > tmp_84_fu_618_p2;
    sc_signal< sc_lv<6> > tmp_86_fu_634_p3;
    sc_signal< sc_lv<7> > p_Val2_3_fu_652_p0;
    sc_signal< sc_lv<8> > p_Val2_3_fu_652_p1;
    sc_signal< sc_lv<15> > p_Val2_3_fu_652_p2;
    sc_signal< sc_lv<1> > tmp_350_fu_684_p1;
    sc_signal< sc_lv<1> > tmp_348_fu_658_p3;
    sc_signal< sc_lv<5> > tmp_89_fu_694_p4;
    sc_signal< sc_lv<1> > tmp_88_fu_688_p2;
    sc_signal< sc_lv<6> > tmp_90_fu_704_p3;
    sc_signal< sc_lv<1> > qb_assign_1_fu_733_p2;
    sc_signal< sc_lv<8> > tmp_77_fu_737_p1;
    sc_signal< sc_lv<8> > tmp_91_fu_730_p1;
    sc_signal< sc_lv<8> > tmp1_fu_741_p2;
    sc_signal< sc_lv<1> > qb_assign_1_1_fu_753_p2;
    sc_signal< sc_lv<8> > tmp_204_1_fu_757_p1;
    sc_signal< sc_lv<8> > tmp2_fu_761_p2;
    sc_signal< sc_lv<1> > qb_assign_1_2_fu_772_p2;
    sc_signal< sc_lv<8> > tmp_204_2_fu_776_p1;
    sc_signal< sc_lv<8> > tmp3_fu_780_p2;
    sc_signal< sc_lv<1> > qb_assign_1_3_fu_791_p2;
    sc_signal< sc_lv<8> > tmp_204_3_fu_795_p1;
    sc_signal< sc_lv<8> > tmp4_fu_799_p2;
    sc_signal< sc_lv<8> > tmp_95_fu_830_p34;
    sc_signal< sc_lv<8> > tmp_96_fu_905_p34;
    sc_signal< sc_lv<8> > tmp_97_fu_980_p34;
    sc_signal< sc_lv<8> > tmp_98_fu_1055_p34;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<24> ap_const_lv24_800000;
    static const sc_lv<24> ap_const_lv24_1;
    static const sc_lv<14> ap_const_lv14_1000;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<8> ap_const_lv8_FE;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten5_fu_271_p2();
    void thread_exitcond_flatten_fu_283_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_indvar_flatten_next5_fu_277_p2();
    void thread_indvar_flatten_next_fu_415_p3();
    void thread_indvar_flatten_op_fu_409_p2();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_fu_747_p2();
    void thread_macRegisters_1_V_fu_767_p2();
    void thread_macRegisters_2_V_fu_786_p2();
    void thread_macRegisters_3_V_fu_805_p2();
    void thread_nm_1_fu_331_p2();
    void thread_nm_mid2_fu_379_p3();
    void thread_nm_mid_fu_289_p3();
    void thread_nm_t_mid2_fu_371_p3();
    void thread_nm_t_mid_fu_305_p3();
    void thread_not_exitcond_flatten_fu_313_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_08_cast4_cast_fu_434_p0();
    void thread_p_08_cast4_fu_430_p0();
    void thread_p_08_cast4_fu_430_p1();
    void thread_p_Val2_1_fu_512_p0();
    void thread_p_Val2_1_fu_512_p1();
    void thread_p_Val2_1_fu_512_p2();
    void thread_p_Val2_20_1_fu_974_p2();
    void thread_p_Val2_20_2_fu_1049_p2();
    void thread_p_Val2_20_3_fu_1124_p2();
    void thread_p_Val2_2_fu_582_p0();
    void thread_p_Val2_2_fu_582_p1();
    void thread_p_Val2_2_fu_582_p2();
    void thread_p_Val2_3_fu_652_p0();
    void thread_p_Val2_3_fu_652_p1();
    void thread_p_Val2_3_fu_652_p2();
    void thread_p_Val2_7_fu_899_p2();
    void thread_p_Val2_s_fu_442_p0();
    void thread_p_Val2_s_fu_442_p1();
    void thread_p_Val2_s_fu_442_p2();
    void thread_qb_assign_1_1_fu_753_p2();
    void thread_qb_assign_1_2_fu_772_p2();
    void thread_qb_assign_1_3_fu_791_p2();
    void thread_qb_assign_1_fu_733_p2();
    void thread_real_start();
    void thread_sf_1_fu_403_p2();
    void thread_sf_cast1_fu_387_p1();
    void thread_sf_mid2_fu_343_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_fu_741_p2();
    void thread_tmp2_fu_761_p2();
    void thread_tmp3_fu_780_p2();
    void thread_tmp4_fu_799_p2();
    void thread_tmp_203_1_fu_572_p2();
    void thread_tmp_203_2_fu_642_p2();
    void thread_tmp_203_3_fu_712_p2();
    void thread_tmp_204_1_fu_757_p1();
    void thread_tmp_204_2_fu_776_p1();
    void thread_tmp_204_3_fu_795_p1();
    void thread_tmp_272_fu_337_p2();
    void thread_tmp_291_fu_319_p2();
    void thread_tmp_338_fu_351_p1();
    void thread_tmp_339_fu_448_p3();
    void thread_tmp_341_fu_474_p1();
    void thread_tmp_342_fu_518_p3();
    void thread_tmp_344_fu_544_p1();
    void thread_tmp_345_fu_588_p3();
    void thread_tmp_347_fu_614_p1();
    void thread_tmp_348_fu_658_p3();
    void thread_tmp_350_fu_684_p1();
    void thread_tmp_67_fu_263_p3();
    void thread_tmp_67_mid1_fu_355_p3();
    void thread_tmp_67_mid2_fu_363_p3();
    void thread_tmp_67_mid_fu_297_p3();
    void thread_tmp_68_mid_fu_325_p2();
    void thread_tmp_70_fu_391_p2();
    void thread_tmp_71_fu_423_p1();
    void thread_tmp_73_fu_478_p2();
    void thread_tmp_74_fu_484_p4();
    void thread_tmp_75_fu_494_p3();
    void thread_tmp_76_fu_502_p2();
    void thread_tmp_77_fu_737_p1();
    void thread_tmp_79_fu_548_p2();
    void thread_tmp_80_fu_554_p4();
    void thread_tmp_81_fu_564_p3();
    void thread_tmp_82_fu_397_p2();
    void thread_tmp_84_fu_618_p2();
    void thread_tmp_85_fu_624_p4();
    void thread_tmp_86_fu_634_p3();
    void thread_tmp_88_fu_688_p2();
    void thread_tmp_89_fu_694_p4();
    void thread_tmp_90_fu_704_p3();
    void thread_tmp_91_fu_730_p1();
    void thread_tmp_fu_259_p1();
    void thread_weights6_m_weights_V_1_address0();
    void thread_weights6_m_weights_V_1_ce0();
    void thread_weights6_m_weights_V_2_address0();
    void thread_weights6_m_weights_V_2_ce0();
    void thread_weights6_m_weights_V_3_address0();
    void thread_weights6_m_weights_V_3_ce0();
    void thread_weights6_m_weights_V_address0();
    void thread_weights6_m_weights_V_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
