// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv1DMac_new_1_HH_
#define _Conv1DMac_new_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "computeS2_mux_325yd2_x_x_x_x.h"
#include "Conv1DMac_new_1_wQgW.h"
#include "Conv1DMac_new_1_wRg6.h"
#include "Conv1DMac_new_1_wShg.h"
#include "Conv1DMac_new_1_wThq.h"

namespace ap_rtl {

struct Conv1DMac_new_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const2;


    // Module declarations
    Conv1DMac_new_1(sc_module_name name);
    SC_HAS_PROCESS(Conv1DMac_new_1);

    ~Conv1DMac_new_1();

    sc_trace_file* mVcdFile;

    Conv1DMac_new_1_wQgW* weights10_m_weights_3_U;
    Conv1DMac_new_1_wRg6* weights10_m_weights_2_U;
    Conv1DMac_new_1_wShg* weights10_m_weights_1_U;
    Conv1DMac_new_1_wThq* weights10_m_weights_s_U;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U125;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U126;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U127;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U128;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<12> > weights10_m_weights_3_address0;
    sc_signal< sc_logic > weights10_m_weights_3_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_3_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_2_address0;
    sc_signal< sc_logic > weights10_m_weights_2_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_2_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_1_address0;
    sc_signal< sc_logic > weights10_m_weights_1_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_1_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_s_address0;
    sc_signal< sc_logic > weights10_m_weights_s_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_s_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten6_reg_1149;
    sc_signal< sc_lv<1> > exitcond_flatten6_reg_1149_pp0_iter1_reg;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > tmp_100_reg_1176;
    sc_signal< sc_lv<1> > tmp_100_reg_1176_pp0_iter3_reg;
    sc_signal< sc_lv<20> > indvar_flatten6_reg_185;
    sc_signal< sc_lv<14> > indvar_flatten_reg_196;
    sc_signal< sc_lv<6> > nm_reg_207;
    sc_signal< sc_lv<8> > sf_reg_218;
    sc_signal< sc_lv<1> > exitcond_flatten6_fu_261_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<20> > indvar_flatten_next6_fu_267_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > nm_t_mid2_fu_361_p3;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1158;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1158_pp0_iter1_reg;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1158_pp0_iter2_reg;
    sc_signal< sc_lv<6> > nm_mid2_fu_369_p3;
    sc_signal< sc_lv<12> > tmp_98_fu_381_p2;
    sc_signal< sc_lv<12> > tmp_98_reg_1171;
    sc_signal< sc_lv<1> > tmp_100_fu_387_p2;
    sc_signal< sc_lv<1> > tmp_100_reg_1176_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_100_reg_1176_pp0_iter2_reg;
    sc_signal< sc_lv<8> > sf_2_fu_393_p2;
    sc_signal< sc_lv<14> > indvar_flatten_next_fu_405_p3;
    sc_signal< sc_lv<8> > tmp_101_reg_1210;
    sc_signal< sc_lv<1> > tmp_353_reg_1215;
    sc_signal< sc_lv<1> > tmp_106_fu_488_p2;
    sc_signal< sc_lv<1> > tmp_106_reg_1220;
    sc_signal< sc_lv<8> > tmp_108_reg_1225;
    sc_signal< sc_lv<1> > tmp_356_reg_1230;
    sc_signal< sc_lv<1> > tmp_227_1_fu_558_p2;
    sc_signal< sc_lv<1> > tmp_227_1_reg_1235;
    sc_signal< sc_lv<8> > tmp_113_reg_1240;
    sc_signal< sc_lv<1> > tmp_359_reg_1245;
    sc_signal< sc_lv<1> > tmp_227_2_fu_628_p2;
    sc_signal< sc_lv<1> > tmp_227_2_reg_1250;
    sc_signal< sc_lv<8> > tmp_118_reg_1255;
    sc_signal< sc_lv<1> > tmp_362_reg_1260;
    sc_signal< sc_lv<1> > tmp_227_3_fu_698_p2;
    sc_signal< sc_lv<1> > tmp_227_3_reg_1265;
    sc_signal< sc_lv<8> > p_Val2_s_fu_881_p2;
    sc_signal< sc_lv<8> > p_Val2_s_reg_1270;
    sc_signal< sc_lv<8> > p_Val2_22_1_fu_956_p2;
    sc_signal< sc_lv<8> > p_Val2_22_1_reg_1275;
    sc_signal< sc_lv<8> > p_Val2_22_2_fu_1031_p2;
    sc_signal< sc_lv<8> > p_Val2_22_2_reg_1280;
    sc_signal< sc_lv<8> > p_Val2_22_3_fu_1106_p2;
    sc_signal< sc_lv<8> > p_Val2_22_3_reg_1285;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<64> > tmp_99_fu_413_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > macRegisters_0_V_4_fu_104;
    sc_signal< sc_lv<8> > macRegisters_0_V_fu_730_p2;
    sc_signal< sc_lv<8> > macRegisters_1_V_4_fu_108;
    sc_signal< sc_lv<8> > macRegisters_1_V_fu_749_p2;
    sc_signal< sc_lv<8> > macRegisters_2_V_4_fu_112;
    sc_signal< sc_lv<8> > macRegisters_2_V_fu_768_p2;
    sc_signal< sc_lv<8> > macRegisters_3_V_4_fu_116;
    sc_signal< sc_lv<8> > macRegisters_3_V_fu_787_p2;
    sc_signal< sc_lv<5> > tmp_fu_249_p1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_273_p2;
    sc_signal< sc_lv<12> > tmp_96_fu_253_p3;
    sc_signal< sc_lv<1> > tmp_292_fu_309_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_303_p2;
    sc_signal< sc_lv<6> > nm_mid_fu_279_p3;
    sc_signal< sc_lv<1> > tmp_97_mid_fu_315_p2;
    sc_signal< sc_lv<1> > tmp_274_fu_327_p2;
    sc_signal< sc_lv<6> > nm_2_fu_321_p2;
    sc_signal< sc_lv<5> > tmp_351_fu_341_p1;
    sc_signal< sc_lv<12> > tmp_96_mid1_fu_345_p3;
    sc_signal< sc_lv<12> > tmp_96_mid_fu_287_p3;
    sc_signal< sc_lv<5> > nm_t_mid_fu_295_p3;
    sc_signal< sc_lv<8> > sf_mid2_fu_333_p3;
    sc_signal< sc_lv<12> > sf_cast1_fu_377_p1;
    sc_signal< sc_lv<12> > tmp_96_mid2_fu_353_p3;
    sc_signal< sc_lv<14> > indvar_flatten_op_fu_399_p2;
    sc_signal< sc_lv<7> > p_Val2_s_136_fu_428_p0;
    sc_signal< sc_lv<8> > p_Val2_s_136_fu_428_p1;
    sc_signal< sc_lv<15> > p_08_cast_fu_420_p1;
    sc_signal< sc_lv<15> > p_Val2_s_136_fu_428_p2;
    sc_signal< sc_lv<1> > tmp_354_fu_460_p1;
    sc_signal< sc_lv<1> > tmp_352_fu_434_p3;
    sc_signal< sc_lv<5> > tmp_104_fu_470_p4;
    sc_signal< sc_lv<1> > tmp_103_fu_464_p2;
    sc_signal< sc_lv<6> > tmp_105_fu_480_p3;
    sc_signal< sc_lv<7> > p_Val2_1_fu_498_p0;
    sc_signal< sc_lv<8> > p_Val2_1_fu_498_p1;
    sc_signal< sc_lv<15> > p_Val2_1_fu_498_p2;
    sc_signal< sc_lv<1> > tmp_357_fu_530_p1;
    sc_signal< sc_lv<1> > tmp_355_fu_504_p3;
    sc_signal< sc_lv<5> > tmp_111_fu_540_p4;
    sc_signal< sc_lv<1> > tmp_110_fu_534_p2;
    sc_signal< sc_lv<6> > tmp_112_fu_550_p3;
    sc_signal< sc_lv<7> > p_Val2_2_fu_568_p0;
    sc_signal< sc_lv<8> > p_Val2_2_fu_568_p1;
    sc_signal< sc_lv<15> > p_Val2_2_fu_568_p2;
    sc_signal< sc_lv<1> > tmp_360_fu_600_p1;
    sc_signal< sc_lv<1> > tmp_358_fu_574_p3;
    sc_signal< sc_lv<5> > tmp_116_fu_610_p4;
    sc_signal< sc_lv<1> > tmp_115_fu_604_p2;
    sc_signal< sc_lv<6> > tmp_117_fu_620_p3;
    sc_signal< sc_lv<7> > p_Val2_3_fu_638_p0;
    sc_signal< sc_lv<8> > p_Val2_3_fu_638_p1;
    sc_signal< sc_lv<15> > p_Val2_3_fu_638_p2;
    sc_signal< sc_lv<1> > tmp_363_fu_670_p1;
    sc_signal< sc_lv<1> > tmp_361_fu_644_p3;
    sc_signal< sc_lv<5> > tmp_121_fu_680_p4;
    sc_signal< sc_lv<1> > tmp_120_fu_674_p2;
    sc_signal< sc_lv<6> > tmp_122_fu_690_p3;
    sc_signal< sc_lv<1> > qb_assign_2_fu_716_p2;
    sc_signal< sc_lv<8> > tmp_107_fu_720_p1;
    sc_signal< sc_lv<8> > tmp1_fu_724_p2;
    sc_signal< sc_lv<1> > qb_assign_2_1_fu_735_p2;
    sc_signal< sc_lv<8> > tmp_228_1_fu_739_p1;
    sc_signal< sc_lv<8> > tmp2_fu_743_p2;
    sc_signal< sc_lv<1> > qb_assign_2_2_fu_754_p2;
    sc_signal< sc_lv<8> > tmp_228_2_fu_758_p1;
    sc_signal< sc_lv<8> > tmp3_fu_762_p2;
    sc_signal< sc_lv<1> > qb_assign_2_3_fu_773_p2;
    sc_signal< sc_lv<8> > tmp_228_3_fu_777_p1;
    sc_signal< sc_lv<8> > tmp4_fu_781_p2;
    sc_signal< sc_lv<8> > tmp_123_fu_812_p34;
    sc_signal< sc_lv<8> > tmp_124_fu_887_p34;
    sc_signal< sc_lv<8> > tmp_125_fu_962_p34;
    sc_signal< sc_lv<8> > tmp_126_fu_1037_p34;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<20> ap_const_lv20_80000;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<14> ap_const_lv14_1000;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten6_fu_261_p2();
    void thread_exitcond_flatten_fu_273_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_indvar_flatten_next6_fu_267_p2();
    void thread_indvar_flatten_next_fu_405_p3();
    void thread_indvar_flatten_op_fu_399_p2();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_fu_730_p2();
    void thread_macRegisters_1_V_fu_749_p2();
    void thread_macRegisters_2_V_fu_768_p2();
    void thread_macRegisters_3_V_fu_787_p2();
    void thread_nm_2_fu_321_p2();
    void thread_nm_mid2_fu_369_p3();
    void thread_nm_mid_fu_279_p3();
    void thread_nm_t_mid2_fu_361_p3();
    void thread_nm_t_mid_fu_295_p3();
    void thread_not_exitcond_flatten_fu_303_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_08_cast_fu_420_p1();
    void thread_p_Val2_1_fu_498_p0();
    void thread_p_Val2_1_fu_498_p1();
    void thread_p_Val2_1_fu_498_p2();
    void thread_p_Val2_22_1_fu_956_p2();
    void thread_p_Val2_22_2_fu_1031_p2();
    void thread_p_Val2_22_3_fu_1106_p2();
    void thread_p_Val2_2_fu_568_p0();
    void thread_p_Val2_2_fu_568_p1();
    void thread_p_Val2_2_fu_568_p2();
    void thread_p_Val2_3_fu_638_p0();
    void thread_p_Val2_3_fu_638_p1();
    void thread_p_Val2_3_fu_638_p2();
    void thread_p_Val2_s_136_fu_428_p0();
    void thread_p_Val2_s_136_fu_428_p1();
    void thread_p_Val2_s_136_fu_428_p2();
    void thread_p_Val2_s_fu_881_p2();
    void thread_qb_assign_2_1_fu_735_p2();
    void thread_qb_assign_2_2_fu_754_p2();
    void thread_qb_assign_2_3_fu_773_p2();
    void thread_qb_assign_2_fu_716_p2();
    void thread_real_start();
    void thread_sf_2_fu_393_p2();
    void thread_sf_cast1_fu_377_p1();
    void thread_sf_mid2_fu_333_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_fu_724_p2();
    void thread_tmp2_fu_743_p2();
    void thread_tmp3_fu_762_p2();
    void thread_tmp4_fu_781_p2();
    void thread_tmp_100_fu_387_p2();
    void thread_tmp_103_fu_464_p2();
    void thread_tmp_104_fu_470_p4();
    void thread_tmp_105_fu_480_p3();
    void thread_tmp_106_fu_488_p2();
    void thread_tmp_107_fu_720_p1();
    void thread_tmp_110_fu_534_p2();
    void thread_tmp_111_fu_540_p4();
    void thread_tmp_112_fu_550_p3();
    void thread_tmp_115_fu_604_p2();
    void thread_tmp_116_fu_610_p4();
    void thread_tmp_117_fu_620_p3();
    void thread_tmp_120_fu_674_p2();
    void thread_tmp_121_fu_680_p4();
    void thread_tmp_122_fu_690_p3();
    void thread_tmp_227_1_fu_558_p2();
    void thread_tmp_227_2_fu_628_p2();
    void thread_tmp_227_3_fu_698_p2();
    void thread_tmp_228_1_fu_739_p1();
    void thread_tmp_228_2_fu_758_p1();
    void thread_tmp_228_3_fu_777_p1();
    void thread_tmp_274_fu_327_p2();
    void thread_tmp_292_fu_309_p2();
    void thread_tmp_351_fu_341_p1();
    void thread_tmp_352_fu_434_p3();
    void thread_tmp_354_fu_460_p1();
    void thread_tmp_355_fu_504_p3();
    void thread_tmp_357_fu_530_p1();
    void thread_tmp_358_fu_574_p3();
    void thread_tmp_360_fu_600_p1();
    void thread_tmp_361_fu_644_p3();
    void thread_tmp_363_fu_670_p1();
    void thread_tmp_96_fu_253_p3();
    void thread_tmp_96_mid1_fu_345_p3();
    void thread_tmp_96_mid2_fu_353_p3();
    void thread_tmp_96_mid_fu_287_p3();
    void thread_tmp_97_mid_fu_315_p2();
    void thread_tmp_98_fu_381_p2();
    void thread_tmp_99_fu_413_p1();
    void thread_tmp_fu_249_p1();
    void thread_weights10_m_weights_1_address0();
    void thread_weights10_m_weights_1_ce0();
    void thread_weights10_m_weights_2_address0();
    void thread_weights10_m_weights_2_ce0();
    void thread_weights10_m_weights_3_address0();
    void thread_weights10_m_weights_3_ce0();
    void thread_weights10_m_weights_s_address0();
    void thread_weights10_m_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
