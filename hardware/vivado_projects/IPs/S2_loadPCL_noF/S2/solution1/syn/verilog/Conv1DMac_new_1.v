// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] weights10_m_weights_3_address0;
reg    weights10_m_weights_3_ce0;
wire   [6:0] weights10_m_weights_3_q0;
wire   [11:0] weights10_m_weights_2_address0;
reg    weights10_m_weights_2_ce0;
wire   [6:0] weights10_m_weights_2_q0;
wire   [11:0] weights10_m_weights_1_address0;
reg    weights10_m_weights_1_ce0;
wire   [6:0] weights10_m_weights_1_q0;
wire   [11:0] weights10_m_weights_s_address0;
reg    weights10_m_weights_s_ce0;
wire   [6:0] weights10_m_weights_s_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten6_reg_1149;
reg   [0:0] exitcond_flatten6_reg_1149_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_100_reg_1176;
reg   [0:0] tmp_100_reg_1176_pp0_iter3_reg;
reg   [19:0] indvar_flatten6_reg_185;
reg   [13:0] indvar_flatten_reg_196;
reg   [5:0] nm_reg_207;
reg   [7:0] sf_reg_218;
wire   [0:0] exitcond_flatten6_fu_261_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next6_fu_267_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] nm_t_mid2_fu_361_p3;
reg   [4:0] nm_t_mid2_reg_1158;
reg   [4:0] nm_t_mid2_reg_1158_pp0_iter1_reg;
reg   [4:0] nm_t_mid2_reg_1158_pp0_iter2_reg;
wire   [5:0] nm_mid2_fu_369_p3;
wire   [11:0] tmp_98_fu_381_p2;
reg   [11:0] tmp_98_reg_1171;
wire   [0:0] tmp_100_fu_387_p2;
reg   [0:0] tmp_100_reg_1176_pp0_iter1_reg;
reg   [0:0] tmp_100_reg_1176_pp0_iter2_reg;
wire   [7:0] sf_2_fu_393_p2;
wire   [13:0] indvar_flatten_next_fu_405_p3;
reg   [7:0] tmp_101_reg_1210;
reg   [0:0] tmp_353_reg_1215;
wire   [0:0] tmp_106_fu_488_p2;
reg   [0:0] tmp_106_reg_1220;
reg   [7:0] tmp_108_reg_1225;
reg   [0:0] tmp_356_reg_1230;
wire   [0:0] tmp_227_1_fu_558_p2;
reg   [0:0] tmp_227_1_reg_1235;
reg   [7:0] tmp_113_reg_1240;
reg   [0:0] tmp_359_reg_1245;
wire   [0:0] tmp_227_2_fu_628_p2;
reg   [0:0] tmp_227_2_reg_1250;
reg   [7:0] tmp_118_reg_1255;
reg   [0:0] tmp_362_reg_1260;
wire   [0:0] tmp_227_3_fu_698_p2;
reg   [0:0] tmp_227_3_reg_1265;
wire   [7:0] p_Val2_s_fu_881_p2;
reg   [7:0] p_Val2_s_reg_1270;
wire   [7:0] p_Val2_22_1_fu_956_p2;
reg   [7:0] p_Val2_22_1_reg_1275;
wire   [7:0] p_Val2_22_2_fu_1031_p2;
reg   [7:0] p_Val2_22_2_reg_1280;
wire   [7:0] p_Val2_22_3_fu_1106_p2;
reg   [7:0] p_Val2_22_3_reg_1285;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_99_fu_413_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_4_fu_104;
wire   [7:0] macRegisters_0_V_fu_730_p2;
reg   [7:0] macRegisters_1_V_4_fu_108;
wire   [7:0] macRegisters_1_V_fu_749_p2;
reg   [7:0] macRegisters_2_V_4_fu_112;
wire   [7:0] macRegisters_2_V_fu_768_p2;
reg   [7:0] macRegisters_3_V_4_fu_116;
wire   [7:0] macRegisters_3_V_fu_787_p2;
wire   [4:0] tmp_fu_249_p1;
wire   [0:0] exitcond_flatten_fu_273_p2;
wire   [11:0] tmp_96_fu_253_p3;
wire   [0:0] tmp_292_fu_309_p2;
wire   [0:0] not_exitcond_flatten_fu_303_p2;
wire   [5:0] nm_mid_fu_279_p3;
wire   [0:0] tmp_97_mid_fu_315_p2;
wire   [0:0] tmp_274_fu_327_p2;
wire   [5:0] nm_2_fu_321_p2;
wire   [4:0] tmp_351_fu_341_p1;
wire   [11:0] tmp_96_mid1_fu_345_p3;
wire   [11:0] tmp_96_mid_fu_287_p3;
wire   [4:0] nm_t_mid_fu_295_p3;
wire   [7:0] sf_mid2_fu_333_p3;
wire   [11:0] sf_cast1_fu_377_p1;
wire   [11:0] tmp_96_mid2_fu_353_p3;
wire   [13:0] indvar_flatten_op_fu_399_p2;
wire  signed [6:0] p_Val2_s_136_fu_428_p0;
wire  signed [7:0] p_Val2_s_136_fu_428_p1;
wire  signed [14:0] p_08_cast_fu_420_p1;
wire   [14:0] p_Val2_s_136_fu_428_p2;
wire   [0:0] tmp_354_fu_460_p1;
wire   [0:0] tmp_352_fu_434_p3;
wire   [4:0] tmp_104_fu_470_p4;
wire   [0:0] tmp_103_fu_464_p2;
wire   [5:0] tmp_105_fu_480_p3;
wire  signed [6:0] p_Val2_1_fu_498_p0;
wire  signed [7:0] p_Val2_1_fu_498_p1;
wire   [14:0] p_Val2_1_fu_498_p2;
wire   [0:0] tmp_357_fu_530_p1;
wire   [0:0] tmp_355_fu_504_p3;
wire   [4:0] tmp_111_fu_540_p4;
wire   [0:0] tmp_110_fu_534_p2;
wire   [5:0] tmp_112_fu_550_p3;
wire  signed [6:0] p_Val2_2_fu_568_p0;
wire  signed [7:0] p_Val2_2_fu_568_p1;
wire   [14:0] p_Val2_2_fu_568_p2;
wire   [0:0] tmp_360_fu_600_p1;
wire   [0:0] tmp_358_fu_574_p3;
wire   [4:0] tmp_116_fu_610_p4;
wire   [0:0] tmp_115_fu_604_p2;
wire   [5:0] tmp_117_fu_620_p3;
wire  signed [6:0] p_Val2_3_fu_638_p0;
wire  signed [7:0] p_Val2_3_fu_638_p1;
wire   [14:0] p_Val2_3_fu_638_p2;
wire   [0:0] tmp_363_fu_670_p1;
wire   [0:0] tmp_361_fu_644_p3;
wire   [4:0] tmp_121_fu_680_p4;
wire   [0:0] tmp_120_fu_674_p2;
wire   [5:0] tmp_122_fu_690_p3;
wire   [0:0] qb_assign_2_fu_716_p2;
wire   [7:0] tmp_107_fu_720_p1;
wire   [7:0] tmp1_fu_724_p2;
wire   [0:0] qb_assign_2_1_fu_735_p2;
wire   [7:0] tmp_228_1_fu_739_p1;
wire   [7:0] tmp2_fu_743_p2;
wire   [0:0] qb_assign_2_2_fu_754_p2;
wire   [7:0] tmp_228_2_fu_758_p1;
wire   [7:0] tmp3_fu_762_p2;
wire   [0:0] qb_assign_2_3_fu_773_p2;
wire   [7:0] tmp_228_3_fu_777_p1;
wire   [7:0] tmp4_fu_781_p2;
wire   [7:0] tmp_123_fu_812_p34;
wire   [7:0] tmp_124_fu_887_p34;
wire   [7:0] tmp_125_fu_962_p34;
wire   [7:0] tmp_126_fu_1037_p34;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new_1_wQgW #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights10_m_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights10_m_weights_3_address0),
    .ce0(weights10_m_weights_3_ce0),
    .q0(weights10_m_weights_3_q0)
);

Conv1DMac_new_1_wRg6 #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights10_m_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights10_m_weights_2_address0),
    .ce0(weights10_m_weights_2_ce0),
    .q0(weights10_m_weights_2_q0)
);

Conv1DMac_new_1_wShg #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights10_m_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights10_m_weights_1_address0),
    .ce0(weights10_m_weights_1_ce0),
    .q0(weights10_m_weights_1_q0)
);

Conv1DMac_new_1_wThq #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights10_m_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights10_m_weights_s_address0),
    .ce0(weights10_m_weights_s_ce0),
    .q0(weights10_m_weights_s_q0)
);

computeS2_mux_325yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_x_x_x_U125(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd255),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd1),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd1),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1158_pp0_iter2_reg),
    .dout(tmp_123_fu_812_p34)
);

computeS2_mux_325yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_x_x_x_U126(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd1),
    .din4(8'd255),
    .din5(8'd0),
    .din6(8'd1),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd1),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1158_pp0_iter2_reg),
    .dout(tmp_124_fu_887_p34)
);

computeS2_mux_325yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_x_x_x_U127(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd1),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd255),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1158_pp0_iter2_reg),
    .dout(tmp_125_fu_962_p34)
);

computeS2_mux_325yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_x_x_x_U128(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd1),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd255),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd255),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd255),
    .din24(8'd0),
    .din25(8'd255),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd255),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1158_pp0_iter2_reg),
    .dout(tmp_126_fu_1037_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_fu_261_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten6_reg_185 <= indvar_flatten_next6_fu_267_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten6_reg_185 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_fu_261_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_196 <= indvar_flatten_next_fu_405_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_196 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_4_fu_104 <= macRegisters_0_V_fu_730_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_100_reg_1176_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_4_fu_104 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_4_fu_108 <= macRegisters_1_V_fu_749_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_100_reg_1176_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_4_fu_108 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_4_fu_112 <= macRegisters_2_V_fu_768_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_100_reg_1176_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_4_fu_112 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_4_fu_116 <= macRegisters_3_V_fu_787_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_100_reg_1176_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_4_fu_116 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_fu_261_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_207 <= nm_mid2_fu_369_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_207 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_fu_261_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_218 <= sf_2_fu_393_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_218 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten6_reg_1149 <= exitcond_flatten6_fu_261_p2;
        exitcond_flatten6_reg_1149_pp0_iter1_reg <= exitcond_flatten6_reg_1149;
        nm_t_mid2_reg_1158_pp0_iter1_reg <= nm_t_mid2_reg_1158;
        tmp_100_reg_1176_pp0_iter1_reg <= tmp_100_reg_1176;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1158 <= nm_t_mid2_fu_361_p3;
        tmp_100_reg_1176 <= tmp_100_fu_387_p2;
        tmp_98_reg_1171 <= tmp_98_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1158_pp0_iter2_reg <= nm_t_mid2_reg_1158_pp0_iter1_reg;
        tmp_100_reg_1176_pp0_iter2_reg <= tmp_100_reg_1176_pp0_iter1_reg;
        tmp_100_reg_1176_pp0_iter3_reg <= tmp_100_reg_1176_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1176_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_22_1_reg_1275 <= p_Val2_22_1_fu_956_p2;
        p_Val2_22_2_reg_1280 <= p_Val2_22_2_fu_1031_p2;
        p_Val2_22_3_reg_1285 <= p_Val2_22_3_fu_1106_p2;
        p_Val2_s_reg_1270 <= p_Val2_s_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_101_reg_1210 <= {{p_Val2_s_136_fu_428_p2[14:7]}};
        tmp_106_reg_1220 <= tmp_106_fu_488_p2;
        tmp_108_reg_1225 <= {{p_Val2_1_fu_498_p2[14:7]}};
        tmp_113_reg_1240 <= {{p_Val2_2_fu_568_p2[14:7]}};
        tmp_118_reg_1255 <= {{p_Val2_3_fu_638_p2[14:7]}};
        tmp_227_1_reg_1235 <= tmp_227_1_fu_558_p2;
        tmp_227_2_reg_1250 <= tmp_227_2_fu_628_p2;
        tmp_227_3_reg_1265 <= tmp_227_3_fu_698_p2;
        tmp_353_reg_1215 <= p_Val2_s_136_fu_428_p2[32'd6];
        tmp_356_reg_1230 <= p_Val2_1_fu_498_p2[32'd6];
        tmp_359_reg_1245 <= p_Val2_2_fu_568_p2[32'd6];
        tmp_362_reg_1260 <= p_Val2_3_fu_638_p2[32'd6];
    end
end

always @ (*) begin
    if ((exitcond_flatten6_fu_261_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights10_m_weights_1_ce0 = 1'b1;
    end else begin
        weights10_m_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights10_m_weights_2_ce0 = 1'b1;
    end else begin
        weights10_m_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights10_m_weights_3_ce0 = 1'b1;
    end else begin
        weights10_m_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights10_m_weights_s_ce0 = 1'b1;
    end else begin
        weights10_m_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten6_fu_261_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten6_fu_261_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten6_reg_1149_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_100_reg_1176_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten6_fu_261_p2 = ((indvar_flatten6_reg_185 == 20'd524288) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_273_p2 = ((indvar_flatten_reg_196 == 14'd4096) ? 1'b1 : 1'b0);

assign indvar_flatten_next6_fu_267_p2 = (20'd1 + indvar_flatten6_reg_185);

assign indvar_flatten_next_fu_405_p3 = ((exitcond_flatten_fu_273_p2[0:0] === 1'b1) ? 14'd1 : indvar_flatten_op_fu_399_p2);

assign indvar_flatten_op_fu_399_p2 = (indvar_flatten_reg_196 + 14'd1);

assign macRegisters_0_V_fu_730_p2 = (tmp_101_reg_1210 + tmp1_fu_724_p2);

assign macRegisters_1_V_fu_749_p2 = (tmp_108_reg_1225 + tmp2_fu_743_p2);

assign macRegisters_2_V_fu_768_p2 = (tmp_113_reg_1240 + tmp3_fu_762_p2);

assign macRegisters_3_V_fu_787_p2 = (tmp_118_reg_1255 + tmp4_fu_781_p2);

assign nm_2_fu_321_p2 = (6'd1 + nm_mid_fu_279_p3);

assign nm_mid2_fu_369_p3 = ((tmp_97_mid_fu_315_p2[0:0] === 1'b1) ? nm_2_fu_321_p2 : nm_mid_fu_279_p3);

assign nm_mid_fu_279_p3 = ((exitcond_flatten_fu_273_p2[0:0] === 1'b1) ? 6'd0 : nm_reg_207);

assign nm_t_mid2_fu_361_p3 = ((tmp_97_mid_fu_315_p2[0:0] === 1'b1) ? tmp_351_fu_341_p1 : nm_t_mid_fu_295_p3);

assign nm_t_mid_fu_295_p3 = ((exitcond_flatten_fu_273_p2[0:0] === 1'b1) ? 5'd0 : tmp_fu_249_p1);

assign not_exitcond_flatten_fu_303_p2 = (exitcond_flatten_fu_273_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_22_3_reg_1285}, {p_Val2_22_2_reg_1280}}, {p_Val2_22_1_reg_1275}}, {p_Val2_s_reg_1270}};

assign p_08_cast_fu_420_p1 = $signed(in_V_V_dout);

assign p_Val2_1_fu_498_p0 = weights10_m_weights_2_q0;

assign p_Val2_1_fu_498_p1 = p_08_cast_fu_420_p1;

assign p_Val2_1_fu_498_p2 = ($signed(p_Val2_1_fu_498_p0) * $signed(p_Val2_1_fu_498_p1));

assign p_Val2_22_1_fu_956_p2 = (macRegisters_1_V_fu_749_p2 + tmp_124_fu_887_p34);

assign p_Val2_22_2_fu_1031_p2 = (macRegisters_2_V_fu_768_p2 + tmp_125_fu_962_p34);

assign p_Val2_22_3_fu_1106_p2 = (macRegisters_3_V_fu_787_p2 + tmp_126_fu_1037_p34);

assign p_Val2_2_fu_568_p0 = weights10_m_weights_1_q0;

assign p_Val2_2_fu_568_p1 = p_08_cast_fu_420_p1;

assign p_Val2_2_fu_568_p2 = ($signed(p_Val2_2_fu_568_p0) * $signed(p_Val2_2_fu_568_p1));

assign p_Val2_3_fu_638_p0 = weights10_m_weights_s_q0;

assign p_Val2_3_fu_638_p1 = p_08_cast_fu_420_p1;

assign p_Val2_3_fu_638_p2 = ($signed(p_Val2_3_fu_638_p0) * $signed(p_Val2_3_fu_638_p1));

assign p_Val2_s_136_fu_428_p0 = weights10_m_weights_3_q0;

assign p_Val2_s_136_fu_428_p1 = p_08_cast_fu_420_p1;

assign p_Val2_s_136_fu_428_p2 = ($signed(p_Val2_s_136_fu_428_p0) * $signed(p_Val2_s_136_fu_428_p1));

assign p_Val2_s_fu_881_p2 = (macRegisters_0_V_fu_730_p2 + tmp_123_fu_812_p34);

assign qb_assign_2_1_fu_735_p2 = (tmp_356_reg_1230 & tmp_227_1_reg_1235);

assign qb_assign_2_2_fu_754_p2 = (tmp_359_reg_1245 & tmp_227_2_reg_1250);

assign qb_assign_2_3_fu_773_p2 = (tmp_362_reg_1260 & tmp_227_3_reg_1265);

assign qb_assign_2_fu_716_p2 = (tmp_353_reg_1215 & tmp_106_reg_1220);

assign sf_2_fu_393_p2 = (sf_mid2_fu_333_p3 + 8'd1);

assign sf_cast1_fu_377_p1 = sf_mid2_fu_333_p3;

assign sf_mid2_fu_333_p3 = ((tmp_274_fu_327_p2[0:0] === 1'b1) ? 8'd0 : sf_reg_218);

assign start_out = real_start;

assign tmp1_fu_724_p2 = (tmp_107_fu_720_p1 + macRegisters_0_V_4_fu_104);

assign tmp2_fu_743_p2 = (tmp_228_1_fu_739_p1 + macRegisters_1_V_4_fu_108);

assign tmp3_fu_762_p2 = (tmp_228_2_fu_758_p1 + macRegisters_2_V_4_fu_112);

assign tmp4_fu_781_p2 = (tmp_228_3_fu_777_p1 + macRegisters_3_V_4_fu_116);

assign tmp_100_fu_387_p2 = ((sf_mid2_fu_333_p3 == 8'd127) ? 1'b1 : 1'b0);

assign tmp_103_fu_464_p2 = (tmp_354_fu_460_p1 | tmp_352_fu_434_p3);

assign tmp_104_fu_470_p4 = {{p_Val2_s_136_fu_428_p2[5:1]}};

assign tmp_105_fu_480_p3 = {{tmp_104_fu_470_p4}, {tmp_103_fu_464_p2}};

assign tmp_106_fu_488_p2 = ((tmp_105_fu_480_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_107_fu_720_p1 = qb_assign_2_fu_716_p2;

assign tmp_110_fu_534_p2 = (tmp_357_fu_530_p1 | tmp_355_fu_504_p3);

assign tmp_111_fu_540_p4 = {{p_Val2_1_fu_498_p2[5:1]}};

assign tmp_112_fu_550_p3 = {{tmp_111_fu_540_p4}, {tmp_110_fu_534_p2}};

assign tmp_115_fu_604_p2 = (tmp_360_fu_600_p1 | tmp_358_fu_574_p3);

assign tmp_116_fu_610_p4 = {{p_Val2_2_fu_568_p2[5:1]}};

assign tmp_117_fu_620_p3 = {{tmp_116_fu_610_p4}, {tmp_115_fu_604_p2}};

assign tmp_120_fu_674_p2 = (tmp_363_fu_670_p1 | tmp_361_fu_644_p3);

assign tmp_121_fu_680_p4 = {{p_Val2_3_fu_638_p2[5:1]}};

assign tmp_122_fu_690_p3 = {{tmp_121_fu_680_p4}, {tmp_120_fu_674_p2}};

assign tmp_227_1_fu_558_p2 = ((tmp_112_fu_550_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_2_fu_628_p2 = ((tmp_117_fu_620_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_3_fu_698_p2 = ((tmp_122_fu_690_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_228_1_fu_739_p1 = qb_assign_2_1_fu_735_p2;

assign tmp_228_2_fu_758_p1 = qb_assign_2_2_fu_754_p2;

assign tmp_228_3_fu_777_p1 = qb_assign_2_3_fu_773_p2;

assign tmp_274_fu_327_p2 = (tmp_97_mid_fu_315_p2 | exitcond_flatten_fu_273_p2);

assign tmp_292_fu_309_p2 = ((sf_reg_218 == 8'd128) ? 1'b1 : 1'b0);

assign tmp_351_fu_341_p1 = nm_2_fu_321_p2[4:0];

assign tmp_352_fu_434_p3 = p_Val2_s_136_fu_428_p2[32'd14];

assign tmp_354_fu_460_p1 = p_Val2_s_136_fu_428_p2[0:0];

assign tmp_355_fu_504_p3 = p_Val2_1_fu_498_p2[32'd14];

assign tmp_357_fu_530_p1 = p_Val2_1_fu_498_p2[0:0];

assign tmp_358_fu_574_p3 = p_Val2_2_fu_568_p2[32'd14];

assign tmp_360_fu_600_p1 = p_Val2_2_fu_568_p2[0:0];

assign tmp_361_fu_644_p3 = p_Val2_3_fu_638_p2[32'd14];

assign tmp_363_fu_670_p1 = p_Val2_3_fu_638_p2[0:0];

assign tmp_96_fu_253_p3 = {{tmp_fu_249_p1}, {7'd0}};

assign tmp_96_mid1_fu_345_p3 = {{tmp_351_fu_341_p1}, {7'd0}};

assign tmp_96_mid2_fu_353_p3 = ((tmp_97_mid_fu_315_p2[0:0] === 1'b1) ? tmp_96_mid1_fu_345_p3 : tmp_96_mid_fu_287_p3);

assign tmp_96_mid_fu_287_p3 = ((exitcond_flatten_fu_273_p2[0:0] === 1'b1) ? 12'd0 : tmp_96_fu_253_p3);

assign tmp_97_mid_fu_315_p2 = (tmp_292_fu_309_p2 & not_exitcond_flatten_fu_303_p2);

assign tmp_98_fu_381_p2 = (sf_cast1_fu_377_p1 + tmp_96_mid2_fu_353_p3);

assign tmp_99_fu_413_p1 = tmp_98_reg_1171;

assign tmp_fu_249_p1 = nm_reg_207[4:0];

assign weights10_m_weights_1_address0 = tmp_99_fu_413_p1;

assign weights10_m_weights_2_address0 = tmp_99_fu_413_p1;

assign weights10_m_weights_3_address0 = tmp_99_fu_413_p1;

assign weights10_m_weights_s_address0 = tmp_99_fu_413_p1;

endmodule //Conv1DMac_new_1
